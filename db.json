{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/he","path":"he","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/he","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461637080830},{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1460698845489},{"_id":"themes/yelee/README.md","hash":"052a9debfddb265c8d334bbdc26302d61f6a692f","modified":1460698845489},{"_id":"themes/yelee/_config.yml","hash":"766fe2d4852b7dc83756c45d5b046b83b74819f5","modified":1460942959359},{"_id":"themes/yelee/_config.yml~","hash":"766fe2d4852b7dc83756c45d5b046b83b74819f5","modified":1460942959135},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1460698845493},{"_id":"source/_posts/RIIT.md","hash":"e81a99b0948ed52f3be6eef0261de7b993470854","modified":1461807214936},{"_id":"source/_posts/RIIT.md~","hash":"3ac47a06be65c4eca57e24e4b25939e04a2fb0da","modified":1461637679750},{"_id":"source/_posts/String.md~","hash":"dacc43f68bfb1faa5c16b4fcf0b31544c5ec0851","modified":1461637198998},{"_id":"source/_posts//","hash":"3784f8958d011e2f9669ace16c05a1cf4d0364b2","modified":1461721011725},{"_id":"source/_posts/concurrency.md","hash":"8eb4e8320157fb217378f0c060cbbe2b7dcd6c0d","modified":1461897368554},{"_id":"source/_posts/generics.md","hash":"1287cf2fe6083805bb1701e5e9aa4de838f49415","modified":1461640935674},{"_id":"source/_posts/hello-world.md","hash":"b7d7e4f2883c1595a61a31a105b144ce0760ec26","modified":1461637344114},{"_id":"source/_posts/我对java-String的理解.md","hash":"93863a8e7432f36c80379732f8b76649b791bd42","modified":1461637198998},{"_id":"source/about/index.md","hash":"739a7fd0e43283a47b7417821e64e3c0b9b48823","modified":1461637198998},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1460698845493},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1460698845493},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1460698845493},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1460698845493},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1460698845493},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1460698845493},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1460698845493},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1460698845493},{"_id":"source/tafs/index.md","hash":"a92115c1fa6d24caaa8b4a809bf8ca946adf6552","modified":1461637198998},{"_id":"themes/yelee/languages/default.yml","hash":"2253fb0d03c963384b3f525fe151b79ba03809b7","modified":1460698845489},{"_id":"themes/yelee/languages/en.yml","hash":"d94c285d0cf7e637ea9aff79da9859919f068b79","modified":1460698845489},{"_id":"source/tags/index.md","hash":"bd27675caa2e7c95ffb80e5d153f7209189d1863","modified":1461637198998},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"0c9645ba8c59a6e66837dacaddee0433e096832d","modified":1460698845489},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"ba77fd1aa6708f22eb710a4dfaa0e76b722311e7","modified":1460698845489},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"5165fac060a84319a72f1633b66bfc0073cdbf81","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"6fdffcecd81f6e544fdb63aa1f01b11c41799271","modified":1460942625631},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"29749e14db1a5f1ab5e82f486ac0c7f8417c86c0","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"4cc5ed767999230dc337ba790e73e4e2c45104b5","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"784096c088c3779a6191f6e811c11abc762c03fb","modified":1460942625631},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"70ad192537b5b4de4b4f208b62a450441472e85c","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"ae774e96899fb5d8e45f2b1379b6b944350466f6","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"8e14f5a3fb03d93ee2e5dcb0c26903f365518be1","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1460942625631},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"bfc245d99cca8e325f7c34b985a769ff780f28a6","modified":1460698845493},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"de8774db289e973d71898b660e11a8f94a2674bd","modified":1460698845493},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1460698845493},{"_id":"themes/yelee/source/css/_variables.styl","hash":"842eaf4c9c24577e042b9c9887d2df8e18b65c7b","modified":1460942625643},{"_id":"themes/yelee/source/css/style.styl","hash":"e0a96129c8467717032c038a1ae09d6c186b0d20","modified":1460942625643},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1460698845493},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"6c181145a7033847df3663e10c136590dbab2ba6","modified":1460942625643},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"6129d1e73e1c9e36c18ab887d04a1461f1af9635","modified":1460942625643},{"_id":"themes/yelee/source/img/V2EX.png","hash":"f0caf915a5ce1a5fb96d7ed7bd2aad9ce0d3e243","modified":1460942625643},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1460698845501},{"_id":"themes/yelee/source/img/简书.png","hash":"a1b837849522cc2956317e511b076831bb7acd8c","modified":1460942625643},{"_id":"themes/yelee/source/img/知乎.png","hash":"2da06acf9e8026d9ac0a719844a6fae142271c14","modified":1460942625643},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"9620f5025d6e2614d82ace771ddfe708362220c4","modified":1460942625643},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"caa6021d0c35f11744f03d23a2c12f7734041562","modified":1460942625643},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"8e3065d8ea3a3d07b23d4cfc10ceb626c67a926a","modified":1460942625643},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1460698845501},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"40b9099a802ee7ca40f58ab013e5faad5b3f8ed5","modified":1460942625643},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1460698845501},{"_id":"themes/yelee/source/js/main.js","hash":"7ecccd9fe82e45ff2bac0e872ac29c7343b7d89f","modified":1460942625643},{"_id":"themes/yelee/source/js/pc.js","hash":"25d8b2fe64438198d2a29502d84ef6c0dfd292ff","modified":1460698845501},{"_id":"themes/yelee/source/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1460698845493},{"_id":"themes/yelee/source/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1460698845493},{"_id":"themes/yelee/source/img/avatar.png","hash":"305ca1119f7caf9aff19169dcb9be5b577190614","modified":1460603959469},{"_id":"themes/yelee/source/js/mobile.js","hash":"6bdf45555fab012c201d8b8a255ce2257bf5fdbd","modified":1460698845501},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"27ccc6374d04cd93717a2b6c587342b6cbe6fc80","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"0476d338f708b3385fb352298063c35b90670e39","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"2277125ef35f96a1ba76a1b84fc570526826453d","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"ba69f126fdb2d473ae7c6bcc6558157620338e05","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"fdd08dd77cd0338f73119f419ab9628aa78bff53","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"bed93ab1487da7591883e0df5eefa4cd413434ed","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"a7049482f039c878cf14c5a3bd62fe4d085d3f22","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"c7807dda98bbd91ad8172a896a55c3c974859423","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"75272fdce9a6430313786cd651e7f3fe379329cc","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1460698845493},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"1f9ac8182fe0b867a8f1988888336c40c25894cd","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1460698845489},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1460942625643},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"a78514ef137fab50dbbc14d8a060515855422736","modified":1460698845493},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1460698845493},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1460698845493},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1460698845493},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5d14ba8efac7a0f1ffd5bc8924fcfdb7294bc918","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"69a77b9f7b8e84df7ae1c78e76659a92739b79a9","modified":1460698845493},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"3d1234517493ddadbd6de3a4bd501a3dfc411ed6","modified":1460942625643},{"_id":"themes/yelee/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1460698845493},{"_id":"public/tags/index.html","hash":"d81d8b36a67e22eb255b8f293b47183df9855a72","modified":1461807271199},{"_id":"public/tafs/index.html","hash":"5e11fed5c6c8b69ece25612b4da6b68b85cfa114","modified":1461807271285},{"_id":"public/archives/index.html","hash":"4b8900b429cf98fcd8fe16e8eaf66e0e0f0afa7f","modified":1461807271293},{"_id":"public/archives/2016/index.html","hash":"b3f8cb60f460dc6479c75893cf8182960b9afc50","modified":1461807271293},{"_id":"public/archives/2016/04/index.html","hash":"80594a5fc2abe1bab6e4d0be33c2e316f58d94b9","modified":1461807271293},{"_id":"public/tags/java-reflection/index.html","hash":"3225b2aba901c1133c7df776e7eb5802733baeb3","modified":1461807271293},{"_id":"public/tags/java/index.html","hash":"d6eb522b3caca26f6f2ce963d12931bdda5785b4","modified":1461807271293},{"_id":"public/2016/04/26/concurrency/index.html","hash":"23c7890b5e02f7a3b3a08c6703e26702bdf7b7b6","modified":1461897377374},{"_id":"public/2016/04/26/generics/index.html","hash":"95415ff5360dc85b4438c4bb314955b3432de4db","modified":1461807271293},{"_id":"public/about/index.html","hash":"ff105750a4963eefeacc1e2a535ffb7710c118df","modified":1461807271293},{"_id":"public/2016/04/26/hello-world/index.html","hash":"0aeb8928ef96fca8dd59244969ec604cc957d2f7","modified":1461807271294},{"_id":"public/index.html","hash":"ce1aa8189bc019b36b0245734cd12fb58abc014c","modified":1461897377374},{"_id":"public/2016/04/19/我对java-String的理解/index.html","hash":"daea5e29d0afca84c279ea320853457254970bf8","modified":1461807271294},{"_id":"public/2016/04/20/RIIT/index.html","hash":"cf17b908ffb740d85e991b342ae79c45d619cb44","modified":1461807271294},{"_id":"public/he","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461807271294},{"_id":"public/tags/concurrency/index.html","hash":"1268ebd492f47b31ebbb5b844b676e195fe40b7b","modified":1461807271301},{"_id":"public/tags/generics/index.html","hash":"db9acf25d80e8268500744144609c2425b500af0","modified":1461807271301},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1461807271301},{"_id":"public/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1461807271301},{"_id":"public/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1461807271301},{"_id":"public/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1461807271301},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1461807271301},{"_id":"public/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1461807271301},{"_id":"public/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1461807271301},{"_id":"public/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1461807271301},{"_id":"public/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1461807271302},{"_id":"public/img/TiddlyWiki.png","hash":"6c181145a7033847df3663e10c136590dbab2ba6","modified":1461807271302},{"_id":"public/img/简书.png","hash":"a1b837849522cc2956317e511b076831bb7acd8c","modified":1461807271302},{"_id":"public/img/SegmentFault.png","hash":"6129d1e73e1c9e36c18ab887d04a1461f1af9635","modified":1461807271302},{"_id":"public/img/知乎.png","hash":"2da06acf9e8026d9ac0a719844a6fae142271c14","modified":1461807271302},{"_id":"public/img/豆瓣.png","hash":"caa6021d0c35f11744f03d23a2c12f7734041562","modified":1461807271302},{"_id":"public/img/网易云音乐.png","hash":"9620f5025d6e2614d82ace771ddfe708362220c4","modified":1461807271302},{"_id":"public/img/虾米音乐.png","hash":"8e3065d8ea3a3d07b23d4cfc10ceb626c67a926a","modified":1461807271302},{"_id":"public/img/新浪微博.png","hash":"40b9099a802ee7ca40f58ab013e5faad5b3f8ed5","modified":1461807271302},{"_id":"public/img/V2EX.png","hash":"f0caf915a5ce1a5fb96d7ed7bd2aad9ce0d3e243","modified":1461807271302},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1461807271302},{"_id":"public/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1461807272410},{"_id":"public/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1461807272411},{"_id":"public/img/avatar.png","hash":"305ca1119f7caf9aff19169dcb9be5b577190614","modified":1461807272411},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1461807272413},{"_id":"public/js/mobile.js","hash":"40dab9b195818df57bfac9e379429a4bbf074659","modified":1461807272413},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1461807272413},{"_id":"public/js/main.js","hash":"6f1da150b522f603dc489d0c5cf625c0155fde80","modified":1461807272414},{"_id":"public/js/pc.js","hash":"ff696c259fbdc16d5939367c2f7ea871244d4b7a","modified":1461807272414},{"_id":"public/css/style.css","hash":"66f9f81875890c680617f6096b440d16244eab52","modified":1461807272414},{"_id":"source/_posts/oc","hash":"24bca50ac752acf9a145b5359c65e4313fba1a87","modified":1461835876285}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2016-04-14T02:12:45.000Z","tags":null,"_content":"## 个人简介\nliangsj，游荡在互联网公司和学校的程序员，喜欢折腾各种技术。\n## 经历\n本科：天津大学\n硕士：中国矿业大学\n经历：\n      1、在昂腾公司实习，负责物联网项目的安卓部分。独立负责莫比自行车，体重秤、跑步机android端开放。参与后台服务器开发。\n      2、现任老虎地图，android项目组负责人。负责地图生产工具、地图android端的开发、维护。\n## 个人简介\n程序员，计算机科学爱好者。写着上层业务赚钱，研究底层写论文。书读不少，但是还是一问三不知。坚信技术改变世界。人前自称码农，人后自称软件工程师。各种技术初学者，在不断的向上爬。目前研究android，在各个公司，码着android代码养家户口。热爱运动，游泳，健身。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-04-14 10:12:45\ntags:\n---\n## 个人简介\nliangsj，游荡在互联网公司和学校的程序员，喜欢折腾各种技术。\n## 经历\n本科：天津大学\n硕士：中国矿业大学\n经历：\n      1、在昂腾公司实习，负责物联网项目的安卓部分。独立负责莫比自行车，体重秤、跑步机android端开放。参与后台服务器开发。\n      2、现任老虎地图，android项目组负责人。负责地图生产工具、地图android端的开发、维护。\n## 个人简介\n程序员，计算机科学爱好者。写着上层业务赚钱，研究底层写论文。书读不少，但是还是一问三不知。坚信技术改变世界。人前自称码农，人后自称软件工程师。各种技术初学者，在不断的向上爬。目前研究android，在各个公司，码着android代码养家户口。热爱运动，游泳，健身。\n","updated":"2016-04-26T02:19:58.998Z","path":"about/index.html","comments":1,"layout":"page","_id":"cinjmb0nl0001r0ufa81y6tdj","content":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>liangsj，游荡在互联网公司和学校的程序员，喜欢折腾各种技术。</p>\n<h2 id=\"经历\"><a href=\"#经历\" class=\"headerlink\" title=\"经历\"></a>经历</h2><p>本科：天津大学<br>硕士：中国矿业大学<br>经历：<br>      1、在昂腾公司实习，负责物联网项目的安卓部分。独立负责莫比自行车，体重秤、跑步机android端开放。参与后台服务器开发。<br>      2、现任老虎地图，android项目组负责人。负责地图生产工具、地图android端的开发、维护。</p>\n<h2 id=\"个人简介-1\"><a href=\"#个人简介-1\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>程序员，计算机科学爱好者。写着上层业务赚钱，研究底层写论文。书读不少，但是还是一问三不知。坚信技术改变世界。人前自称码农，人后自称软件工程师。各种技术初学者，在不断的向上爬。目前研究android，在各个公司，码着android代码养家户口。热爱运动，游泳，健身。</p>\n","excerpt":"","more":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>liangsj，游荡在互联网公司和学校的程序员，喜欢折腾各种技术。</p>\n<h2 id=\"经历\"><a href=\"#经历\" class=\"headerlink\" title=\"经历\"></a>经历</h2><p>本科：天津大学<br>硕士：中国矿业大学<br>经历：<br>      1、在昂腾公司实习，负责物联网项目的安卓部分。独立负责莫比自行车，体重秤、跑步机android端开放。参与后台服务器开发。<br>      2、现任老虎地图，android项目组负责人。负责地图生产工具、地图android端的开发、维护。</p>\n<h2 id=\"个人简介-1\"><a href=\"#个人简介-1\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>程序员，计算机科学爱好者。写着上层业务赚钱，研究底层写论文。书读不少，但是还是一问三不知。坚信技术改变世界。人前自称码农，人后自称软件工程师。各种技术初学者，在不断的向上爬。目前研究android，在各个公司，码着android代码养家户口。热爱运动，游泳，健身。</p>\n"},{"title":"tafs","date":"2016-04-14T02:42:52.000Z","_content":"","source":"tafs/index.md","raw":"---\ntitle: tafs\ndate: 2016-04-14 10:42:52\n---\n","updated":"2016-04-26T02:19:58.998Z","path":"tafs/index.html","comments":1,"layout":"page","_id":"cinjmb0oi000er0uffo7h8sj1","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-04-14T02:42:57.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-14 10:42:57\n---\n","updated":"2016-04-26T02:19:58.998Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cinjmb0ok000fr0ufmj7flknf","content":"","excerpt":"","more":""}],"Post":[{"title":"我所理解的java反射","date":"2016-04-20T11:24:29.000Z","_content":"## 为什么要使用反射\n   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。\n   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。\n\n## Class\n\n一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。\n\n{%codeblock%}\n1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。\n2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查\n{%endcodeblock%}\n值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。\n使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。\n\n 泛型和Class注意点\n 假设 存在 父类 Father\n 子类 Child extends father\n{%codeblock%}\nClass<Child> c=Child.classm\n{%endcodeblock%}\n因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。\n\n## isInstance 和 isInstanceOf\nisInstanceOf和isInstance这两个方法都是用来确定对象的类型。\n但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。\n用法也稍微也不同\n{%codeblock%}\nA a = new A();\na.instanceOf A; //true\na.getClass().instance(A);//true\n{%endcodeblock%}\n值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf\n## 动态代理\n代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。\n在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。\n\n{%codeblock%}\npublic List getList(final List list){\n    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] { List.class}\n                                 new InvocationHanler(){\n                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable{\n                                             if(\"add\".equals(method.getName())){\n                                                 throw new UnsupportdOperationException();\n                                             }else{\n                                                 return method.invoke(list,args);\n                                             }\n                                         }\n                                     }                               );}\n{%endcodeblock%}\n上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。\n例子来自（http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\n## 反射的危害\n事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。\n但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。\n","source":"_posts/RIIT.md","raw":"---\ntitle: 我所理解的java反射\ndate: 2016-04-20 19:24:29\ntags: java reflection\n---\n## 为什么要使用反射\n   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。\n   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。\n\n## Class\n\n一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。\n\n{%codeblock%}\n1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。\n2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查\n{%endcodeblock%}\n值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。\n使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。\n\n 泛型和Class注意点\n 假设 存在 父类 Father\n 子类 Child extends father\n{%codeblock%}\nClass<Child> c=Child.classm\n{%endcodeblock%}\n因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。\n\n## isInstance 和 isInstanceOf\nisInstanceOf和isInstance这两个方法都是用来确定对象的类型。\n但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。\n用法也稍微也不同\n{%codeblock%}\nA a = new A();\na.instanceOf A; //true\na.getClass().instance(A);//true\n{%endcodeblock%}\n值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf\n## 动态代理\n代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。\n在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。\n\n{%codeblock%}\npublic List getList(final List list){\n    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] { List.class}\n                                 new InvocationHanler(){\n                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable{\n                                             if(\"add\".equals(method.getName())){\n                                                 throw new UnsupportdOperationException();\n                                             }else{\n                                                 return method.invoke(list,args);\n                                             }\n                                         }\n                                     }                               );}\n{%endcodeblock%}\n上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。\n例子来自（http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\n## 反射的危害\n事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。\n但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。\n","slug":"RIIT","published":1,"updated":"2016-04-28T01:33:34.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinjmb0nd0000r0ufp0kt0sma","content":"<h2 id=\"为什么要使用反射\"><a href=\"#为什么要使用反射\" class=\"headerlink\" title=\"为什么要使用反射\"></a>为什么要使用反射</h2><p>   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。<br>   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。</p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。</span><br><span class=\"line\">2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查</span><br></pre></td></tr></table></figure>\n<p>值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。<br>使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。</p>\n<p> 泛型和Class注意点<br> 假设 存在 父类 Father<br> 子类 Child extends father<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Child&gt; c=Child.classm</span><br></pre></td></tr></table></figure><br>因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。</p>\n<h2 id=\"isInstance-和-isInstanceOf\"><a href=\"#isInstance-和-isInstanceOf\" class=\"headerlink\" title=\"isInstance 和 isInstanceOf\"></a>isInstance 和 isInstanceOf</h2><p>isInstanceOf和isInstance这两个方法都是用来确定对象的类型。<br>但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。<br>用法也稍微也不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = new A();</span><br><span class=\"line\">a.instanceOf A; //true</span><br><span class=\"line\">a.getClass().instance(A);//true</span><br></pre></td></tr></table></figure><br>值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。<br>在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List getList(final List list)&#123;</span><br><span class=\"line\">    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] &#123; List.class&#125;</span><br><span class=\"line\">                                 new InvocationHanler()&#123;</span><br><span class=\"line\">                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable&#123;</span><br><span class=\"line\">                                             if(&quot;add&quot;.equals(method.getName()))&#123;</span><br><span class=\"line\">                                                 throw new UnsupportdOperationException();</span><br><span class=\"line\">                                             &#125;else&#123;</span><br><span class=\"line\">                                                 return method.invoke(list,args);</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;                               );&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。<br>例子来自（<a href=\"http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）</a></p>\n<h2 id=\"反射的危害\"><a href=\"#反射的危害\" class=\"headerlink\" title=\"反射的危害\"></a>反射的危害</h2><p>事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。<br>但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。</p>\n","excerpt":"","more":"<h2 id=\"为什么要使用反射\"><a href=\"#为什么要使用反射\" class=\"headerlink\" title=\"为什么要使用反射\"></a>为什么要使用反射</h2><p>   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。<br>   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。</p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。</span><br><span class=\"line\">2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查</span><br></pre></td></tr></table></figure>\n<p>值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。<br>使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。</p>\n<p> 泛型和Class注意点<br> 假设 存在 父类 Father<br> 子类 Child extends father<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Child&gt; c=Child.classm</span><br></pre></td></tr></table></figure><br>因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。</p>\n<h2 id=\"isInstance-和-isInstanceOf\"><a href=\"#isInstance-和-isInstanceOf\" class=\"headerlink\" title=\"isInstance 和 isInstanceOf\"></a>isInstance 和 isInstanceOf</h2><p>isInstanceOf和isInstance这两个方法都是用来确定对象的类型。<br>但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。<br>用法也稍微也不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = new A();</span><br><span class=\"line\">a.instanceOf A; //true</span><br><span class=\"line\">a.getClass().instance(A);//true</span><br></pre></td></tr></table></figure><br>值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。<br>在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List getList(final List list)&#123;</span><br><span class=\"line\">    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] &#123; List.class&#125;</span><br><span class=\"line\">                                 new InvocationHanler()&#123;</span><br><span class=\"line\">                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable&#123;</span><br><span class=\"line\">                                             if(&quot;add&quot;.equals(method.getName()))&#123;</span><br><span class=\"line\">                                                 throw new UnsupportdOperationException();</span><br><span class=\"line\">                                             &#125;else&#123;</span><br><span class=\"line\">                                                 return method.invoke(list,args);</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;                               );&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。<br>例子来自（<a href=\"http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\">http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）</a></p>\n<h2 id=\"反射的危害\"><a href=\"#反射的危害\" class=\"headerlink\" title=\"反射的危害\"></a>反射的危害</h2><p>事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。<br>但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。</p>\n"},{"title":"concurrency","date":"2016-04-26T03:27:31.000Z","_content":"## 并发编程\n   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。\n  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。\n  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。\n## java 中的并发\njava是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。\n1、Runnable Thread\n在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。\n在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。\n另外值得注意的一点。\n{%codeblock%}\nMyThread t1  = new MyThread();\nt1.run();//没有用到多线程，相当于直接调用了一个方法\nt1.start();//正确的调用方式\n{%endcodeblock%}\n\n2、后台线程\n我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。\n{%codeblock%}\nt1.setDaemon(true);//设置此线程为后台线程的方法。\n{%endcodeblock%}\n后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。\n## java thread 锁\n众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。\n1、原子操作\n根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。\n    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）\n2、在java中，自增操作不是设计出原子性的\n3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。\n\n2、synchronized 和volatile Lock.class\nvolatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的\nsynchronized\n最常用的锁，通常形式是\nsynchronized function {\n    //代码\n}\n在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁\nsynchronized(this){\n    //代码\n}\n可以锁定代码块\n\nLock.class\n这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。\n\n","source":"_posts/concurrency.md","raw":"---\ntitle: concurrency\ndate: 2016-04-26 11:27:31\ntags: concurrency\n---\n## 并发编程\n   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。\n  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。\n  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。\n## java 中的并发\njava是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。\n1、Runnable Thread\n在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。\n在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。\n另外值得注意的一点。\n{%codeblock%}\nMyThread t1  = new MyThread();\nt1.run();//没有用到多线程，相当于直接调用了一个方法\nt1.start();//正确的调用方式\n{%endcodeblock%}\n\n2、后台线程\n我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。\n{%codeblock%}\nt1.setDaemon(true);//设置此线程为后台线程的方法。\n{%endcodeblock%}\n后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。\n## java thread 锁\n众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。\n1、原子操作\n根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。\n    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）\n2、在java中，自增操作不是设计出原子性的\n3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。\n\n2、synchronized 和volatile Lock.class\nvolatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的\nsynchronized\n最常用的锁，通常形式是\nsynchronized function {\n    //代码\n}\n在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁\nsynchronized(this){\n    //代码\n}\n可以锁定代码块\n\nLock.class\n这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。\n\n","slug":"concurrency","published":1,"updated":"2016-04-29T02:36:08.554Z","_id":"cinjmb0nn0002r0ufptaeauv0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。<br>  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。<br>  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。</p>\n<h2 id=\"java-中的并发\"><a href=\"#java-中的并发\" class=\"headerlink\" title=\"java 中的并发\"></a>java 中的并发</h2><p>java是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。<br>1、Runnable Thread<br>在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。<br>在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。<br>另外值得注意的一点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread t1  = new MyThread();</span><br><span class=\"line\">t1.run();//没有用到多线程，相当于直接调用了一个方法</span><br><span class=\"line\">t1.start();//正确的调用方式</span><br></pre></td></tr></table></figure></p>\n<p>2、后台线程<br>我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1.setDaemon(true);//设置此线程为后台线程的方法。</span><br></pre></td></tr></table></figure><br>后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。</p>\n<h2 id=\"java-thread-锁\"><a href=\"#java-thread-锁\" class=\"headerlink\" title=\"java thread 锁\"></a>java thread 锁</h2><p>众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。<br>1、原子操作<br>根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。<br>    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）<br>2、在java中，自增操作不是设计出原子性的<br>3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。</p>\n<p>2、synchronized 和volatile Lock.class<br>volatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的<br>synchronized<br>最常用的锁，通常形式是<br>synchronized function {<br>    //代码<br>}<br>在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁<br>synchronized(this){<br>    //代码<br>}<br>可以锁定代码块</p>\n<p>Lock.class<br>这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。</p>\n","excerpt":"","more":"<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。<br>  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。<br>  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。</p>\n<h2 id=\"java-中的并发\"><a href=\"#java-中的并发\" class=\"headerlink\" title=\"java 中的并发\"></a>java 中的并发</h2><p>java是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。<br>1、Runnable Thread<br>在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。<br>在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。<br>另外值得注意的一点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread t1  = new MyThread();</span><br><span class=\"line\">t1.run();//没有用到多线程，相当于直接调用了一个方法</span><br><span class=\"line\">t1.start();//正确的调用方式</span><br></pre></td></tr></table></figure></p>\n<p>2、后台线程<br>我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1.setDaemon(true);//设置此线程为后台线程的方法。</span><br></pre></td></tr></table></figure><br>后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。</p>\n<h2 id=\"java-thread-锁\"><a href=\"#java-thread-锁\" class=\"headerlink\" title=\"java thread 锁\"></a>java thread 锁</h2><p>众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。<br>1、原子操作<br>根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。<br>    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）<br>2、在java中，自增操作不是设计出原子性的<br>3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。</p>\n<p>2、synchronized 和volatile Lock.class<br>volatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的<br>synchronized<br>最常用的锁，通常形式是<br>synchronized function {<br>    //代码<br>}<br>在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁<br>synchronized(this){<br>    //代码<br>}<br>可以锁定代码块</p>\n<p>Lock.class<br>这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。</p>\n"},{"title":"generics","date":"2016-04-26T02:51:54.000Z","_content":"## 泛型的作用\njava 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。\n\n\n","source":"_posts/generics.md","raw":"---\ntitle: generics\ndate: 2016-04-26 10:51:54\ntags: generics\n---\n## 泛型的作用\njava 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。\n\n\n","slug":"generics","published":1,"updated":"2016-04-26T03:22:15.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinjmb0nu0004r0uflw4tjz2f","content":"<h2 id=\"泛型的作用\"><a href=\"#泛型的作用\" class=\"headerlink\" title=\"泛型的作用\"></a>泛型的作用</h2><p>java 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。</p>\n","excerpt":"","more":"<h2 id=\"泛型的作用\"><a href=\"#泛型的作用\" class=\"headerlink\" title=\"泛型的作用\"></a>泛型的作用</h2><p>java 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。</p>\n"},{"title":"Hello World","_content":"大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧\n\n## Quick Start\n建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。\n## platform \naliyun centos \n\n因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。\n\n## tools\n\n### nginx\nnginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.\n\nnginx install \n``` bash\n$ sudo yum -y install nginx centos 仓库中安装\n$ sudo systemctl start nginx       启动nginx\n```\n接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。\n\nnginx setting\nnginx 的配置文件在 /etc/nginx/nginx.conf\n``` bash\n$ cd /etc/nginx/\n$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式\n$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来\n$ sudo vim nginx.conf                用vim 打开文件\n```\n{%codeblock nginx.conf%}\nserver{\n\troot //标出根目录文件，就是一下hexo生产的静态文件\n\t\tindex index.php index.html index.htm 设置文件的名字格式\n}\n{%endcodeblock%}\n### hexo\nhexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单\nhexo install\n``` bash\n$ sudo yum -y install node 安装nodejs\n$ sudo yum -y install npm  安装nodejs的npm仓库\n$ npm install -g hexo-cli  安装hexo\n```\nhexo 操作十分简单\n```bash\n$ hexo init 初始化当初文件夹，生成博客工程\n$ hexo g    生成静态文件\n$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件\n```\n更多可以查看 hexo(http://hexo.io)官网\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧\n\n## Quick Start\n建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。\n## platform \naliyun centos \n\n因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。\n\n## tools\n\n### nginx\nnginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.\n\nnginx install \n``` bash\n$ sudo yum -y install nginx centos 仓库中安装\n$ sudo systemctl start nginx       启动nginx\n```\n接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。\n\nnginx setting\nnginx 的配置文件在 /etc/nginx/nginx.conf\n``` bash\n$ cd /etc/nginx/\n$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式\n$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来\n$ sudo vim nginx.conf                用vim 打开文件\n```\n{%codeblock nginx.conf%}\nserver{\n\troot //标出根目录文件，就是一下hexo生产的静态文件\n\t\tindex index.php index.html index.htm 设置文件的名字格式\n}\n{%endcodeblock%}\n### hexo\nhexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单\nhexo install\n``` bash\n$ sudo yum -y install node 安装nodejs\n$ sudo yum -y install npm  安装nodejs的npm仓库\n$ npm install -g hexo-cli  安装hexo\n```\nhexo 操作十分简单\n```bash\n$ hexo init 初始化当初文件夹，生成博客工程\n$ hexo g    生成静态文件\n$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件\n```\n更多可以查看 hexo(http://hexo.io)官网\n","slug":"hello-world","published":1,"date":"2016-04-26T02:22:24.154Z","updated":"2016-04-26T02:22:24.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinjmb0nx0005r0ufnq0rb6rw","content":"<p>大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。</p>\n<h2 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform</h2><p>aliyun centos </p>\n<p>因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。</p>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>nginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.</p>\n<p>nginx install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install nginx centos 仓库中安装</span><br><span class=\"line\">$ sudo systemctl start nginx       启动nginx</span><br></pre></td></tr></table></figure></p>\n<p>接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。</p>\n<p>nginx setting<br>nginx 的配置文件在 /etc/nginx/nginx.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式</span><br><span class=\"line\">$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来</span><br><span class=\"line\">$ sudo vim nginx.conf                用vim 打开文件</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\troot //标出根目录文件，就是一下hexo生产的静态文件</span><br><span class=\"line\">\t\tindex index.php index.html index.htm 设置文件的名字格式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><p>hexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单<br>hexo install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install node 安装nodejs</span><br><span class=\"line\">$ sudo yum -y install npm  安装nodejs的npm仓库</span><br><span class=\"line\">$ npm install -g hexo-cli  安装hexo</span><br></pre></td></tr></table></figure></p>\n<p>hexo 操作十分简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 初始化当初文件夹，生成博客工程</span><br><span class=\"line\">$ hexo g    生成静态文件</span><br><span class=\"line\">$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件</span><br></pre></td></tr></table></figure></p>\n<p>更多可以查看 hexo(<a href=\"http://hexo.io)官网\" target=\"_blank\" rel=\"external\">http://hexo.io)官网</a></p>\n","excerpt":"","more":"<p>大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。</p>\n<h2 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform</h2><p>aliyun centos </p>\n<p>因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。</p>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>nginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.</p>\n<p>nginx install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install nginx centos 仓库中安装</span><br><span class=\"line\">$ sudo systemctl start nginx       启动nginx</span><br></pre></td></tr></table></figure></p>\n<p>接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。</p>\n<p>nginx setting<br>nginx 的配置文件在 /etc/nginx/nginx.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式</span><br><span class=\"line\">$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来</span><br><span class=\"line\">$ sudo vim nginx.conf                用vim 打开文件</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\troot //标出根目录文件，就是一下hexo生产的静态文件</span><br><span class=\"line\">\t\tindex index.php index.html index.htm 设置文件的名字格式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><p>hexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单<br>hexo install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install node 安装nodejs</span><br><span class=\"line\">$ sudo yum -y install npm  安装nodejs的npm仓库</span><br><span class=\"line\">$ npm install -g hexo-cli  安装hexo</span><br></pre></td></tr></table></figure></p>\n<p>hexo 操作十分简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 初始化当初文件夹，生成博客工程</span><br><span class=\"line\">$ hexo g    生成静态文件</span><br><span class=\"line\">$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件</span><br></pre></td></tr></table></figure></p>\n<p>更多可以查看 hexo(<a href=\"http://hexo.io)官网\">http://hexo.io)官网</a></p>\n"},{"title":"String","date":"2016-04-19T09:50:05.000Z","_content":"##  我对java String的理解 \n在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。\n## String的不可变性\n在java设计中，String类型是不可变的。如\n{%codeblock%}\n   String s1 = \"abc\";\n   String s2 = s1.toUpperCase();\n{%endcodeblock%}\n   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。\n\n## String的 + \n大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号\n\n在日常程序编写中，我是经常会编写字符串拼接的程序。如\n String s  = \"I\"+\"love\"+\"CS\";\n 按照String不变性在推测，是不是在生成新的s时，\n 第一步：新生成\"Ilove\"对象\n 第二部：生成\"IloveCS\"对象\n 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。\n\n 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。\n 上述过程，最终实现优化后，差不多如下\n {%codeblock%}\n StringBuilder sb  = new StringBuilder();\n sb.append(\"I\");\n sb.append(\"love\");\n sb.append(\"CS\");\n String s = sb.toString();\n{%endcodeblock%}\n 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。\n\n ## String 存储\n String是一个非常有意思的类。在内存中存储的方式不同\n 当String s1= \"abc\" 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。\n\n {%codeblock%}\n String s2 = \"a\";\n String s3 = \"a\";\n s2 == s3 //  true\n{%endcodeblock%}\n 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）\n\n {%codeblock%}\n String s4 = new String(\"abc\");是生成在堆内存中。\n String s5 = new String(\"abc\");\n s4 == s5 //false\n{%endcodeblock%}\nString s6 = \"abc\" + new String(\"cde\"); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。\n\n\n\n","source":"_posts/我对java-String的理解.md","raw":"---\ntitle: String\ndate: 2016-04-19 17:50:05\ntags: java\n---\n##  我对java String的理解 \n在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。\n## String的不可变性\n在java设计中，String类型是不可变的。如\n{%codeblock%}\n   String s1 = \"abc\";\n   String s2 = s1.toUpperCase();\n{%endcodeblock%}\n   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。\n\n## String的 + \n大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号\n\n在日常程序编写中，我是经常会编写字符串拼接的程序。如\n String s  = \"I\"+\"love\"+\"CS\";\n 按照String不变性在推测，是不是在生成新的s时，\n 第一步：新生成\"Ilove\"对象\n 第二部：生成\"IloveCS\"对象\n 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。\n\n 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。\n 上述过程，最终实现优化后，差不多如下\n {%codeblock%}\n StringBuilder sb  = new StringBuilder();\n sb.append(\"I\");\n sb.append(\"love\");\n sb.append(\"CS\");\n String s = sb.toString();\n{%endcodeblock%}\n 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。\n\n ## String 存储\n String是一个非常有意思的类。在内存中存储的方式不同\n 当String s1= \"abc\" 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。\n\n {%codeblock%}\n String s2 = \"a\";\n String s3 = \"a\";\n s2 == s3 //  true\n{%endcodeblock%}\n 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）\n\n {%codeblock%}\n String s4 = new String(\"abc\");是生成在堆内存中。\n String s5 = new String(\"abc\");\n s4 == s5 //false\n{%endcodeblock%}\nString s6 = \"abc\" + new String(\"cde\"); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。\n\n\n\n","slug":"我对java-String的理解","published":1,"updated":"2016-04-26T02:19:58.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinjmb0o10007r0ufv6a08gsi","content":"<h2 id=\"我对java-String的理解\"><a href=\"#我对java-String的理解\" class=\"headerlink\" title=\"我对java String的理解\"></a>我对java String的理解</h2><p>在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。</p>\n<h2 id=\"String的不可变性\"><a href=\"#String的不可变性\" class=\"headerlink\" title=\"String的不可变性\"></a>String的不可变性</h2><p>在java设计中，String类型是不可变的。如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = s1.toUpperCase();</span><br></pre></td></tr></table></figure><br>   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。</p>\n<h2 id=\"String的\"><a href=\"#String的\" class=\"headerlink\" title=\"String的 +\"></a>String的 +</h2><p>大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号</p>\n<p>在日常程序编写中，我是经常会编写字符串拼接的程序。如<br> String s  = “I”+”love”+”CS”;<br> 按照String不变性在推测，是不是在生成新的s时，<br> 第一步：新生成”Ilove”对象<br> 第二部：生成”IloveCS”对象<br> 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。</p>\n<p> 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。<br> 上述过程，最终实现优化后，差不多如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb  = new StringBuilder();</span><br><span class=\"line\">sb.append(&quot;I&quot;);</span><br><span class=\"line\">sb.append(&quot;love&quot;);</span><br><span class=\"line\">sb.append(&quot;CS&quot;);</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure><br> 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。</p>\n<h2 id=\"String-存储\"><a href=\"#String-存储\" class=\"headerlink\" title=\"String 存储\"></a>String 存储</h2><p> String是一个非常有意思的类。在内存中存储的方式不同<br> 当String s1= “abc” 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;a&quot;;</span><br><span class=\"line\">s2 == s3 //  true</span><br></pre></td></tr></table></figure>\n<p> 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = new String(&quot;abc&quot;);是生成在堆内存中。</span><br><span class=\"line\">String s5 = new String(&quot;abc&quot;);</span><br><span class=\"line\">s4 == s5 //false</span><br></pre></td></tr></table></figure>\n<p>String s6 = “abc” + new String(“cde”); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。</p>\n","excerpt":"","more":"<h2 id=\"我对java-String的理解\"><a href=\"#我对java-String的理解\" class=\"headerlink\" title=\"我对java String的理解\"></a>我对java String的理解</h2><p>在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。</p>\n<h2 id=\"String的不可变性\"><a href=\"#String的不可变性\" class=\"headerlink\" title=\"String的不可变性\"></a>String的不可变性</h2><p>在java设计中，String类型是不可变的。如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = s1.toUpperCase();</span><br></pre></td></tr></table></figure><br>   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。</p>\n<h2 id=\"String的\"><a href=\"#String的\" class=\"headerlink\" title=\"String的 +\"></a>String的 +</h2><p>大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号</p>\n<p>在日常程序编写中，我是经常会编写字符串拼接的程序。如<br> String s  = “I”+”love”+”CS”;<br> 按照String不变性在推测，是不是在生成新的s时，<br> 第一步：新生成”Ilove”对象<br> 第二部：生成”IloveCS”对象<br> 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。</p>\n<p> 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。<br> 上述过程，最终实现优化后，差不多如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb  = new StringBuilder();</span><br><span class=\"line\">sb.append(&quot;I&quot;);</span><br><span class=\"line\">sb.append(&quot;love&quot;);</span><br><span class=\"line\">sb.append(&quot;CS&quot;);</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure><br> 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。</p>\n<h2 id=\"String-存储\"><a href=\"#String-存储\" class=\"headerlink\" title=\"String 存储\"></a>String 存储</h2><p> String是一个非常有意思的类。在内存中存储的方式不同<br> 当String s1= “abc” 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;a&quot;;</span><br><span class=\"line\">s2 == s3 //  true</span><br></pre></td></tr></table></figure>\n<p> 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = new String(&quot;abc&quot;);是生成在堆内存中。</span><br><span class=\"line\">String s5 = new String(&quot;abc&quot;);</span><br><span class=\"line\">s4 == s5 //false</span><br></pre></td></tr></table></figure>\n<p>String s6 = “abc” + new String(“cde”); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cinjmb0nd0000r0ufp0kt0sma","tag_id":"cinjmb0nr0003r0ufv47eavfd","_id":"cinjmb0o30008r0ufbpvb4390"},{"post_id":"cinjmb0nn0002r0ufptaeauv0","tag_id":"cinjmb0o10006r0ufgurrgvg1","_id":"cinjmb0o5000ar0ufkpdiwyqz"},{"post_id":"cinjmb0nu0004r0uflw4tjz2f","tag_id":"cinjmb0o40009r0uflpk2w0mp","_id":"cinjmb0o5000cr0ufp0d3wpxl"},{"post_id":"cinjmb0o10007r0ufv6a08gsi","tag_id":"cinjmb0o5000br0uf54oqk5oh","_id":"cinjmb0o6000dr0ufh1wnoat8"}],"Tag":[{"name":"java reflection","_id":"cinjmb0nr0003r0ufv47eavfd"},{"name":"concurrency","_id":"cinjmb0o10006r0ufgurrgvg1"},{"name":"generics","_id":"cinjmb0o40009r0uflpk2w0mp"},{"name":"java","_id":"cinjmb0o5000br0uf54oqk5oh"}]}}