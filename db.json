{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/w.png","path":"images/w.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-snippet/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/highlight.pack.js","path":"assets/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/tagcanvas.min.js","path":"assets/tagcanvas.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/branding.png","path":"img/branding.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline-clock.gif","path":"img/timeline-clock.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/head-img.jpg","path":"img/head-img.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/reward-wepay.jpg","path":"img/reward-wepay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline.gif","path":"img/timeline.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline-dot.gif","path":"img/timeline-dot.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/valine.min.js","path":"assets/valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"source/images/resume.jpg","path":"images/resume.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/tree.png","path":"images/tree.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hexo-theme-snippet/.gitignore","hash":"966980bf3a75dbcdc09b08664e6084139799b498","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/LICENSE","hash":"c720db99e36a717d9808bf97b736612462e883dd","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/_config.yml","hash":"5125473cf7c54c4259f0f85024b246bdc62abf76","modified":1561854923698},{"_id":"themes/hexo-theme-snippet/.travis.yml","hash":"986f6d528438b861cc531e6eafb7871b28a436a8","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/README.md","hash":"bdd0b48b18fd1b6ff622a40732b81e3cc1a67163","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/_travis.sh","hash":"2ad37ebb33683f71b605997edbc408c70de230c3","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/package.json","hash":"be625298f117d26e92131336289c01cf791b4cdc","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/gulpfile.js","hash":"16aae4664f8077b8974e460c7dbcbda131b433e3","modified":1561775525057},{"_id":"source/_posts/hello-world.md","hash":"98b8a7bf20f28d7425660b46ddc7e01687a2f5e6","modified":1561809054970},{"_id":"source/_posts/generics.md","hash":"1287cf2fe6083805bb1701e5e9aa4de838f49415","modified":1561420859935},{"_id":"source/_posts/concurrency.md","hash":"74235a181d6911cdfe47440a0fe8d3990c735cdf","modified":1561420859935},{"_id":"source/_posts/RIIT.md","hash":"e81a99b0948ed52f3be6eef0261de7b993470854","modified":1561420859934},{"_id":"source/about/index.md","hash":"dc8311d5ab098e61a3539570213c0191232ab866","modified":1561855086592},{"_id":"source/about/index.md~","hash":"9d1f70485b989ca420810aaaec93d11db4d7680f","modified":1561420859936},{"_id":"source/_posts/tree.md","hash":"8eda58f5c11291ed6dc2d3aef88e920b44d8ee6a","modified":1561420859936},{"_id":"source/_posts/我对java-String的理解.md","hash":"93863a8e7432f36c80379732f8b76649b791bd42","modified":1561420859936},{"_id":"source/about-about-md/index.md","hash":"c9ba7105c4dd78c77f039809fcd2dfb991138dd4","modified":1561854400006},{"_id":"source/images/w.png","hash":"62aa7b4296b6ff45b08bfe5cf5cfaa2043d74ad2","modified":1561420859959},{"_id":"themes/hexo-theme-snippet/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561775525053},{"_id":"source/tafs/index.md","hash":"a92115c1fa6d24caaa8b4a809bf8ca946adf6552","modified":1561420859959},{"_id":"source/tags/index.md","hash":"bd27675caa2e7c95ffb80e5d153f7209189d1863","modified":1561420859959},{"_id":"themes/hexo-theme-snippet/.git/config","hash":"f165390f3c94ddd720ad7231e1a1846332b7699b","modified":1561775525054},{"_id":"themes/hexo-theme-snippet/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE.md","hash":"e90f313849ccea4f9fe86f7d3611dfaa6a7d3e8b","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/.git/packed-refs","hash":"147f505579b61e00029eeafb66f7f115f7fdec09","modified":1561775525049},{"_id":"themes/hexo-theme-snippet/.git/index","hash":"cccd24064d2afda0d9eaf2e12ce0124958eb61b8","modified":1561778772462},{"_id":"themes/hexo-theme-snippet/languages/ja.yml","hash":"fcafdb03d5e000c225a664d65f38a75c7efdef03","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/languages/zh-CN.yml","hash":"4ebacd2028454a5b9642a22c19d3e8c3078b3a0a","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/languages/default.yml","hash":"358313b8a4a48bd32c7d58fc9ef3a4ebe395bf8d","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/languages/zh-TW.yml","hash":"a0bd8ba3e9ad19116e072983cfefd1aabe39d2cd","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/archive.ejs","hash":"bbd99d08132f9ca87e5b17cf642384dc1673f579","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/category.ejs","hash":"ebd05ceb75be73e84ddf085ccfdb24c07162d0fa","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/layout.ejs","hash":"c986efe07c070e0870b89181cc47010b118e2d04","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/index.ejs","hash":"4b17eb2082d177b0cb85f04afadcc604f4073d30","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/scripts/helper.js","hash":"836d369cf95ac51de957e09d396e6a8be1e84cf6","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/scripts/process.js","hash":"c2f0571899a6dd38bd944aaf47e21fc650f7d52e","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/post.ejs","hash":"d0aa6f0fda520815307d2adc2aacaf5314919d8f","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/layout/tag.ejs","hash":"9b42656e75c58e7145e52408b51f017f6b6d9464","modified":1561775525058},{"_id":"source/_posts/oc","hash":"24bca50ac752acf9a145b5359c65e4313fba1a87","modified":1561420859936},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE/feature_request.md","hash":"ca7ec6dc303459058d3117f33878beec538d3023","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8808d24b20e4969c1b687d17cf832e8fac147cc8","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/.git/logs/HEAD","hash":"8a5460b7bb912dccd3749ab599d22b65a74b0ea0","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561775522396},{"_id":"themes/hexo-theme-snippet/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1561775522397},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1561775522396},{"_id":"themes/hexo-theme-snippet/layout/_partial/archive.ejs","hash":"cc21d71c87829f90686a3f6e5ac4d8665c871c25","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/article-meta.ejs","hash":"40f3cc7d88f72f58d320457a0e939e00605fcb1d","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/copyright.ejs","hash":"4c8903c3554aa50259a7581f1a9b7ffca9b91a97","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/footer.ejs","hash":"4a5b6fa1520442ac4edc2ec3d575a676b6717854","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/busuanzi.ejs","hash":"2c26222dc1c8da66135241fdc84d16ba66ae285c","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/article.ejs","hash":"ecc6775b64c4b87a62fae4f8a2545105e40e7dfe","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/gallery.ejs","hash":"1b6b7859f395e10a3ecaa900de2d1312dc140def","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/head.ejs","hash":"3e796175cead54d6adad964996a3c079f5e3605b","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/header.ejs","hash":"b08447c9201c196d132691f1a16c152e82cdcef4","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/nav.ejs","hash":"7fa65a2162a748f049fb910b5b0e46a5bcf57b3b","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/reward.ejs","hash":"8ea91bdf01c946c76f4bd671768c8b930c7de446","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/script.ejs","hash":"0ecdc42c6c1c2474d9e306de39323f089dddf7af","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/sidebar.ejs","hash":"381b7af719c1ab3a94280309926c1205ce7b93a5","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/pagination.ejs","hash":"2ec88a22fd29e7cc97ca2a508eee7d168e338969","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/toc.ejs","hash":"7d86def87d0e7b7ab15400a23b0796f0da430e60","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/baidu_sitemap.ejs","hash":"dabeccfd4860dac2f6b883616f616c4c55fb22ba","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/archive.ejs","hash":"ea6596d993ed1b74bd03eee06ab480931b8c2d9e","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/category.ejs","hash":"1c6881cd5b6b034ddecda6c85a3337d17a03e9ff","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/friends.ejs","hash":"43b0404d608db1a237b3cf17ec8df7b2d24f9533","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/notification.ejs","hash":"78eca9de4eec7c638c7b16863fb90e7182f7d80b","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/search.ejs","hash":"dfbf723051f71099502c58a237bc484cebd5157d","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/social.ejs","hash":"f97313cdc1b495f7602e023b2ade5630acc4b667","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/tagcloud.ejs","hash":"21746717296515c5b45a8fd5ef302ef8a9470bb2","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/assets/highlight.pack.js","hash":"f39840759ec9afe56ec1ca30579d1f1c9d1f6026","modified":1561775525059},{"_id":"themes/hexo-theme-snippet/source/assets/tagcanvas.min.js","hash":"a14280f4e924428ac0cdbac7635a7279cab1b6bf","modified":1561775525059},{"_id":"themes/hexo-theme-snippet/source/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/style.css","hash":"c9f166bbe87845aa6fa3a3f1ee6f3adb28dae055","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/source/img/avatar.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/img/timeline-clock.gif","hash":"2bec1bf5efd948ab2e5942b6da8164faa41b62b2","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/img/reward-wepay.jpg","hash":"2a56391f2b6282b49e724b72bf610b0dabf53742","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/js/app.js","hash":"eca509fc5b45dcd1a0007c62f740529ca31a122f","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/assets/valine.min.js","hash":"d9d4a8f81f288b77b3d0a3866d004e2b5eb30038","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/js/search.js","hash":"7538c8cf0b4341cc281eca153c9c89cf25d29502","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561775525067},{"_id":"themes/hexo-theme-snippet/source/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/.git/refs/heads/master","hash":"42721fddb90b6023d629c3f47a662861f5875f85","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/style.ejs","hash":"ece8b1bb0f550ddb0e7ac179de54a8e5f06f49aa","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/seo.ejs","hash":"8cf5d4347c69c0999d756e06374039572c9ed975","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/IE.ejs","hash":"567494a97ba2db7bb452294a9980b4d63b399ef0","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/title.ejs","hash":"1482f56c44221cbc0d28ba06e377f4b55cdaacc2","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/cnzz.ejs","hash":"8bfc514b178fafd81cc8181880afc5c9cbee02dc","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/google.ejs","hash":"91844d4521f97517ea9f169ee85b18c9d0d8cf17","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/baidu.ejs","hash":"eb4a75fb5ba9237d93430e727165d98ccda75a02","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/index.ejs","hash":"6315abe9c31f4c4de719fa3cbfa2b1c6f294b0de","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/tencent.ejs","hash":"10b91084cda9067d037a5f31e48d4edcbaa0c751","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/changyan.ejs","hash":"202c94162ac2eeb0c93c8d2667c82b8705de6390","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/disqus.ejs","hash":"7b5e05154be0408be110893439bfa33e262245de","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/gitment.ejs","hash":"be5c261ae8a769747704a228aa35758120b814e1","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/gitalk.ejs","hash":"c556003dde298f4e8d3a75974996207876e83fa9","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/index.ejs","hash":"99dc8370fabb5302cc9810041e453302ecd98e82","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/livere.ejs","hash":"6333308ba24ae6f2a3e73f4cdc1b42e024d19910","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/css/less/_mixins.less","hash":"e89dc55772b5ae6bfd4cac3b5c32bf9ce73ac805","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/less/_highlight.less","hash":"c799cfa32c323c33a09569d326786874026fd1ef","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/less/_reward.less","hash":"100caed190893351a1ca7ed8e72bad57695d5f19","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/less/_scrollbar.less","hash":"596ee6ada077f94a05d7c0168dddb20be16b85da","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/uyan.ejs","hash":"2c2abe17f4f5c5ba1a9aaa948ef0a88d99f653f8","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/valine.ejs","hash":"d339116cf24e76e7bc9f28e8a0a7c844ede2e506","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561775525063},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561775525067},{"_id":"themes/hexo-theme-snippet/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561775525062},{"_id":"source/images/resume.jpg","hash":"3d17e637011b40dd2bb34f3f18a632e08af6f369","modified":1561420859938},{"_id":"themes/hexo-theme-snippet/source/css/less/_variable.less","hash":"1d81728d61de486a7a746beb19275b2b4b65e304","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/source/css/less/_timeline.less","hash":"0bb3cef8b58621455d023c30d81fae204200d3bb","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/source/css/less/_style.less","hash":"b4ec6a02dacaa783a3583a76007592149f1379dd","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/.git/objects/pack/pack-0a793e03b33092ef67a6365bee4e828c6d24d450.idx","hash":"fdca77795ca53438b7d33b5b179d496d78b3a773","modified":1561775525019},{"_id":"themes/hexo-theme-snippet/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/.git/logs/refs/heads/master","hash":"8a5460b7bb912dccd3749ab599d22b65a74b0ea0","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1561775525066},{"_id":"themes/hexo-theme-snippet/.git/logs/refs/remotes/origin/HEAD","hash":"8a5460b7bb912dccd3749ab599d22b65a74b0ea0","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/.git/objects/pack/pack-0a793e03b33092ef67a6365bee4e828c6d24d450.pack","hash":"46d6070cdd78e91b696068a5801f9550f9a6f236","modified":1561775525019},{"_id":"source/images/tree.png","hash":"4e16296aef6ea2dc4b22a8763f9f20d8fd56bbb8","modified":1561420859959},{"_id":"public/content.json","hash":"51123c6e6ed69a05b7d8ce9b1ef52ad06b5825ad","modified":1561855119557},{"_id":"public/tafs/index.html","hash":"a1aa9e50eb062bd68b425e781e12bab520fc6a1b","modified":1561854933019},{"_id":"public/tags/index.html","hash":"d271843cb7d7c6f18fbc47a9208164799234fc76","modified":1561854933019},{"_id":"public/2016/04/26/generics/index.html","hash":"877624aab8702551635750719e6647fcb781de27","modified":1561854933019},{"_id":"public/2016/04/19/我对java-String的理解/index.html","hash":"96e520da32248797281dc76d2d56c0d8c4799e89","modified":1561854933020},{"_id":"public/2016/03/26/hello-world/index.html","hash":"2c7cf5c429ad03d92ddcff6fadb44085ed2b5395","modified":1561854933020},{"_id":"public/archives/index.html","hash":"2930c3cce92438a63a74d418124284412039d137","modified":1561854933020},{"_id":"public/archives/2016/index.html","hash":"0741622f7449d75d5bfb9d2c247a2f4f236b3bfa","modified":1561854933020},{"_id":"public/archives/2016/03/index.html","hash":"932eb0c2cff7561c8aa901ac0dd37a923ea8259a","modified":1561854933020},{"_id":"public/archives/2016/04/index.html","hash":"48ebf14a005b9b91ed7b2bfcdb1ba55440bc76b4","modified":1561854933020},{"_id":"public/archives/2016/05/index.html","hash":"4dfba7ddf021be2f32309568351ab3e39c88f480","modified":1561854933020},{"_id":"public/tags/generics/index.html","hash":"a1826f1c7b583a14aa5fe80d9d2a584585f95c1f","modified":1561854933020},{"_id":"public/tags/concurrency/index.html","hash":"ac0a6778a7bbfaefda743976fd613c842b60cb4c","modified":1561854933020},{"_id":"public/tags/java-reflection/index.html","hash":"03e214684227b7edd8a95a853db9ab9d6885ed65","modified":1561854933020},{"_id":"public/tags/data-struct/index.html","hash":"8f15e713e4994f6e6ebcccf5a92e02016d6e07a4","modified":1561854933020},{"_id":"public/tags/java/index.html","hash":"04a2fa62db41a270b0d8aa4e257bafc2bb42036e","modified":1561854933020},{"_id":"public/2016/05/31/tree/index.html","hash":"0bfc4afce1a319edb66ba320882918ab12a3b3af","modified":1561854933020},{"_id":"public/2016/04/26/concurrency/index.html","hash":"dc866850e72ead40e735f62fe7b4f12c01e7f511","modified":1561854933020},{"_id":"public/2016/04/20/RIIT/index.html","hash":"ebbf0644937e1a355b28a1517ca70637ce9597b9","modified":1561854933021},{"_id":"public/index.html","hash":"ff626dffbc1af64daef6ef764a3bd75a9912d454","modified":1561854933021},{"_id":"public/about/index.html","hash":"8de82191f34862dc1f45a513428f01db9b04bfbf","modified":1561855119819},{"_id":"public/about-about-md/index.html","hash":"4e6b37dfbe7c5bcb9c539983812cd8c9f838136e","modified":1561854933019},{"_id":"public/images/w.png","hash":"62aa7b4296b6ff45b08bfe5cf5cfaa2043d74ad2","modified":1561854883510},{"_id":"public/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1561854883513},{"_id":"public/img/avatar.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1561854883513},{"_id":"public/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1561854883513},{"_id":"public/img/timeline-clock.gif","hash":"2bec1bf5efd948ab2e5942b6da8164faa41b62b2","modified":1561854883513},{"_id":"public/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1561854883513},{"_id":"public/img/reward-wepay.jpg","hash":"2a56391f2b6282b49e724b72bf610b0dabf53742","modified":1561854883513},{"_id":"public/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1561854883513},{"_id":"public/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1561854883513},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561854883521},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561854883525},{"_id":"public/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1561854883525},{"_id":"public/assets/highlight.pack.js","hash":"f39840759ec9afe56ec1ca30579d1f1c9d1f6026","modified":1561854883529},{"_id":"public/js/app.js","hash":"eca509fc5b45dcd1a0007c62f740529ca31a122f","modified":1561854883529},{"_id":"public/js/search.js","hash":"7538c8cf0b4341cc281eca153c9c89cf25d29502","modified":1561854883529},{"_id":"public/assets/tagcanvas.min.js","hash":"a14280f4e924428ac0cdbac7635a7279cab1b6bf","modified":1561854883530},{"_id":"public/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1561854883530},{"_id":"public/css/style.css","hash":"c9f166bbe87845aa6fa3a3f1ee6f3adb28dae055","modified":1561854883530},{"_id":"public/assets/valine.min.js","hash":"d9d4a8f81f288b77b3d0a3866d004e2b5eb30038","modified":1561854883530},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1561854883530},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561854883530},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561854883530},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561854883530},{"_id":"public/images/resume.jpg","hash":"3d17e637011b40dd2bb34f3f18a632e08af6f369","modified":1561854883541},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1561854883546},{"_id":"public/images/tree.png","hash":"4e16296aef6ea2dc4b22a8763f9f20d8fd56bbb8","modified":1561854883561}],"Category":[],"Data":[],"Page":[{"title":"关于我","date":"2019-06-30T00:26:52.000Z","_content":"### 姓名： liangsj\n\n### mail ：llsj123@163.com\n### 经历：\n- 2010-2014 天津大学\n- 2014-1017 中国矿业大学\n- 2019-      百度\n### 技术栈\n1. android\n2. php\n3. golang\n### 简述\n1.  对计算机充满热爱，喜欢探索自己的未知的领域\n2.  认可自己的职业，希望成为一名出色的工程师\n3.  希望成为一位有趣的人\n4.  希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-06-30 08:26:52\n---\n### 姓名： liangsj\n\n### mail ：llsj123@163.com\n### 经历：\n- 2010-2014 天津大学\n- 2014-1017 中国矿业大学\n- 2019-      百度\n### 技术栈\n1. android\n2. php\n3. golang\n### 简述\n1.  对计算机充满热爱，喜欢探索自己的未知的领域\n2.  认可自己的职业，希望成为一名出色的工程师\n3.  希望成为一位有趣的人\n4.  希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点\n\n","updated":"2019-06-30T00:38:06.592Z","path":"about/index.html","_id":"cjxi82kc30001wk00ruy29yrv","comments":1,"layout":"page","content":"<h3 id=\"姓名：-liangsj\"><a href=\"#姓名：-liangsj\" class=\"headerlink\" title=\"姓名： liangsj\"></a>姓名： liangsj</h3><h3 id=\"mail-：llsj123-163-com\"><a href=\"#mail-：llsj123-163-com\" class=\"headerlink\" title=\"mail ：llsj123@163.com\"></a>mail ：llsj123@163.com</h3><h3 id=\"经历：\"><a href=\"#经历：\" class=\"headerlink\" title=\"经历：\"></a>经历：</h3><ul>\n<li>2010-2014 天津大学</li>\n<li>2014-1017 中国矿业大学</li>\n<li>2019-      百度<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3></li>\n</ul>\n<ol>\n<li>android</li>\n<li>php</li>\n<li>golang<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3></li>\n<li>对计算机充满热爱，喜欢探索自己的未知的领域</li>\n<li>认可自己的职业，希望成为一名出色的工程师</li>\n<li>希望成为一位有趣的人</li>\n<li>希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"姓名：-liangsj\"><a href=\"#姓名：-liangsj\" class=\"headerlink\" title=\"姓名： liangsj\"></a>姓名： liangsj</h3><h3 id=\"mail-：llsj123-163-com\"><a href=\"#mail-：llsj123-163-com\" class=\"headerlink\" title=\"mail ：llsj123@163.com\"></a>mail ：llsj123@163.com</h3><h3 id=\"经历：\"><a href=\"#经历：\" class=\"headerlink\" title=\"经历：\"></a>经历：</h3><ul>\n<li>2010-2014 天津大学</li>\n<li>2014-1017 中国矿业大学</li>\n<li>2019-      百度<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3></li>\n</ul>\n<ol>\n<li>android</li>\n<li>php</li>\n<li>golang<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3></li>\n<li>对计算机充满热爱，喜欢探索自己的未知的领域</li>\n<li>认可自己的职业，希望成为一名出色的工程师</li>\n<li>希望成为一位有趣的人</li>\n<li>希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点</li>\n</ol>\n"},{"title":"about/about.md","date":"2019-06-30T00:26:39.000Z","_content":"","source":"about-about-md/index.md","raw":"---\ntitle: about/about.md\ndate: 2019-06-30 08:26:39\n---\n","updated":"2019-06-30T00:26:40.006Z","path":"about-about-md/index.html","comments":1,"layout":"page","_id":"cjxi82kc90003wk00mny04ky2","content":"","excerpt":"","more":""},{"title":"tafs","date":"2016-04-14T02:42:52.000Z","_content":"","source":"tafs/index.md","raw":"---\ntitle: tafs\ndate: 2016-04-14 10:42:52\n---\n","updated":"2019-06-25T00:00:59.959Z","path":"tafs/index.html","comments":1,"layout":"page","_id":"cjxi82kcj0005wk00zdud9xjo","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-04-14T02:42:57.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-14 10:42:57\n---\n","updated":"2019-06-25T00:00:59.959Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjxi82kd20008wk00j84tvwt5","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2016-03-26T03:27:31.000Z","_content":"大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧\n\n## Quick Start\n建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。\n## platform \naliyun centos \n\n因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。\n\n## tools\n\n### nginx\nnginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.\n\nnginx install \n``` bash\n$ sudo yum -y install nginx centos 仓库中安装\n$ sudo systemctl start nginx       启动nginx\n```\n接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。\n\nnginx setting\nnginx 的配置文件在 /etc/nginx/nginx.conf\n``` bash\n$ cd /etc/nginx/\n$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式\n$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来\n$ sudo vim nginx.conf                用vim 打开文件\n```\n{%codeblock nginx.conf%}\nserver{\n\troot //标出根目录文件，就是一下hexo生产的静态文件\n\t\tindex index.php index.html index.htm 设置文件的名字格式\n}\n{%endcodeblock%}\n### hexo\nhexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单\nhexo install\n``` bash\n$ sudo yum -y install node 安装nodejs\n$ sudo yum -y install npm  安装nodejs的npm仓库\n$ npm install -g hexo-cli  安装hexo\n```\nhexo 操作十分简单\n```bash\n$ hexo init 初始化当初文件夹，生成博客工程\n$ hexo g    生成静态文件\n$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件\n```\n更多可以查看 hexo(http://hexo.io)官网\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-03-26 11:27:31\n---\n大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧\n\n## Quick Start\n建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。\n## platform \naliyun centos \n\n因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。\n\n## tools\n\n### nginx\nnginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.\n\nnginx install \n``` bash\n$ sudo yum -y install nginx centos 仓库中安装\n$ sudo systemctl start nginx       启动nginx\n```\n接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。\n\nnginx setting\nnginx 的配置文件在 /etc/nginx/nginx.conf\n``` bash\n$ cd /etc/nginx/\n$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式\n$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来\n$ sudo vim nginx.conf                用vim 打开文件\n```\n{%codeblock nginx.conf%}\nserver{\n\troot //标出根目录文件，就是一下hexo生产的静态文件\n\t\tindex index.php index.html index.htm 设置文件的名字格式\n}\n{%endcodeblock%}\n### hexo\nhexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单\nhexo install\n``` bash\n$ sudo yum -y install node 安装nodejs\n$ sudo yum -y install npm  安装nodejs的npm仓库\n$ npm install -g hexo-cli  安装hexo\n```\nhexo 操作十分简单\n```bash\n$ hexo init 初始化当初文件夹，生成博客工程\n$ hexo g    生成静态文件\n$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件\n```\n更多可以查看 hexo(http://hexo.io)官网\n","slug":"hello-world","published":1,"updated":"2019-06-29T11:50:54.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kbv0000wk00zsp0jr8h","content":"<p>大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。</p>\n<h2 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform</h2><p>aliyun centos </p>\n<p>因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。</p>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>nginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.</p>\n<p>nginx install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install nginx centos 仓库中安装</span><br><span class=\"line\">$ sudo systemctl start nginx       启动nginx</span><br></pre></td></tr></table></figure></p>\n<p>接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。</p>\n<p>nginx setting<br>nginx 的配置文件在 /etc/nginx/nginx.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式</span><br><span class=\"line\">$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来</span><br><span class=\"line\">$ sudo vim nginx.conf                用vim 打开文件</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\troot //标出根目录文件，就是一下hexo生产的静态文件</span><br><span class=\"line\">\t\tindex index.php index.html index.htm 设置文件的名字格式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><p>hexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单<br>hexo install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install node 安装nodejs</span><br><span class=\"line\">$ sudo yum -y install npm  安装nodejs的npm仓库</span><br><span class=\"line\">$ npm install -g hexo-cli  安装hexo</span><br></pre></td></tr></table></figure></p>\n<p>hexo 操作十分简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 初始化当初文件夹，生成博客工程</span><br><span class=\"line\">$ hexo g    生成静态文件</span><br><span class=\"line\">$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件</span><br></pre></td></tr></table></figure></p>\n<p>更多可以查看 hexo(<a href=\"http://hexo.io)官网\" target=\"_blank\" rel=\"external\">http://hexo.io)官网</a></p>\n","excerpt":"","more":"<p>大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。</p>\n<h2 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform</h2><p>aliyun centos </p>\n<p>因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。</p>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>nginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.</p>\n<p>nginx install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install nginx centos 仓库中安装</span><br><span class=\"line\">$ sudo systemctl start nginx       启动nginx</span><br></pre></td></tr></table></figure></p>\n<p>接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。</p>\n<p>nginx setting<br>nginx 的配置文件在 /etc/nginx/nginx.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式</span><br><span class=\"line\">$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来</span><br><span class=\"line\">$ sudo vim nginx.conf                用vim 打开文件</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\troot //标出根目录文件，就是一下hexo生产的静态文件</span><br><span class=\"line\">\t\tindex index.php index.html index.htm 设置文件的名字格式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><p>hexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单<br>hexo install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install node 安装nodejs</span><br><span class=\"line\">$ sudo yum -y install npm  安装nodejs的npm仓库</span><br><span class=\"line\">$ npm install -g hexo-cli  安装hexo</span><br></pre></td></tr></table></figure></p>\n<p>hexo 操作十分简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 初始化当初文件夹，生成博客工程</span><br><span class=\"line\">$ hexo g    生成静态文件</span><br><span class=\"line\">$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件</span><br></pre></td></tr></table></figure></p>\n<p>更多可以查看 hexo(<a href=\"http://hexo.io)官网\">http://hexo.io)官网</a></p>\n"},{"title":"generics","date":"2016-04-26T02:51:54.000Z","_content":"## 泛型的作用\njava 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。\n\n\n","source":"_posts/generics.md","raw":"---\ntitle: generics\ndate: 2016-04-26 10:51:54\ntags: generics\n---\n## 泛型的作用\njava 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。\n\n\n","slug":"generics","published":1,"updated":"2019-06-25T00:00:59.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kc60002wk00imhia65a","content":"<h2 id=\"泛型的作用\"><a href=\"#泛型的作用\" class=\"headerlink\" title=\"泛型的作用\"></a>泛型的作用</h2><p>java 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。</p>\n","excerpt":"","more":"<h2 id=\"泛型的作用\"><a href=\"#泛型的作用\" class=\"headerlink\" title=\"泛型的作用\"></a>泛型的作用</h2><p>java 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。</p>\n"},{"title":"concurrency","date":"2016-04-26T03:27:31.000Z","_content":"## 并发编程\n   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。\n  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。\n  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。\n## java 中的并发\njava是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。\n1、Runnable Thread\n在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。\n在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。\n另外值得注意的一点。\n\n{%codeblock%}\nMyThread t1  = new MyThread();\nt1.run();//没有用到多线程，相当于直接调用了一个方法\nt1.start();//正确的调用方式\n{%endcodeblock%}\n\n在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。\n\n\n2、后台线程\n我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。\n{%codeblock%}\nt1.setDaemon(true);//设置此线程为后台线程的方法。\n{%endcodeblock%}\n后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。\n## java thread 锁\n众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。\n1、原子操作\n根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。\n    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）\n2、在java中，自增操作不是设计出原子性的\n3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。\n\n2、synchronized 和volatile Lock.class\nvolatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的\nsynchronized\n最常用的锁，通常形式是\nsynchronized function {\n    //代码\n}\n在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁\nsynchronized(this){\n    //代码\n}\n可以锁定代码块\n\nLock.class\n这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。\n\nwait() notify()\n从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。\n{%codeblock%}\nsynchronized{\n    wait();\n}\n\nsynchronized{\n    notify();\n}\n{%endcodeblock%}\n当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).\n才能继续运行剩余的代码块。\n值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。\n\n## 线程中的异常\njava异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。\n每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。\n\n## 新类库中的构件\n我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。\n   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in java>中的总结。\n\nCountDownLatch\n它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。\n它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。\n\nCyclicBarrier\n和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）\n\nSemaphore\n正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。\n\nExchanger\n从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。\n{% img /images/w.png%}\n\n乐观锁\n在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。\n\n\n## android中的线程解决方案\n在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，\n包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。\n具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。\n","source":"_posts/concurrency.md","raw":"---\ntitle: concurrency\ndate: 2016-04-26 11:27:31\ntags: concurrency\n---\n## 并发编程\n   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。\n  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。\n  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。\n## java 中的并发\njava是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。\n1、Runnable Thread\n在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。\n在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。\n另外值得注意的一点。\n\n{%codeblock%}\nMyThread t1  = new MyThread();\nt1.run();//没有用到多线程，相当于直接调用了一个方法\nt1.start();//正确的调用方式\n{%endcodeblock%}\n\n在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。\n\n\n2、后台线程\n我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。\n{%codeblock%}\nt1.setDaemon(true);//设置此线程为后台线程的方法。\n{%endcodeblock%}\n后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。\n## java thread 锁\n众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。\n1、原子操作\n根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。\n    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）\n2、在java中，自增操作不是设计出原子性的\n3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。\n\n2、synchronized 和volatile Lock.class\nvolatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的\nsynchronized\n最常用的锁，通常形式是\nsynchronized function {\n    //代码\n}\n在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁\nsynchronized(this){\n    //代码\n}\n可以锁定代码块\n\nLock.class\n这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。\n\nwait() notify()\n从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。\n{%codeblock%}\nsynchronized{\n    wait();\n}\n\nsynchronized{\n    notify();\n}\n{%endcodeblock%}\n当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).\n才能继续运行剩余的代码块。\n值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。\n\n## 线程中的异常\njava异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。\n每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。\n\n## 新类库中的构件\n我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。\n   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in java>中的总结。\n\nCountDownLatch\n它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。\n它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。\n\nCyclicBarrier\n和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）\n\nSemaphore\n正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。\n\nExchanger\n从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。\n{% img /images/w.png%}\n\n乐观锁\n在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。\n\n\n## android中的线程解决方案\n在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，\n包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。\n具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。\n","slug":"concurrency","published":1,"updated":"2019-06-25T00:00:59.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kcf0004wk00mb22yp5l","content":"<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。<br>  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。<br>  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。</p>\n<h2 id=\"java-中的并发\"><a href=\"#java-中的并发\" class=\"headerlink\" title=\"java 中的并发\"></a>java 中的并发</h2><p>java是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。<br>1、Runnable Thread<br>在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。<br>在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。<br>另外值得注意的一点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread t1  = new MyThread();</span><br><span class=\"line\">t1.run();//没有用到多线程，相当于直接调用了一个方法</span><br><span class=\"line\">t1.start();//正确的调用方式</span><br></pre></td></tr></table></figure>\n<p>在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。</p>\n<p>2、后台线程<br>我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1.setDaemon(true);//设置此线程为后台线程的方法。</span><br></pre></td></tr></table></figure><br>后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。</p>\n<h2 id=\"java-thread-锁\"><a href=\"#java-thread-锁\" class=\"headerlink\" title=\"java thread 锁\"></a>java thread 锁</h2><p>众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。<br>1、原子操作<br>根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。<br>    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）<br>2、在java中，自增操作不是设计出原子性的<br>3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。</p>\n<p>2、synchronized 和volatile Lock.class<br>volatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的<br>synchronized<br>最常用的锁，通常形式是<br>synchronized function {<br>    //代码<br>}<br>在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁<br>synchronized(this){<br>    //代码<br>}<br>可以锁定代码块</p>\n<p>Lock.class<br>这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。</p>\n<p>wait() notify()<br>从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    wait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    notify();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).<br>才能继续运行剩余的代码块。<br>值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。</p>\n<h2 id=\"线程中的异常\"><a href=\"#线程中的异常\" class=\"headerlink\" title=\"线程中的异常\"></a>线程中的异常</h2><p>java异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。<br>每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。</p>\n<h2 id=\"新类库中的构件\"><a href=\"#新类库中的构件\" class=\"headerlink\" title=\"新类库中的构件\"></a>新类库中的构件</h2><p>我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。<br>   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in=\"\" java=\"\">中的总结。</think></p>\n<p>CountDownLatch<br>它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。<br>它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。</p>\n<p>CyclicBarrier<br>和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）</p>\n<p>Semaphore<br>正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。</p>\n<p>Exchanger<br>从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。<br><img src=\"/images/w.png\"></p>\n<p>乐观锁<br>在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。</p>\n<h2 id=\"android中的线程解决方案\"><a href=\"#android中的线程解决方案\" class=\"headerlink\" title=\"android中的线程解决方案\"></a>android中的线程解决方案</h2><p>在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，<br>包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。<br>具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。</p>\n","excerpt":"","more":"<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。<br>  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。<br>  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。</p>\n<h2 id=\"java-中的并发\"><a href=\"#java-中的并发\" class=\"headerlink\" title=\"java 中的并发\"></a>java 中的并发</h2><p>java是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。<br>1、Runnable Thread<br>在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。<br>在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。<br>另外值得注意的一点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread t1  = new MyThread();</span><br><span class=\"line\">t1.run();//没有用到多线程，相当于直接调用了一个方法</span><br><span class=\"line\">t1.start();//正确的调用方式</span><br></pre></td></tr></table></figure>\n<p>在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。</p>\n<p>2、后台线程<br>我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1.setDaemon(true);//设置此线程为后台线程的方法。</span><br></pre></td></tr></table></figure><br>后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。</p>\n<h2 id=\"java-thread-锁\"><a href=\"#java-thread-锁\" class=\"headerlink\" title=\"java thread 锁\"></a>java thread 锁</h2><p>众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。<br>1、原子操作<br>根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。<br>    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）<br>2、在java中，自增操作不是设计出原子性的<br>3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。</p>\n<p>2、synchronized 和volatile Lock.class<br>volatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的<br>synchronized<br>最常用的锁，通常形式是<br>synchronized function {<br>    //代码<br>}<br>在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁<br>synchronized(this){<br>    //代码<br>}<br>可以锁定代码块</p>\n<p>Lock.class<br>这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。</p>\n<p>wait() notify()<br>从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    wait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    notify();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).<br>才能继续运行剩余的代码块。<br>值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。</p>\n<h2 id=\"线程中的异常\"><a href=\"#线程中的异常\" class=\"headerlink\" title=\"线程中的异常\"></a>线程中的异常</h2><p>java异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。<br>每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。</p>\n<h2 id=\"新类库中的构件\"><a href=\"#新类库中的构件\" class=\"headerlink\" title=\"新类库中的构件\"></a>新类库中的构件</h2><p>我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。<br>   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in java>中的总结。</p>\n<p>CountDownLatch<br>它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。<br>它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。</p>\n<p>CyclicBarrier<br>和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）</p>\n<p>Semaphore<br>正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。</p>\n<p>Exchanger<br>从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。<br><img src=\"/images/w.png\"></p>\n<p>乐观锁<br>在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。</p>\n<h2 id=\"android中的线程解决方案\"><a href=\"#android中的线程解决方案\" class=\"headerlink\" title=\"android中的线程解决方案\"></a>android中的线程解决方案</h2><p>在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，<br>包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。<br>具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。</p>\n"},{"title":"我所理解的java反射","date":"2016-04-20T11:24:29.000Z","_content":"## 为什么要使用反射\n   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。\n   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。\n\n## Class\n\n一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。\n\n{%codeblock%}\n1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。\n2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查\n{%endcodeblock%}\n值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。\n使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。\n\n 泛型和Class注意点\n 假设 存在 父类 Father\n 子类 Child extends father\n{%codeblock%}\nClass<Child> c=Child.classm\n{%endcodeblock%}\n因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。\n\n## isInstance 和 isInstanceOf\nisInstanceOf和isInstance这两个方法都是用来确定对象的类型。\n但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。\n用法也稍微也不同\n{%codeblock%}\nA a = new A();\na.instanceOf A; //true\na.getClass().instance(A);//true\n{%endcodeblock%}\n值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf\n## 动态代理\n代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。\n在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。\n\n{%codeblock%}\npublic List getList(final List list){\n    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] { List.class}\n                                 new InvocationHanler(){\n                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable{\n                                             if(\"add\".equals(method.getName())){\n                                                 throw new UnsupportdOperationException();\n                                             }else{\n                                                 return method.invoke(list,args);\n                                             }\n                                         }\n                                     }                               );}\n{%endcodeblock%}\n上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。\n例子来自（http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\n## 反射的危害\n事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。\n但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。\n","source":"_posts/RIIT.md","raw":"---\ntitle: 我所理解的java反射\ndate: 2016-04-20 19:24:29\ntags: java reflection\n---\n## 为什么要使用反射\n   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。\n   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。\n\n## Class\n\n一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。\n\n{%codeblock%}\n1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。\n2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查\n{%endcodeblock%}\n值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。\n使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。\n\n 泛型和Class注意点\n 假设 存在 父类 Father\n 子类 Child extends father\n{%codeblock%}\nClass<Child> c=Child.classm\n{%endcodeblock%}\n因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。\n\n## isInstance 和 isInstanceOf\nisInstanceOf和isInstance这两个方法都是用来确定对象的类型。\n但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。\n用法也稍微也不同\n{%codeblock%}\nA a = new A();\na.instanceOf A; //true\na.getClass().instance(A);//true\n{%endcodeblock%}\n值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf\n## 动态代理\n代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。\n在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。\n\n{%codeblock%}\npublic List getList(final List list){\n    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] { List.class}\n                                 new InvocationHanler(){\n                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable{\n                                             if(\"add\".equals(method.getName())){\n                                                 throw new UnsupportdOperationException();\n                                             }else{\n                                                 return method.invoke(list,args);\n                                             }\n                                         }\n                                     }                               );}\n{%endcodeblock%}\n上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。\n例子来自（http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\n## 反射的危害\n事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。\n但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。\n","slug":"RIIT","published":1,"updated":"2019-06-25T00:00:59.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kcu0007wk008kxltwu0","content":"<h2 id=\"为什么要使用反射\"><a href=\"#为什么要使用反射\" class=\"headerlink\" title=\"为什么要使用反射\"></a>为什么要使用反射</h2><p>   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。<br>   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。</p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。</span><br><span class=\"line\">2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查</span><br></pre></td></tr></table></figure>\n<p>值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。<br>使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。</p>\n<p> 泛型和Class注意点<br> 假设 存在 父类 Father<br> 子类 Child extends father<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Child&gt; c=Child.classm</span><br></pre></td></tr></table></figure><br>因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。</p>\n<h2 id=\"isInstance-和-isInstanceOf\"><a href=\"#isInstance-和-isInstanceOf\" class=\"headerlink\" title=\"isInstance 和 isInstanceOf\"></a>isInstance 和 isInstanceOf</h2><p>isInstanceOf和isInstance这两个方法都是用来确定对象的类型。<br>但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。<br>用法也稍微也不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = new A();</span><br><span class=\"line\">a.instanceOf A; //true</span><br><span class=\"line\">a.getClass().instance(A);//true</span><br></pre></td></tr></table></figure><br>值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。<br>在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List getList(final List list)&#123;</span><br><span class=\"line\">    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] &#123; List.class&#125;</span><br><span class=\"line\">                                 new InvocationHanler()&#123;</span><br><span class=\"line\">                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable&#123;</span><br><span class=\"line\">                                             if(&quot;add&quot;.equals(method.getName()))&#123;</span><br><span class=\"line\">                                                 throw new UnsupportdOperationException();</span><br><span class=\"line\">                                             &#125;else&#123;</span><br><span class=\"line\">                                                 return method.invoke(list,args);</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;                               );&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。<br>例子来自（<a href=\"http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）</a></p>\n<h2 id=\"反射的危害\"><a href=\"#反射的危害\" class=\"headerlink\" title=\"反射的危害\"></a>反射的危害</h2><p>事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。<br>但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。</p>\n","excerpt":"","more":"<h2 id=\"为什么要使用反射\"><a href=\"#为什么要使用反射\" class=\"headerlink\" title=\"为什么要使用反射\"></a>为什么要使用反射</h2><p>   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。<br>   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。</p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。</span><br><span class=\"line\">2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查</span><br></pre></td></tr></table></figure>\n<p>值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。<br>使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。</p>\n<p> 泛型和Class注意点<br> 假设 存在 父类 Father<br> 子类 Child extends father<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Child&gt; c=Child.classm</span><br></pre></td></tr></table></figure><br>因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。</p>\n<h2 id=\"isInstance-和-isInstanceOf\"><a href=\"#isInstance-和-isInstanceOf\" class=\"headerlink\" title=\"isInstance 和 isInstanceOf\"></a>isInstance 和 isInstanceOf</h2><p>isInstanceOf和isInstance这两个方法都是用来确定对象的类型。<br>但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。<br>用法也稍微也不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = new A();</span><br><span class=\"line\">a.instanceOf A; //true</span><br><span class=\"line\">a.getClass().instance(A);//true</span><br></pre></td></tr></table></figure><br>值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。<br>在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List getList(final List list)&#123;</span><br><span class=\"line\">    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] &#123; List.class&#125;</span><br><span class=\"line\">                                 new InvocationHanler()&#123;</span><br><span class=\"line\">                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable&#123;</span><br><span class=\"line\">                                             if(&quot;add&quot;.equals(method.getName()))&#123;</span><br><span class=\"line\">                                                 throw new UnsupportdOperationException();</span><br><span class=\"line\">                                             &#125;else&#123;</span><br><span class=\"line\">                                                 return method.invoke(list,args);</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;                               );&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。<br>例子来自（<a href=\"http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\">http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）</a></p>\n<h2 id=\"反射的危害\"><a href=\"#反射的危害\" class=\"headerlink\" title=\"反射的危害\"></a>反射的危害</h2><p>事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。<br>但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。</p>\n"},{"title":"tree","date":"2016-05-31T05:44:28.000Z","_content":"## 前言\n　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。\n\n## 数据结构\n　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用\n\n{%codeblock%}\npublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\n{%endcodeblock%}\n\n## 二叉树的建立\n　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用\"-1\"表示（貌似很多教材都用'＃'表示）。\n{%codeblock%}\npublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\n{%endcodeblock%}\n## 二叉树的遍历\n　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，\n{% img /images/tree.png%}\n\n标注为１的，是前序遍历\n标注为2的，是中序遍历\n标注为3的，是后序遍历\n\n还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。\n总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)\n下面是我写的非递归前序遍历。\n{%codeblock%}\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n{%endcodeblock%}\n\n层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。\n{%codeblock%}\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n{%endcodeblock%}\n\n## 其他\n树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。\n\n## 练习代码　拿出来献丑了\n\n{%codeblock%}\n\npackage com.may.eighteen;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n\tpublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\tstatic int[] nums = {-1,1,2,3,4,5,6,7,8,9};\n\tpublic static void main(String args[]){\n\t\tSolution s = new Solution();\n\t\tNode root = s.buildTree(nums,1);\n\t\tSystem.out.print(\"-----hello----\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.queueOrder(root);\n\t\tSystem.out.println(\"\");\n\t\tSystem.out.print(s.findNodeCount(root));\n\t\t\n\t}\n\t\n\tpublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\t\n\n\t\n\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root){\n\t\tif(root == null) return;\n\t\t\n\t\t\n\t}\n\t\n\t\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n\t\n\tvoid preorder(Node root){\n\t\tif(root == null) return;\n\t\tSystem.out.print(root.val + \"---\");\n\t\tpreorder(root.left);\n\t\tpreorder(root.right);\n\t}\n\t\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t\n   int findNodeCount(Node root){\n\t\tif(root == null){return 0;}\n\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;\n\t}\n\t\n}\n\n{%endcodeblock%}\n\n\n\n","source":"_posts/tree.md","raw":"---\ntitle: tree\ndate: 2016-05-31 13:44:28\ntags: data struct \n---\n## 前言\n　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。\n\n## 数据结构\n　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用\n\n{%codeblock%}\npublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\n{%endcodeblock%}\n\n## 二叉树的建立\n　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用\"-1\"表示（貌似很多教材都用'＃'表示）。\n{%codeblock%}\npublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\n{%endcodeblock%}\n## 二叉树的遍历\n　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，\n{% img /images/tree.png%}\n\n标注为１的，是前序遍历\n标注为2的，是中序遍历\n标注为3的，是后序遍历\n\n还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。\n总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)\n下面是我写的非递归前序遍历。\n{%codeblock%}\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n{%endcodeblock%}\n\n层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。\n{%codeblock%}\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n{%endcodeblock%}\n\n## 其他\n树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。\n\n## 练习代码　拿出来献丑了\n\n{%codeblock%}\n\npackage com.may.eighteen;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n\tpublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\tstatic int[] nums = {-1,1,2,3,4,5,6,7,8,9};\n\tpublic static void main(String args[]){\n\t\tSolution s = new Solution();\n\t\tNode root = s.buildTree(nums,1);\n\t\tSystem.out.print(\"-----hello----\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.queueOrder(root);\n\t\tSystem.out.println(\"\");\n\t\tSystem.out.print(s.findNodeCount(root));\n\t\t\n\t}\n\t\n\tpublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\t\n\n\t\n\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root){\n\t\tif(root == null) return;\n\t\t\n\t\t\n\t}\n\t\n\t\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n\t\n\tvoid preorder(Node root){\n\t\tif(root == null) return;\n\t\tSystem.out.print(root.val + \"---\");\n\t\tpreorder(root.left);\n\t\tpreorder(root.right);\n\t}\n\t\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t\n   int findNodeCount(Node root){\n\t\tif(root == null){return 0;}\n\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;\n\t}\n\t\n}\n\n{%endcodeblock%}\n\n\n\n","slug":"tree","published":1,"updated":"2019-06-25T00:00:59.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kd30009wk00l1ms69yw","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树的建立\"><a href=\"#二叉树的建立\" class=\"headerlink\" title=\"二叉树的建立\"></a>二叉树的建立</h2><p>　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用”-1”表示（貌似很多教材都用’＃’表示）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，<br><img src=\"/images/tree.png\"></p>\n<p>标注为１的，是前序遍历<br>标注为2的，是中序遍历<br>标注为3的，是后序遍历</p>\n<p>还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。<br>总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)<br>下面是我写的非递归前序遍历。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void preorder2(Node root)&#123;</span><br><span class=\"line\">\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">       </span><br><span class=\"line\">\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\troot=root.right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void queueOrder(Node root)&#123;</span><br><span class=\"line\">\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\tl.add(root);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。</p>\n<h2 id=\"练习代码-拿出来献丑了\"><a href=\"#练习代码-拿出来献丑了\" class=\"headerlink\" title=\"练习代码　拿出来献丑了\"></a>练习代码　拿出来献丑了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.may.eighteen;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic int[] nums = &#123;-1,1,2,3,4,5,6,7,8,9&#125;;</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tSolution s = new Solution();</span><br><span class=\"line\">\t\tNode root = s.buildTree(nums,1);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;-----hello----&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.queueOrder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\tSystem.out.print(s.findNodeCount(root));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid queueOrder(Node root)&#123;</span><br><span class=\"line\">\t\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\t\tl.add(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\tSystem.out.print(root.val + &quot;---&quot;);</span><br><span class=\"line\">\t\tpreorder(root.left);</span><br><span class=\"line\">\t\tpreorder(root.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder2(Node root)&#123;</span><br><span class=\"line\">\t\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\t\troot=root.right;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">   int findNodeCount(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null)&#123;return 0;&#125;</span><br><span class=\"line\">\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树的建立\"><a href=\"#二叉树的建立\" class=\"headerlink\" title=\"二叉树的建立\"></a>二叉树的建立</h2><p>　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用”-1”表示（貌似很多教材都用’＃’表示）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，<br><img src=\"/images/tree.png\"></p>\n<p>标注为１的，是前序遍历<br>标注为2的，是中序遍历<br>标注为3的，是后序遍历</p>\n<p>还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。<br>总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)<br>下面是我写的非递归前序遍历。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void preorder2(Node root)&#123;</span><br><span class=\"line\">\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">       </span><br><span class=\"line\">\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\troot=root.right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void queueOrder(Node root)&#123;</span><br><span class=\"line\">\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\tl.add(root);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。</p>\n<h2 id=\"练习代码-拿出来献丑了\"><a href=\"#练习代码-拿出来献丑了\" class=\"headerlink\" title=\"练习代码　拿出来献丑了\"></a>练习代码　拿出来献丑了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.may.eighteen;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic int[] nums = &#123;-1,1,2,3,4,5,6,7,8,9&#125;;</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tSolution s = new Solution();</span><br><span class=\"line\">\t\tNode root = s.buildTree(nums,1);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;-----hello----&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.queueOrder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\tSystem.out.print(s.findNodeCount(root));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid queueOrder(Node root)&#123;</span><br><span class=\"line\">\t\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\t\tl.add(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\tSystem.out.print(root.val + &quot;---&quot;);</span><br><span class=\"line\">\t\tpreorder(root.left);</span><br><span class=\"line\">\t\tpreorder(root.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder2(Node root)&#123;</span><br><span class=\"line\">\t\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\t\troot=root.right;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">   int findNodeCount(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null)&#123;return 0;&#125;</span><br><span class=\"line\">\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"String","date":"2016-04-19T09:50:05.000Z","_content":"##  我对java String的理解 \n在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。\n## String的不可变性\n在java设计中，String类型是不可变的。如\n{%codeblock%}\n   String s1 = \"abc\";\n   String s2 = s1.toUpperCase();\n{%endcodeblock%}\n   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。\n\n## String的 + \n大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号\n\n在日常程序编写中，我是经常会编写字符串拼接的程序。如\n String s  = \"I\"+\"love\"+\"CS\";\n 按照String不变性在推测，是不是在生成新的s时，\n 第一步：新生成\"Ilove\"对象\n 第二部：生成\"IloveCS\"对象\n 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。\n\n 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。\n 上述过程，最终实现优化后，差不多如下\n {%codeblock%}\n StringBuilder sb  = new StringBuilder();\n sb.append(\"I\");\n sb.append(\"love\");\n sb.append(\"CS\");\n String s = sb.toString();\n{%endcodeblock%}\n 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。\n\n ## String 存储\n String是一个非常有意思的类。在内存中存储的方式不同\n 当String s1= \"abc\" 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。\n\n {%codeblock%}\n String s2 = \"a\";\n String s3 = \"a\";\n s2 == s3 //  true\n{%endcodeblock%}\n 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）\n\n {%codeblock%}\n String s4 = new String(\"abc\");是生成在堆内存中。\n String s5 = new String(\"abc\");\n s4 == s5 //false\n{%endcodeblock%}\nString s6 = \"abc\" + new String(\"cde\"); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。\n\n\n\n","source":"_posts/我对java-String的理解.md","raw":"---\ntitle: String\ndate: 2016-04-19 17:50:05\ntags: java\n---\n##  我对java String的理解 \n在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。\n## String的不可变性\n在java设计中，String类型是不可变的。如\n{%codeblock%}\n   String s1 = \"abc\";\n   String s2 = s1.toUpperCase();\n{%endcodeblock%}\n   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。\n\n## String的 + \n大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号\n\n在日常程序编写中，我是经常会编写字符串拼接的程序。如\n String s  = \"I\"+\"love\"+\"CS\";\n 按照String不变性在推测，是不是在生成新的s时，\n 第一步：新生成\"Ilove\"对象\n 第二部：生成\"IloveCS\"对象\n 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。\n\n 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。\n 上述过程，最终实现优化后，差不多如下\n {%codeblock%}\n StringBuilder sb  = new StringBuilder();\n sb.append(\"I\");\n sb.append(\"love\");\n sb.append(\"CS\");\n String s = sb.toString();\n{%endcodeblock%}\n 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。\n\n ## String 存储\n String是一个非常有意思的类。在内存中存储的方式不同\n 当String s1= \"abc\" 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。\n\n {%codeblock%}\n String s2 = \"a\";\n String s3 = \"a\";\n s2 == s3 //  true\n{%endcodeblock%}\n 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）\n\n {%codeblock%}\n String s4 = new String(\"abc\");是生成在堆内存中。\n String s5 = new String(\"abc\");\n s4 == s5 //false\n{%endcodeblock%}\nString s6 = \"abc\" + new String(\"cde\"); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。\n\n\n\n","slug":"我对java-String的理解","published":1,"updated":"2019-06-25T00:00:59.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kd5000bwk0057gpb3mp","content":"<h2 id=\"我对java-String的理解\"><a href=\"#我对java-String的理解\" class=\"headerlink\" title=\"我对java String的理解\"></a>我对java String的理解</h2><p>在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。</p>\n<h2 id=\"String的不可变性\"><a href=\"#String的不可变性\" class=\"headerlink\" title=\"String的不可变性\"></a>String的不可变性</h2><p>在java设计中，String类型是不可变的。如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = s1.toUpperCase();</span><br></pre></td></tr></table></figure><br>   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。</p>\n<h2 id=\"String的\"><a href=\"#String的\" class=\"headerlink\" title=\"String的 +\"></a>String的 +</h2><p>大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号</p>\n<p>在日常程序编写中，我是经常会编写字符串拼接的程序。如<br> String s  = “I”+”love”+”CS”;<br> 按照String不变性在推测，是不是在生成新的s时，<br> 第一步：新生成”Ilove”对象<br> 第二部：生成”IloveCS”对象<br> 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。</p>\n<p> 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。<br> 上述过程，最终实现优化后，差不多如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb  = new StringBuilder();</span><br><span class=\"line\">sb.append(&quot;I&quot;);</span><br><span class=\"line\">sb.append(&quot;love&quot;);</span><br><span class=\"line\">sb.append(&quot;CS&quot;);</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure><br> 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。</p>\n<h2 id=\"String-存储\"><a href=\"#String-存储\" class=\"headerlink\" title=\"String 存储\"></a>String 存储</h2><p> String是一个非常有意思的类。在内存中存储的方式不同<br> 当String s1= “abc” 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;a&quot;;</span><br><span class=\"line\">s2 == s3 //  true</span><br></pre></td></tr></table></figure>\n<p> 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = new String(&quot;abc&quot;);是生成在堆内存中。</span><br><span class=\"line\">String s5 = new String(&quot;abc&quot;);</span><br><span class=\"line\">s4 == s5 //false</span><br></pre></td></tr></table></figure>\n<p>String s6 = “abc” + new String(“cde”); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。</p>\n","excerpt":"","more":"<h2 id=\"我对java-String的理解\"><a href=\"#我对java-String的理解\" class=\"headerlink\" title=\"我对java String的理解\"></a>我对java String的理解</h2><p>在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。</p>\n<h2 id=\"String的不可变性\"><a href=\"#String的不可变性\" class=\"headerlink\" title=\"String的不可变性\"></a>String的不可变性</h2><p>在java设计中，String类型是不可变的。如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = s1.toUpperCase();</span><br></pre></td></tr></table></figure><br>   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。</p>\n<h2 id=\"String的\"><a href=\"#String的\" class=\"headerlink\" title=\"String的 +\"></a>String的 +</h2><p>大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号</p>\n<p>在日常程序编写中，我是经常会编写字符串拼接的程序。如<br> String s  = “I”+”love”+”CS”;<br> 按照String不变性在推测，是不是在生成新的s时，<br> 第一步：新生成”Ilove”对象<br> 第二部：生成”IloveCS”对象<br> 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。</p>\n<p> 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。<br> 上述过程，最终实现优化后，差不多如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb  = new StringBuilder();</span><br><span class=\"line\">sb.append(&quot;I&quot;);</span><br><span class=\"line\">sb.append(&quot;love&quot;);</span><br><span class=\"line\">sb.append(&quot;CS&quot;);</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure><br> 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。</p>\n<h2 id=\"String-存储\"><a href=\"#String-存储\" class=\"headerlink\" title=\"String 存储\"></a>String 存储</h2><p> String是一个非常有意思的类。在内存中存储的方式不同<br> 当String s1= “abc” 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;a&quot;;</span><br><span class=\"line\">s2 == s3 //  true</span><br></pre></td></tr></table></figure>\n<p> 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = new String(&quot;abc&quot;);是生成在堆内存中。</span><br><span class=\"line\">String s5 = new String(&quot;abc&quot;);</span><br><span class=\"line\">s4 == s5 //false</span><br></pre></td></tr></table></figure>\n<p>String s6 = “abc” + new String(“cde”); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjxi82kc60002wk00imhia65a","tag_id":"cjxi82kcj0006wk00noiaevps","_id":"cjxi82kd7000cwk001v62j751"},{"post_id":"cjxi82kcf0004wk00mb22yp5l","tag_id":"cjxi82kd4000awk00x94hf8x2","_id":"cjxi82kd8000ewk00afda2g5g"},{"post_id":"cjxi82kcu0007wk008kxltwu0","tag_id":"cjxi82kd8000dwk006z50cbts","_id":"cjxi82kd9000gwk00maz6e4zc"},{"post_id":"cjxi82kd30009wk00l1ms69yw","tag_id":"cjxi82kd8000fwk00bioevzat","_id":"cjxi82kda000iwk00nsb243es"},{"post_id":"cjxi82kd5000bwk0057gpb3mp","tag_id":"cjxi82kd9000hwk00ooc09reo","_id":"cjxi82kdb000jwk00c0j1yq65"}],"Tag":[{"name":"generics","_id":"cjxi82kcj0006wk00noiaevps"},{"name":"concurrency","_id":"cjxi82kd4000awk00x94hf8x2"},{"name":"java reflection","_id":"cjxi82kd8000dwk006z50cbts"},{"name":"data struct","_id":"cjxi82kd8000fwk00bioevzat"},{"name":"java","_id":"cjxi82kd9000hwk00ooc09reo"}]}}