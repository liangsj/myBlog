{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/w.png","path":"images/w.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-snippet/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/highlight.pack.js","path":"assets/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/tagcanvas.min.js","path":"assets/tagcanvas.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/branding.png","path":"img/branding.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline-clock.gif","path":"img/timeline-clock.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/head-img.jpg","path":"img/head-img.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/reward-wepay.jpg","path":"img/reward-wepay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline.gif","path":"img/timeline.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline-dot.gif","path":"img/timeline-dot.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/valine.min.js","path":"assets/valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"source/images/resume.jpg","path":"images/resume.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/tree.png","path":"images/tree.png","modified":0,"renderable":0},{"_id":"source/images/1_docker_show.png","path":"images/1_docker_show.png","modified":0,"renderable":0},{"_id":"source/images/1_web_set.png","path":"images/1_web_set.png","modified":0,"renderable":0},{"_id":"source/images/1_alone.png","path":"images/1_alone.png","modified":0,"renderable":0},{"_id":"source/images/1_web_get.png","path":"images/1_web_get.png","modified":0,"renderable":0},{"_id":"source/images/2_compose_ret.png","path":"images/2_compose_ret.png","modified":0,"renderable":0},{"_id":"source/images/2_compose_ret2.png","path":"images/2_compose_ret2.png","modified":0,"renderable":0},{"_id":"source/images/1_webapp_struct_1.png","path":"images/1_webapp_struct_1.png","modified":0,"renderable":0},{"_id":"source/images/2_webapp_struct_1.png","path":"images/2_webapp_struct_1.png","modified":0,"renderable":0},{"_id":"source/images/2_webapp_struct_4.png","path":"images/2_webapp_struct_4.png","modified":0,"renderable":0},{"_id":"source/images/2_webapp_struct_2.png","path":"images/2_webapp_struct_2.png","modified":0,"renderable":0},{"_id":"source/images/2_sentinel_log_1.png","path":"images/2_sentinel_log_1.png","modified":0,"renderable":0},{"_id":"source/images/2_sentinel_log_2.png","path":"images/2_sentinel_log_2.png","modified":0,"renderable":0},{"_id":"source/images/2_webapp_struct_3.png","path":"images/2_webapp_struct_3.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hexo-theme-snippet/.gitignore","hash":"966980bf3a75dbcdc09b08664e6084139799b498","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/LICENSE","hash":"c720db99e36a717d9808bf97b736612462e883dd","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/_config.yml","hash":"5551edb3a3761dbd232d4002c5bde98192f1e888","modified":1562199919744},{"_id":"themes/hexo-theme-snippet/.travis.yml","hash":"986f6d528438b861cc531e6eafb7871b28a436a8","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/README.md","hash":"bdd0b48b18fd1b6ff622a40732b81e3cc1a67163","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/_travis.sh","hash":"2ad37ebb33683f71b605997edbc408c70de230c3","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/package.json","hash":"be625298f117d26e92131336289c01cf791b4cdc","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/gulpfile.js","hash":"16aae4664f8077b8974e460c7dbcbda131b433e3","modified":1561775525057},{"_id":"source/_posts/hello-world.md","hash":"98b8a7bf20f28d7425660b46ddc7e01687a2f5e6","modified":1561809054970},{"_id":"source/_posts/generics.md","hash":"1287cf2fe6083805bb1701e5e9aa4de838f49415","modified":1561420859935},{"_id":"source/_posts/concurrency.md","hash":"74235a181d6911cdfe47440a0fe8d3990c735cdf","modified":1561420859935},{"_id":"source/_posts/RIIT.md","hash":"e81a99b0948ed52f3be6eef0261de7b993470854","modified":1561420859934},{"_id":"source/about/index.md","hash":"dc8311d5ab098e61a3539570213c0191232ab866","modified":1561855086592},{"_id":"source/about/index.md~","hash":"9d1f70485b989ca420810aaaec93d11db4d7680f","modified":1561420859936},{"_id":"source/_posts/tree.md","hash":"8eda58f5c11291ed6dc2d3aef88e920b44d8ee6a","modified":1561420859936},{"_id":"source/_posts/我对java-String的理解.md","hash":"93863a8e7432f36c80379732f8b76649b791bd42","modified":1561420859936},{"_id":"source/about-about-md/index.md","hash":"c9ba7105c4dd78c77f039809fcd2dfb991138dd4","modified":1561854400006},{"_id":"source/images/w.png","hash":"62aa7b4296b6ff45b08bfe5cf5cfaa2043d74ad2","modified":1561420859959},{"_id":"themes/hexo-theme-snippet/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561775525053},{"_id":"source/tafs/index.md","hash":"a92115c1fa6d24caaa8b4a809bf8ca946adf6552","modified":1561420859959},{"_id":"source/tags/index.md","hash":"bd27675caa2e7c95ffb80e5d153f7209189d1863","modified":1561420859959},{"_id":"themes/hexo-theme-snippet/.git/config","hash":"f165390f3c94ddd720ad7231e1a1846332b7699b","modified":1561775525054},{"_id":"themes/hexo-theme-snippet/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE.md","hash":"e90f313849ccea4f9fe86f7d3611dfaa6a7d3e8b","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/.git/packed-refs","hash":"147f505579b61e00029eeafb66f7f115f7fdec09","modified":1561775525049},{"_id":"themes/hexo-theme-snippet/.git/index","hash":"cccd24064d2afda0d9eaf2e12ce0124958eb61b8","modified":1561778772462},{"_id":"themes/hexo-theme-snippet/languages/ja.yml","hash":"fcafdb03d5e000c225a664d65f38a75c7efdef03","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/languages/zh-CN.yml","hash":"4ebacd2028454a5b9642a22c19d3e8c3078b3a0a","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/languages/default.yml","hash":"358313b8a4a48bd32c7d58fc9ef3a4ebe395bf8d","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/languages/zh-TW.yml","hash":"a0bd8ba3e9ad19116e072983cfefd1aabe39d2cd","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/archive.ejs","hash":"bbd99d08132f9ca87e5b17cf642384dc1673f579","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/category.ejs","hash":"ebd05ceb75be73e84ddf085ccfdb24c07162d0fa","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/layout.ejs","hash":"c986efe07c070e0870b89181cc47010b118e2d04","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/index.ejs","hash":"4b17eb2082d177b0cb85f04afadcc604f4073d30","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/scripts/helper.js","hash":"836d369cf95ac51de957e09d396e6a8be1e84cf6","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/scripts/process.js","hash":"c2f0571899a6dd38bd944aaf47e21fc650f7d52e","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/post.ejs","hash":"d0aa6f0fda520815307d2adc2aacaf5314919d8f","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/layout/tag.ejs","hash":"9b42656e75c58e7145e52408b51f017f6b6d9464","modified":1561775525058},{"_id":"source/_posts/oc","hash":"24bca50ac752acf9a145b5359c65e4313fba1a87","modified":1561420859936},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE/feature_request.md","hash":"ca7ec6dc303459058d3117f33878beec538d3023","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8808d24b20e4969c1b687d17cf832e8fac147cc8","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/.git/logs/HEAD","hash":"8a5460b7bb912dccd3749ab599d22b65a74b0ea0","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561775522396},{"_id":"themes/hexo-theme-snippet/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1561775522397},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1561775522398},{"_id":"themes/hexo-theme-snippet/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1561775522396},{"_id":"themes/hexo-theme-snippet/layout/_partial/archive.ejs","hash":"cc21d71c87829f90686a3f6e5ac4d8665c871c25","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/article-meta.ejs","hash":"40f3cc7d88f72f58d320457a0e939e00605fcb1d","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/copyright.ejs","hash":"4c8903c3554aa50259a7581f1a9b7ffca9b91a97","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/footer.ejs","hash":"4a5b6fa1520442ac4edc2ec3d575a676b6717854","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/busuanzi.ejs","hash":"2c26222dc1c8da66135241fdc84d16ba66ae285c","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/article.ejs","hash":"ecc6775b64c4b87a62fae4f8a2545105e40e7dfe","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/gallery.ejs","hash":"1b6b7859f395e10a3ecaa900de2d1312dc140def","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/head.ejs","hash":"3e796175cead54d6adad964996a3c079f5e3605b","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/header.ejs","hash":"b08447c9201c196d132691f1a16c152e82cdcef4","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/nav.ejs","hash":"7fa65a2162a748f049fb910b5b0e46a5bcf57b3b","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/reward.ejs","hash":"8ea91bdf01c946c76f4bd671768c8b930c7de446","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/script.ejs","hash":"0ecdc42c6c1c2474d9e306de39323f089dddf7af","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/sidebar.ejs","hash":"381b7af719c1ab3a94280309926c1205ce7b93a5","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/pagination.ejs","hash":"2ec88a22fd29e7cc97ca2a508eee7d168e338969","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_partial/toc.ejs","hash":"7d86def87d0e7b7ab15400a23b0796f0da430e60","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/baidu_sitemap.ejs","hash":"dabeccfd4860dac2f6b883616f616c4c55fb22ba","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/archive.ejs","hash":"ea6596d993ed1b74bd03eee06ab480931b8c2d9e","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/category.ejs","hash":"1c6881cd5b6b034ddecda6c85a3337d17a03e9ff","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/friends.ejs","hash":"43b0404d608db1a237b3cf17ec8df7b2d24f9533","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/notification.ejs","hash":"78eca9de4eec7c638c7b16863fb90e7182f7d80b","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/search.ejs","hash":"dfbf723051f71099502c58a237bc484cebd5157d","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/social.ejs","hash":"f97313cdc1b495f7602e023b2ade5630acc4b667","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_widget/tagcloud.ejs","hash":"21746717296515c5b45a8fd5ef302ef8a9470bb2","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/assets/highlight.pack.js","hash":"f39840759ec9afe56ec1ca30579d1f1c9d1f6026","modified":1561775525059},{"_id":"themes/hexo-theme-snippet/source/assets/tagcanvas.min.js","hash":"a14280f4e924428ac0cdbac7635a7279cab1b6bf","modified":1561775525059},{"_id":"themes/hexo-theme-snippet/source/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/style.css","hash":"c9f166bbe87845aa6fa3a3f1ee6f3adb28dae055","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/source/img/avatar.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/img/timeline-clock.gif","hash":"2bec1bf5efd948ab2e5942b6da8164faa41b62b2","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/img/reward-wepay.jpg","hash":"2a56391f2b6282b49e724b72bf610b0dabf53742","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/js/app.js","hash":"eca509fc5b45dcd1a0007c62f740529ca31a122f","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/assets/valine.min.js","hash":"d9d4a8f81f288b77b3d0a3866d004e2b5eb30038","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/js/search.js","hash":"7538c8cf0b4341cc281eca153c9c89cf25d29502","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/source/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561775525068},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561775525067},{"_id":"themes/hexo-theme-snippet/source/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1561775525069},{"_id":"themes/hexo-theme-snippet/.git/refs/heads/master","hash":"42721fddb90b6023d629c3f47a662861f5875f85","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/style.ejs","hash":"ece8b1bb0f550ddb0e7ac179de54a8e5f06f49aa","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/seo.ejs","hash":"8cf5d4347c69c0999d756e06374039572c9ed975","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/IE.ejs","hash":"567494a97ba2db7bb452294a9980b4d63b399ef0","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/title.ejs","hash":"1482f56c44221cbc0d28ba06e377f4b55cdaacc2","modified":1561775525057},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/cnzz.ejs","hash":"8bfc514b178fafd81cc8181880afc5c9cbee02dc","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/google.ejs","hash":"91844d4521f97517ea9f169ee85b18c9d0d8cf17","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/baidu.ejs","hash":"eb4a75fb5ba9237d93430e727165d98ccda75a02","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/index.ejs","hash":"6315abe9c31f4c4de719fa3cbfa2b1c6f294b0de","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/tencent.ejs","hash":"10b91084cda9067d037a5f31e48d4edcbaa0c751","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/changyan.ejs","hash":"202c94162ac2eeb0c93c8d2667c82b8705de6390","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/disqus.ejs","hash":"7b5e05154be0408be110893439bfa33e262245de","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/gitment.ejs","hash":"be5c261ae8a769747704a228aa35758120b814e1","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/gitalk.ejs","hash":"c556003dde298f4e8d3a75974996207876e83fa9","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/index.ejs","hash":"99dc8370fabb5302cc9810041e453302ecd98e82","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/livere.ejs","hash":"6333308ba24ae6f2a3e73f4cdc1b42e024d19910","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/css/less/_mixins.less","hash":"e89dc55772b5ae6bfd4cac3b5c32bf9ce73ac805","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/less/_highlight.less","hash":"c799cfa32c323c33a09569d326786874026fd1ef","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/less/_reward.less","hash":"100caed190893351a1ca7ed8e72bad57695d5f19","modified":1561775525060},{"_id":"themes/hexo-theme-snippet/source/css/less/_scrollbar.less","hash":"596ee6ada077f94a05d7c0168dddb20be16b85da","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/uyan.ejs","hash":"2c2abe17f4f5c5ba1a9aaa948ef0a88d99f653f8","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/valine.ejs","hash":"d339116cf24e76e7bc9f28e8a0a7c844ede2e506","modified":1561775525058},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561775525063},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561775525067},{"_id":"themes/hexo-theme-snippet/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561775525062},{"_id":"source/images/resume.jpg","hash":"3d17e637011b40dd2bb34f3f18a632e08af6f369","modified":1561420859938},{"_id":"themes/hexo-theme-snippet/source/css/less/_variable.less","hash":"1d81728d61de486a7a746beb19275b2b4b65e304","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/source/css/less/_timeline.less","hash":"0bb3cef8b58621455d023c30d81fae204200d3bb","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/source/css/less/_style.less","hash":"b4ec6a02dacaa783a3583a76007592149f1379dd","modified":1561775525061},{"_id":"themes/hexo-theme-snippet/.git/objects/pack/pack-0a793e03b33092ef67a6365bee4e828c6d24d450.idx","hash":"fdca77795ca53438b7d33b5b179d496d78b3a773","modified":1561775525019},{"_id":"themes/hexo-theme-snippet/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/.git/logs/refs/heads/master","hash":"8a5460b7bb912dccd3749ab599d22b65a74b0ea0","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1561775525066},{"_id":"themes/hexo-theme-snippet/.git/logs/refs/remotes/origin/HEAD","hash":"8a5460b7bb912dccd3749ab599d22b65a74b0ea0","modified":1561775525053},{"_id":"themes/hexo-theme-snippet/.git/objects/pack/pack-0a793e03b33092ef67a6365bee4e828c6d24d450.pack","hash":"46d6070cdd78e91b696068a5801f9550f9a6f236","modified":1561775525019},{"_id":"source/images/tree.png","hash":"4e16296aef6ea2dc4b22a8763f9f20d8fd56bbb8","modified":1561420859959},{"_id":"public/content.json","hash":"3154c84fc3c8c09f81a828705f37a1e202891969","modified":1562240781305},{"_id":"public/tafs/index.html","hash":"27c68a93db803f7a1130308ec42600ba1ead39ba","modified":1562240571881},{"_id":"public/tags/index.html","hash":"3ec463e58084ade23fcc77843653c717cf3d1a03","modified":1562240571881},{"_id":"public/2016/04/26/generics/index.html","hash":"25b49fdce77d09886e4795040ee80a2e9d4ebf08","modified":1562240571881},{"_id":"public/2016/04/19/我对java-String的理解/index.html","hash":"239fc40893edab91d48addcc42d257364b3fbb17","modified":1562240571881},{"_id":"public/2016/03/26/hello-world/index.html","hash":"3fdae100d6bd22c91011e14eb2d6cccdaf25eb55","modified":1562240571881},{"_id":"public/archives/index.html","hash":"b1e7aa7bd9c038a046191cd0a6ed4f9998e34fdc","modified":1562240571882},{"_id":"public/archives/2016/index.html","hash":"569b41953cded453f99dd6c3493b835323ed7fd2","modified":1562240571882},{"_id":"public/archives/2016/03/index.html","hash":"e7a94b2d4b963f00c4b3674593d9cc0db40083cb","modified":1562240571882},{"_id":"public/archives/2016/04/index.html","hash":"3a19490607bba9c0c106cf4275966fefd2f142f5","modified":1562240571883},{"_id":"public/archives/2016/05/index.html","hash":"76bb53f11fb72df80f7871da5251ca7aeece5993","modified":1562240571883},{"_id":"public/tags/generics/index.html","hash":"18d35e6c8762f1a5e49d7391b9fa99ff560142fe","modified":1562240571883},{"_id":"public/tags/concurrency/index.html","hash":"3605062f200351011afadb51a81bfa1c885a5a52","modified":1562240571883},{"_id":"public/tags/java-reflection/index.html","hash":"877e26c94978e70003302359bffef75804970b3e","modified":1562240571883},{"_id":"public/tags/data-struct/index.html","hash":"db746feb818c577e83897b0a60a477c0ccad36a0","modified":1562240571883},{"_id":"public/tags/java/index.html","hash":"d2337dff7ea30e7b511e41ce48d6efbcfec0e55a","modified":1562240571883},{"_id":"public/2016/05/31/tree/index.html","hash":"c76a54fdf7ec3f76df34bbb2b25a51f0b5620ebc","modified":1562240571884},{"_id":"public/2016/04/26/concurrency/index.html","hash":"ad44647bb68532b0ff2bfab4aa20badbf47f585f","modified":1562240571884},{"_id":"public/2016/04/20/RIIT/index.html","hash":"b0ea0dba626f0728c46a31d0cf97a288c9a03fb8","modified":1562240571884},{"_id":"public/index.html","hash":"0b48647e3736b9e9a7223d6b967bd260396f406f","modified":1562240571884},{"_id":"public/about/index.html","hash":"1d474fc278c35c8fcbea5de00cc28f4d62b83027","modified":1562240571841},{"_id":"public/about-about-md/index.html","hash":"fc6482c4df8a72a86fceb77470b7b9b064f2f7a5","modified":1562240571880},{"_id":"public/images/w.png","hash":"62aa7b4296b6ff45b08bfe5cf5cfaa2043d74ad2","modified":1561854883510},{"_id":"public/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1561854883513},{"_id":"public/img/avatar.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1561854883513},{"_id":"public/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1561854883513},{"_id":"public/img/timeline-clock.gif","hash":"2bec1bf5efd948ab2e5942b6da8164faa41b62b2","modified":1561854883513},{"_id":"public/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1561854883513},{"_id":"public/img/reward-wepay.jpg","hash":"2a56391f2b6282b49e724b72bf610b0dabf53742","modified":1561854883513},{"_id":"public/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1561854883513},{"_id":"public/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1561854883513},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561854883521},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561854883525},{"_id":"public/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1561854883525},{"_id":"public/assets/highlight.pack.js","hash":"f39840759ec9afe56ec1ca30579d1f1c9d1f6026","modified":1561854883529},{"_id":"public/js/app.js","hash":"eca509fc5b45dcd1a0007c62f740529ca31a122f","modified":1561854883529},{"_id":"public/js/search.js","hash":"7538c8cf0b4341cc281eca153c9c89cf25d29502","modified":1561854883529},{"_id":"public/assets/tagcanvas.min.js","hash":"a14280f4e924428ac0cdbac7635a7279cab1b6bf","modified":1561854883530},{"_id":"public/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1561854883530},{"_id":"public/css/style.css","hash":"c9f166bbe87845aa6fa3a3f1ee6f3adb28dae055","modified":1561854883530},{"_id":"public/assets/valine.min.js","hash":"d9d4a8f81f288b77b3d0a3866d004e2b5eb30038","modified":1561854883530},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1561854883530},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561854883530},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561854883530},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561854883530},{"_id":"public/images/resume.jpg","hash":"3d17e637011b40dd2bb34f3f18a632e08af6f369","modified":1561854883541},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1561854883546},{"_id":"public/images/tree.png","hash":"4e16296aef6ea2dc4b22a8763f9f20d8fd56bbb8","modified":1561854883561},{"_id":"source/.DS_Store","hash":"250d6cf6f71e632a5aadf36461b2a63a6b3dbd6a","modified":1562240563872},{"_id":"source/_posts/server_1.md","hash":"ad9797c20e28394d5fcc6fc9cce7718ce1e4bd71","modified":1562240563872},{"_id":"source/images/.DS_Store","hash":"49abd2389c2fd6403a78c912aa63608925198a21","modified":1562240563874},{"_id":"source/images/1_docker_show.png","hash":"13e4c9c447835e11102da23546db2d94095b69cb","modified":1562074523245},{"_id":"source/images/1_web_set.png","hash":"2b346985a6ead3e4f2c1698f3288e8a25f6d8886","modified":1562074523246},{"_id":"source/images/1_alone.png","hash":"ca9e1f33adf4eccf152d629e788e2e10c7092bd9","modified":1562074523245},{"_id":"source/images/1_web_get.png","hash":"eaf80a0ddf16f6bb790dda536ba45da939b22134","modified":1562074523246},{"_id":"public/tags/webapp-docker-mysql-golang/index.html","hash":"6872f0af0ba29652dbbb4cd8506938a3ab0ce823","modified":1562197969462},{"_id":"public/archives/2017/index.html","hash":"923b865b70caeed895b3ba8f65fa27270ab9e22c","modified":1562074537369},{"_id":"public/archives/2017/06/index.html","hash":"a54e15048140d3f94f32f4660bd0bc7bcf954b07","modified":1562074537369},{"_id":"public/2017/06/28/server_1/index.html","hash":"e0a8af300a86051d3d2131ea80563e773e0b4159","modified":1562074537369},{"_id":"public/images/1_docker_show.png","hash":"13e4c9c447835e11102da23546db2d94095b69cb","modified":1562074537373},{"_id":"public/images/1_web_set.png","hash":"2b346985a6ead3e4f2c1698f3288e8a25f6d8886","modified":1562074537373},{"_id":"public/images/1_alone.png","hash":"ca9e1f33adf4eccf152d629e788e2e10c7092bd9","modified":1562074537375},{"_id":"public/images/1_web_get.png","hash":"eaf80a0ddf16f6bb790dda536ba45da939b22134","modified":1562074537375},{"_id":"source/_posts/server_2.md","hash":"fecadb460797433a18959956cea900e8e4d2f492","modified":1562240767083},{"_id":"source/images/2_compose_ret.png","hash":"8267bb80df2564a5664e862d15623585708f8890","modified":1562157493985},{"_id":"source/images/2_compose_ret2.png","hash":"207cce23652377c80fa79bbfd5617a660450a642","modified":1562157493986},{"_id":"public/archives/2019/index.html","hash":"242df6767f3211f3b55ee20c004e419c2e3bf020","modified":1562240571883},{"_id":"public/archives/2019/06/index.html","hash":"fa625c4962339baac2e2ab8d769bc7dc1aae4da8","modified":1562240571883},{"_id":"public/tags/webapp-docker-compose-redis-sentinel/index.html","hash":"d27eff93cd8091f081835c3670cf55f4cdac343e","modified":1562157502759},{"_id":"public/2019/06/28/server_1/index.html","hash":"c9cf2d71353b14e6086515f1eaa1e86f689f7270","modified":1562240571884},{"_id":"public/2019/06/28/server_2/index.html","hash":"109f3e06948be3a3c42ff21362a07d55aee40d5c","modified":1562201275743},{"_id":"public/images/2_compose_ret.png","hash":"8267bb80df2564a5664e862d15623585708f8890","modified":1562157502763},{"_id":"public/images/2_compose_ret2.png","hash":"207cce23652377c80fa79bbfd5617a660450a642","modified":1562157502763},{"_id":"public/tags/webapp/index.html","hash":"0bd2a4f7cd14bd0bbe45d7818a18efcc4bcaf4c2","modified":1562240571883},{"_id":"public/tags/docker-compose/index.html","hash":"55219b18fd244f744d3873ba48a1fbdee6527b77","modified":1562240571883},{"_id":"public/tags/redis/index.html","hash":"040b9bb140cc87159d62699f21eaedce869add61","modified":1562240571883},{"_id":"public/tags/sentinel/index.html","hash":"1dd0c94ad55cb0423a5a8a8b8fe50809aa81e096","modified":1562240571883},{"_id":"public/categories/about/index.html","hash":"2832640999aa515c53a95303496290b4784f26bd","modified":1562198257594},{"_id":"public/tags/docker/index.html","hash":"6645a14e596563d8a1f2bde23217f1b8da3ffa63","modified":1562240571884},{"_id":"public/tags/mysql/index.html","hash":"9fb0f74fbf0bb7f687a4cf40d2c23c68733e79c1","modified":1562240571884},{"_id":"public/tags/golang/index.html","hash":"2652b964e070b1bcd50b58fa226e87d99c041fc0","modified":1562240571884},{"_id":"public/categories/program/index.html","hash":"364474d9865298bef6f8d5134884fa22228fadd3","modified":1562198517103},{"_id":"public/categories/编程/index.html","hash":"84315f64bc0eef91bd1b29ce54df1a12a13186ab","modified":1562240571882},{"_id":"source/images/1_webapp_struct_1.png","hash":"7d6da23995cbb00cd3389ea516fde4a46480e8e5","modified":1562240563876},{"_id":"source/images/2_webapp_struct_1.png","hash":"dac771fab9db31a6c748b860c591bac19ec664ba","modified":1562240563880},{"_id":"source/images/2_webapp_struct_4.png","hash":"b6f6f30eca6f6fdee6c1110d7f6cf1a40073033d","modified":1562240563884},{"_id":"source/images/2_webapp_struct_2.png","hash":"2fc43fc1e5c8e736d69efddb1201690df1dc5b0e","modified":1562240563881},{"_id":"source/images/2_sentinel_log_1.png","hash":"2dacefc66bb013e0b52679e32982fb2fb9270768","modified":1562240563878},{"_id":"source/images/2_sentinel_log_2.png","hash":"d852caa2d7f171d14e586a7519c6f742dc17e387","modified":1562240563880},{"_id":"source/images/2_webapp_struct_3.png","hash":"f4db2d15c6289191d99462de845ef0eea1e1782f","modified":1562240563883},{"_id":"public/archives/2019/07/index.html","hash":"c044739591cb6f3a3c33fcd01019043bb60f5202","modified":1562240571886},{"_id":"public/2019/07/06/server_2/index.html","hash":"855342607d0a28648892f335f286aa8218f6fea8","modified":1562240781666},{"_id":"public/images/1_webapp_struct_1.png","hash":"7d6da23995cbb00cd3389ea516fde4a46480e8e5","modified":1562240571892},{"_id":"public/images/2_webapp_struct_1.png","hash":"dac771fab9db31a6c748b860c591bac19ec664ba","modified":1562240571892},{"_id":"public/images/2_webapp_struct_4.png","hash":"b6f6f30eca6f6fdee6c1110d7f6cf1a40073033d","modified":1562240571892},{"_id":"public/images/2_webapp_struct_2.png","hash":"2fc43fc1e5c8e736d69efddb1201690df1dc5b0e","modified":1562240571893},{"_id":"public/images/2_sentinel_log_1.png","hash":"2dacefc66bb013e0b52679e32982fb2fb9270768","modified":1562240571899},{"_id":"public/images/2_sentinel_log_2.png","hash":"d852caa2d7f171d14e586a7519c6f742dc17e387","modified":1562240571899},{"_id":"public/images/2_webapp_struct_3.png","hash":"f4db2d15c6289191d99462de845ef0eea1e1782f","modified":1562240571900}],"Category":[{"name":"about","_id":"cjxnwi9dc00015u00u9wor3kt"},{"name":"program","_id":"cjxnwntnt00000m00htabsk3q"},{"name":"编程","_id":"cjxnxiha200005n00v1nhorfb"}],"Data":[],"Page":[{"title":"关于我","date":"2019-06-30T00:26:52.000Z","_content":"### 姓名： liangsj\n\n### mail ：llsj123@163.com\n### 经历：\n- 2010-2014 天津大学\n- 2014-1017 中国矿业大学\n- 2019-      百度\n### 技术栈\n1. android\n2. php\n3. golang\n### 简述\n1.  对计算机充满热爱，喜欢探索自己的未知的领域\n2.  认可自己的职业，希望成为一名出色的工程师\n3.  希望成为一位有趣的人\n4.  希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-06-30 08:26:52\n---\n### 姓名： liangsj\n\n### mail ：llsj123@163.com\n### 经历：\n- 2010-2014 天津大学\n- 2014-1017 中国矿业大学\n- 2019-      百度\n### 技术栈\n1. android\n2. php\n3. golang\n### 简述\n1.  对计算机充满热爱，喜欢探索自己的未知的领域\n2.  认可自己的职业，希望成为一名出色的工程师\n3.  希望成为一位有趣的人\n4.  希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点\n\n","updated":"2019-06-30T00:38:06.592Z","path":"about/index.html","_id":"cjxi82kc30001wk00ruy29yrv","comments":1,"layout":"page","content":"<h3 id=\"姓名：-liangsj\"><a href=\"#姓名：-liangsj\" class=\"headerlink\" title=\"姓名： liangsj\"></a>姓名： liangsj</h3><h3 id=\"mail-：llsj123-163-com\"><a href=\"#mail-：llsj123-163-com\" class=\"headerlink\" title=\"mail ：llsj123@163.com\"></a>mail ：llsj123@163.com</h3><h3 id=\"经历：\"><a href=\"#经历：\" class=\"headerlink\" title=\"经历：\"></a>经历：</h3><ul>\n<li>2010-2014 天津大学</li>\n<li>2014-1017 中国矿业大学</li>\n<li>2019-      百度<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3></li>\n</ul>\n<ol>\n<li>android</li>\n<li>php</li>\n<li>golang<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3></li>\n<li>对计算机充满热爱，喜欢探索自己的未知的领域</li>\n<li>认可自己的职业，希望成为一名出色的工程师</li>\n<li>希望成为一位有趣的人</li>\n<li>希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"姓名：-liangsj\"><a href=\"#姓名：-liangsj\" class=\"headerlink\" title=\"姓名： liangsj\"></a>姓名： liangsj</h3><h3 id=\"mail-：llsj123-163-com\"><a href=\"#mail-：llsj123-163-com\" class=\"headerlink\" title=\"mail ：llsj123@163.com\"></a>mail ：llsj123@163.com</h3><h3 id=\"经历：\"><a href=\"#经历：\" class=\"headerlink\" title=\"经历：\"></a>经历：</h3><ul>\n<li>2010-2014 天津大学</li>\n<li>2014-1017 中国矿业大学</li>\n<li>2019-      百度<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3></li>\n</ul>\n<ol>\n<li>android</li>\n<li>php</li>\n<li>golang<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3></li>\n<li>对计算机充满热爱，喜欢探索自己的未知的领域</li>\n<li>认可自己的职业，希望成为一名出色的工程师</li>\n<li>希望成为一位有趣的人</li>\n<li>希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点</li>\n</ol>\n"},{"title":"about/about.md","date":"2019-06-30T00:26:39.000Z","_content":"","source":"about-about-md/index.md","raw":"---\ntitle: about/about.md\ndate: 2019-06-30 08:26:39\n---\n","updated":"2019-06-30T00:26:40.006Z","path":"about-about-md/index.html","comments":1,"layout":"page","_id":"cjxi82kc90003wk00mny04ky2","content":"","excerpt":"","more":""},{"title":"tafs","date":"2016-04-14T02:42:52.000Z","_content":"","source":"tafs/index.md","raw":"---\ntitle: tafs\ndate: 2016-04-14 10:42:52\n---\n","updated":"2019-06-25T00:00:59.959Z","path":"tafs/index.html","comments":1,"layout":"page","_id":"cjxi82kcj0005wk00zdud9xjo","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-04-14T02:42:57.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-14 10:42:57\n---\n","updated":"2019-06-25T00:00:59.959Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjxi82kd20008wk00j84tvwt5","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2016-03-26T03:27:31.000Z","_content":"大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧\n\n## Quick Start\n建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。\n## platform \naliyun centos \n\n因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。\n\n## tools\n\n### nginx\nnginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.\n\nnginx install \n``` bash\n$ sudo yum -y install nginx centos 仓库中安装\n$ sudo systemctl start nginx       启动nginx\n```\n接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。\n\nnginx setting\nnginx 的配置文件在 /etc/nginx/nginx.conf\n``` bash\n$ cd /etc/nginx/\n$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式\n$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来\n$ sudo vim nginx.conf                用vim 打开文件\n```\n{%codeblock nginx.conf%}\nserver{\n\troot //标出根目录文件，就是一下hexo生产的静态文件\n\t\tindex index.php index.html index.htm 设置文件的名字格式\n}\n{%endcodeblock%}\n### hexo\nhexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单\nhexo install\n``` bash\n$ sudo yum -y install node 安装nodejs\n$ sudo yum -y install npm  安装nodejs的npm仓库\n$ npm install -g hexo-cli  安装hexo\n```\nhexo 操作十分简单\n```bash\n$ hexo init 初始化当初文件夹，生成博客工程\n$ hexo g    生成静态文件\n$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件\n```\n更多可以查看 hexo(http://hexo.io)官网\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-03-26 11:27:31\n---\n大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧\n\n## Quick Start\n建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。\n## platform \naliyun centos \n\n因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。\n\n## tools\n\n### nginx\nnginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.\n\nnginx install \n``` bash\n$ sudo yum -y install nginx centos 仓库中安装\n$ sudo systemctl start nginx       启动nginx\n```\n接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。\n\nnginx setting\nnginx 的配置文件在 /etc/nginx/nginx.conf\n``` bash\n$ cd /etc/nginx/\n$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式\n$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来\n$ sudo vim nginx.conf                用vim 打开文件\n```\n{%codeblock nginx.conf%}\nserver{\n\troot //标出根目录文件，就是一下hexo生产的静态文件\n\t\tindex index.php index.html index.htm 设置文件的名字格式\n}\n{%endcodeblock%}\n### hexo\nhexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单\nhexo install\n``` bash\n$ sudo yum -y install node 安装nodejs\n$ sudo yum -y install npm  安装nodejs的npm仓库\n$ npm install -g hexo-cli  安装hexo\n```\nhexo 操作十分简单\n```bash\n$ hexo init 初始化当初文件夹，生成博客工程\n$ hexo g    生成静态文件\n$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件\n```\n更多可以查看 hexo(http://hexo.io)官网\n","slug":"hello-world","published":1,"updated":"2019-06-29T11:50:54.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kbv0000wk00zsp0jr8h","content":"<p>大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。</p>\n<h2 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform</h2><p>aliyun centos </p>\n<p>因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。</p>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>nginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.</p>\n<p>nginx install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install nginx centos 仓库中安装</span><br><span class=\"line\">$ sudo systemctl start nginx       启动nginx</span><br></pre></td></tr></table></figure></p>\n<p>接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。</p>\n<p>nginx setting<br>nginx 的配置文件在 /etc/nginx/nginx.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式</span><br><span class=\"line\">$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来</span><br><span class=\"line\">$ sudo vim nginx.conf                用vim 打开文件</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\troot //标出根目录文件，就是一下hexo生产的静态文件</span><br><span class=\"line\">\t\tindex index.php index.html index.htm 设置文件的名字格式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><p>hexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单<br>hexo install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install node 安装nodejs</span><br><span class=\"line\">$ sudo yum -y install npm  安装nodejs的npm仓库</span><br><span class=\"line\">$ npm install -g hexo-cli  安装hexo</span><br></pre></td></tr></table></figure></p>\n<p>hexo 操作十分简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 初始化当初文件夹，生成博客工程</span><br><span class=\"line\">$ hexo g    生成静态文件</span><br><span class=\"line\">$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件</span><br></pre></td></tr></table></figure></p>\n<p>更多可以查看 hexo(<a href=\"http://hexo.io)官网\" target=\"_blank\" rel=\"external\">http://hexo.io)官网</a></p>\n","excerpt":"","more":"<p>大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。</p>\n<h2 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform</h2><p>aliyun centos </p>\n<p>因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。</p>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>nginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便.</p>\n<p>nginx install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install nginx centos 仓库中安装</span><br><span class=\"line\">$ sudo systemctl start nginx       启动nginx</span><br></pre></td></tr></table></figure></p>\n<p>接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。</p>\n<p>nginx setting<br>nginx 的配置文件在 /etc/nginx/nginx.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式</span><br><span class=\"line\">$ sudo mv nginx.conf nginx.cong.bak  备份配置文件，防止修改错误还能找会来</span><br><span class=\"line\">$ sudo vim nginx.conf                用vim 打开文件</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\troot //标出根目录文件，就是一下hexo生产的静态文件</span><br><span class=\"line\">\t\tindex index.php index.html index.htm 设置文件的名字格式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><p>hexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单<br>hexo install<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install node 安装nodejs</span><br><span class=\"line\">$ sudo yum -y install npm  安装nodejs的npm仓库</span><br><span class=\"line\">$ npm install -g hexo-cli  安装hexo</span><br></pre></td></tr></table></figure></p>\n<p>hexo 操作十分简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init 初始化当初文件夹，生成博客工程</span><br><span class=\"line\">$ hexo g    生成静态文件</span><br><span class=\"line\">$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件</span><br></pre></td></tr></table></figure></p>\n<p>更多可以查看 hexo(<a href=\"http://hexo.io)官网\">http://hexo.io)官网</a></p>\n"},{"title":"generics","date":"2016-04-26T02:51:54.000Z","_content":"## 泛型的作用\njava 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。\n\n\n","source":"_posts/generics.md","raw":"---\ntitle: generics\ndate: 2016-04-26 10:51:54\ntags: generics\n---\n## 泛型的作用\njava 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。\n\n\n","slug":"generics","published":1,"updated":"2019-06-25T00:00:59.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kc60002wk00imhia65a","content":"<h2 id=\"泛型的作用\"><a href=\"#泛型的作用\" class=\"headerlink\" title=\"泛型的作用\"></a>泛型的作用</h2><p>java 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。</p>\n","excerpt":"","more":"<h2 id=\"泛型的作用\"><a href=\"#泛型的作用\" class=\"headerlink\" title=\"泛型的作用\"></a>泛型的作用</h2><p>java 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。</p>\n"},{"title":"concurrency","date":"2016-04-26T03:27:31.000Z","_content":"## 并发编程\n   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。\n  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。\n  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。\n## java 中的并发\njava是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。\n1、Runnable Thread\n在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。\n在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。\n另外值得注意的一点。\n\n{%codeblock%}\nMyThread t1  = new MyThread();\nt1.run();//没有用到多线程，相当于直接调用了一个方法\nt1.start();//正确的调用方式\n{%endcodeblock%}\n\n在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。\n\n\n2、后台线程\n我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。\n{%codeblock%}\nt1.setDaemon(true);//设置此线程为后台线程的方法。\n{%endcodeblock%}\n后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。\n## java thread 锁\n众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。\n1、原子操作\n根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。\n    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）\n2、在java中，自增操作不是设计出原子性的\n3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。\n\n2、synchronized 和volatile Lock.class\nvolatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的\nsynchronized\n最常用的锁，通常形式是\nsynchronized function {\n    //代码\n}\n在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁\nsynchronized(this){\n    //代码\n}\n可以锁定代码块\n\nLock.class\n这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。\n\nwait() notify()\n从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。\n{%codeblock%}\nsynchronized{\n    wait();\n}\n\nsynchronized{\n    notify();\n}\n{%endcodeblock%}\n当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).\n才能继续运行剩余的代码块。\n值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。\n\n## 线程中的异常\njava异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。\n每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。\n\n## 新类库中的构件\n我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。\n   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in java>中的总结。\n\nCountDownLatch\n它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。\n它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。\n\nCyclicBarrier\n和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）\n\nSemaphore\n正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。\n\nExchanger\n从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。\n{% img /images/w.png%}\n\n乐观锁\n在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。\n\n\n## android中的线程解决方案\n在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，\n包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。\n具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。\n","source":"_posts/concurrency.md","raw":"---\ntitle: concurrency\ndate: 2016-04-26 11:27:31\ntags: concurrency\n---\n## 并发编程\n   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。\n  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。\n  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。\n## java 中的并发\njava是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。\n1、Runnable Thread\n在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。\n在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。\n另外值得注意的一点。\n\n{%codeblock%}\nMyThread t1  = new MyThread();\nt1.run();//没有用到多线程，相当于直接调用了一个方法\nt1.start();//正确的调用方式\n{%endcodeblock%}\n\n在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。\n\n\n2、后台线程\n我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。\n{%codeblock%}\nt1.setDaemon(true);//设置此线程为后台线程的方法。\n{%endcodeblock%}\n后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。\n## java thread 锁\n众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。\n1、原子操作\n根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。\n    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）\n2、在java中，自增操作不是设计出原子性的\n3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。\n\n2、synchronized 和volatile Lock.class\nvolatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的\nsynchronized\n最常用的锁，通常形式是\nsynchronized function {\n    //代码\n}\n在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁\nsynchronized(this){\n    //代码\n}\n可以锁定代码块\n\nLock.class\n这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。\n\nwait() notify()\n从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。\n{%codeblock%}\nsynchronized{\n    wait();\n}\n\nsynchronized{\n    notify();\n}\n{%endcodeblock%}\n当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).\n才能继续运行剩余的代码块。\n值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。\n\n## 线程中的异常\njava异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。\n每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。\n\n## 新类库中的构件\n我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。\n   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in java>中的总结。\n\nCountDownLatch\n它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。\n它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。\n\nCyclicBarrier\n和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）\n\nSemaphore\n正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。\n\nExchanger\n从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。\n{% img /images/w.png%}\n\n乐观锁\n在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。\n\n\n## android中的线程解决方案\n在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，\n包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。\n具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。\n","slug":"concurrency","published":1,"updated":"2019-06-25T00:00:59.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kcf0004wk00mb22yp5l","content":"<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。<br>  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。<br>  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。</p>\n<h2 id=\"java-中的并发\"><a href=\"#java-中的并发\" class=\"headerlink\" title=\"java 中的并发\"></a>java 中的并发</h2><p>java是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。<br>1、Runnable Thread<br>在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。<br>在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。<br>另外值得注意的一点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread t1  = new MyThread();</span><br><span class=\"line\">t1.run();//没有用到多线程，相当于直接调用了一个方法</span><br><span class=\"line\">t1.start();//正确的调用方式</span><br></pre></td></tr></table></figure>\n<p>在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。</p>\n<p>2、后台线程<br>我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1.setDaemon(true);//设置此线程为后台线程的方法。</span><br></pre></td></tr></table></figure><br>后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。</p>\n<h2 id=\"java-thread-锁\"><a href=\"#java-thread-锁\" class=\"headerlink\" title=\"java thread 锁\"></a>java thread 锁</h2><p>众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。<br>1、原子操作<br>根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。<br>    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）<br>2、在java中，自增操作不是设计出原子性的<br>3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。</p>\n<p>2、synchronized 和volatile Lock.class<br>volatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的<br>synchronized<br>最常用的锁，通常形式是<br>synchronized function {<br>    //代码<br>}<br>在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁<br>synchronized(this){<br>    //代码<br>}<br>可以锁定代码块</p>\n<p>Lock.class<br>这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。</p>\n<p>wait() notify()<br>从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    wait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    notify();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).<br>才能继续运行剩余的代码块。<br>值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。</p>\n<h2 id=\"线程中的异常\"><a href=\"#线程中的异常\" class=\"headerlink\" title=\"线程中的异常\"></a>线程中的异常</h2><p>java异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。<br>每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。</p>\n<h2 id=\"新类库中的构件\"><a href=\"#新类库中的构件\" class=\"headerlink\" title=\"新类库中的构件\"></a>新类库中的构件</h2><p>我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。<br>   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in=\"\" java=\"\">中的总结。</think></p>\n<p>CountDownLatch<br>它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。<br>它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。</p>\n<p>CyclicBarrier<br>和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）</p>\n<p>Semaphore<br>正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。</p>\n<p>Exchanger<br>从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。<br><img src=\"/images/w.png\"></p>\n<p>乐观锁<br>在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。</p>\n<h2 id=\"android中的线程解决方案\"><a href=\"#android中的线程解决方案\" class=\"headerlink\" title=\"android中的线程解决方案\"></a>android中的线程解决方案</h2><p>在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，<br>包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。<br>具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。</p>\n","excerpt":"","more":"<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>   并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。<br>  从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。<br>  在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。</p>\n<h2 id=\"java-中的并发\"><a href=\"#java-中的并发\" class=\"headerlink\" title=\"java 中的并发\"></a>java 中的并发</h2><p>java是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。<br>1、Runnable Thread<br>在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。<br>在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。<br>另外值得注意的一点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread t1  = new MyThread();</span><br><span class=\"line\">t1.run();//没有用到多线程，相当于直接调用了一个方法</span><br><span class=\"line\">t1.start();//正确的调用方式</span><br></pre></td></tr></table></figure>\n<p>在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。</p>\n<p>2、后台线程<br>我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1.setDaemon(true);//设置此线程为后台线程的方法。</span><br></pre></td></tr></table></figure><br>后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。</p>\n<h2 id=\"java-thread-锁\"><a href=\"#java-thread-锁\" class=\"headerlink\" title=\"java thread 锁\"></a>java thread 锁</h2><p>众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。<br>1、原子操作<br>根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。<br>    1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）<br>2、在java中，自增操作不是设计出原子性的<br>3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。</p>\n<p>2、synchronized 和volatile Lock.class<br>volatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的<br>synchronized<br>最常用的锁，通常形式是<br>synchronized function {<br>    //代码<br>}<br>在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁<br>synchronized(this){<br>    //代码<br>}<br>可以锁定代码块</p>\n<p>Lock.class<br>这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。</p>\n<p>wait() notify()<br>从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    wait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">synchronized&#123;</span><br><span class=\"line\">    notify();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).<br>才能继续运行剩余的代码块。<br>值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。</p>\n<h2 id=\"线程中的异常\"><a href=\"#线程中的异常\" class=\"headerlink\" title=\"线程中的异常\"></a>线程中的异常</h2><p>java异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。<br>每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。</p>\n<h2 id=\"新类库中的构件\"><a href=\"#新类库中的构件\" class=\"headerlink\" title=\"新类库中的构件\"></a>新类库中的构件</h2><p>我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。<br>   java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看<think in java>中的总结。</p>\n<p>CountDownLatch<br>它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。<br>它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。</p>\n<p>CyclicBarrier<br>和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行）</p>\n<p>Semaphore<br>正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。</p>\n<p>Exchanger<br>从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。<br><img src=\"/images/w.png\"></p>\n<p>乐观锁<br>在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。</p>\n<h2 id=\"android中的线程解决方案\"><a href=\"#android中的线程解决方案\" class=\"headerlink\" title=\"android中的线程解决方案\"></a>android中的线程解决方案</h2><p>在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，<br>包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。<br>具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。</p>\n"},{"title":"我所理解的java反射","date":"2016-04-20T11:24:29.000Z","_content":"## 为什么要使用反射\n   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。\n   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。\n\n## Class\n\n一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。\n\n{%codeblock%}\n1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。\n2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查\n{%endcodeblock%}\n值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。\n使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。\n\n 泛型和Class注意点\n 假设 存在 父类 Father\n 子类 Child extends father\n{%codeblock%}\nClass<Child> c=Child.classm\n{%endcodeblock%}\n因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。\n\n## isInstance 和 isInstanceOf\nisInstanceOf和isInstance这两个方法都是用来确定对象的类型。\n但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。\n用法也稍微也不同\n{%codeblock%}\nA a = new A();\na.instanceOf A; //true\na.getClass().instance(A);//true\n{%endcodeblock%}\n值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf\n## 动态代理\n代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。\n在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。\n\n{%codeblock%}\npublic List getList(final List list){\n    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] { List.class}\n                                 new InvocationHanler(){\n                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable{\n                                             if(\"add\".equals(method.getName())){\n                                                 throw new UnsupportdOperationException();\n                                             }else{\n                                                 return method.invoke(list,args);\n                                             }\n                                         }\n                                     }                               );}\n{%endcodeblock%}\n上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。\n例子来自（http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\n## 反射的危害\n事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。\n但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。\n","source":"_posts/RIIT.md","raw":"---\ntitle: 我所理解的java反射\ndate: 2016-04-20 19:24:29\ntags: java reflection\n---\n## 为什么要使用反射\n   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。\n   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。\n\n## Class\n\n一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。\n\n{%codeblock%}\n1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。\n2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查\n{%endcodeblock%}\n值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。\n使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。\n\n 泛型和Class注意点\n 假设 存在 父类 Father\n 子类 Child extends father\n{%codeblock%}\nClass<Child> c=Child.classm\n{%endcodeblock%}\n因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。\n\n## isInstance 和 isInstanceOf\nisInstanceOf和isInstance这两个方法都是用来确定对象的类型。\n但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。\n用法也稍微也不同\n{%codeblock%}\nA a = new A();\na.instanceOf A; //true\na.getClass().instance(A);//true\n{%endcodeblock%}\n值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf\n## 动态代理\n代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。\n在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。\n\n{%codeblock%}\npublic List getList(final List list){\n    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] { List.class}\n                                 new InvocationHanler(){\n                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable{\n                                             if(\"add\".equals(method.getName())){\n                                                 throw new UnsupportdOperationException();\n                                             }else{\n                                                 return method.invoke(list,args);\n                                             }\n                                         }\n                                     }                               );}\n{%endcodeblock%}\n上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。\n例子来自（http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\n## 反射的危害\n事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。\n但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。\n","slug":"RIIT","published":1,"updated":"2019-06-25T00:00:59.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kcu0007wk008kxltwu0","content":"<h2 id=\"为什么要使用反射\"><a href=\"#为什么要使用反射\" class=\"headerlink\" title=\"为什么要使用反射\"></a>为什么要使用反射</h2><p>   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。<br>   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。</p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。</span><br><span class=\"line\">2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查</span><br></pre></td></tr></table></figure>\n<p>值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。<br>使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。</p>\n<p> 泛型和Class注意点<br> 假设 存在 父类 Father<br> 子类 Child extends father<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Child&gt; c=Child.classm</span><br></pre></td></tr></table></figure><br>因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。</p>\n<h2 id=\"isInstance-和-isInstanceOf\"><a href=\"#isInstance-和-isInstanceOf\" class=\"headerlink\" title=\"isInstance 和 isInstanceOf\"></a>isInstance 和 isInstanceOf</h2><p>isInstanceOf和isInstance这两个方法都是用来确定对象的类型。<br>但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。<br>用法也稍微也不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = new A();</span><br><span class=\"line\">a.instanceOf A; //true</span><br><span class=\"line\">a.getClass().instance(A);//true</span><br></pre></td></tr></table></figure><br>值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。<br>在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List getList(final List list)&#123;</span><br><span class=\"line\">    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] &#123; List.class&#125;</span><br><span class=\"line\">                                 new InvocationHanler()&#123;</span><br><span class=\"line\">                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable&#123;</span><br><span class=\"line\">                                             if(&quot;add&quot;.equals(method.getName()))&#123;</span><br><span class=\"line\">                                                 throw new UnsupportdOperationException();</span><br><span class=\"line\">                                             &#125;else&#123;</span><br><span class=\"line\">                                                 return method.invoke(list,args);</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;                               );&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。<br>例子来自（<a href=\"http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）</a></p>\n<h2 id=\"反射的危害\"><a href=\"#反射的危害\" class=\"headerlink\" title=\"反射的危害\"></a>反射的危害</h2><p>事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。<br>但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。</p>\n","excerpt":"","more":"<h2 id=\"为什么要使用反射\"><a href=\"#为什么要使用反射\" class=\"headerlink\" title=\"为什么要使用反射\"></a>为什么要使用反射</h2><p>   在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。<br>   在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。</p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Class.forname(className);  //可以不是使用对象，拿到这个类的Class引用。</span><br><span class=\"line\">2、Class name = name.class;   //类字面常量生成Class引用。在编译时就会受到检查</span><br></pre></td></tr></table></figure>\n<p>值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。<br>使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。</p>\n<p> 泛型和Class注意点<br> 假设 存在 父类 Father<br> 子类 Child extends father<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Child&gt; c=Child.classm</span><br></pre></td></tr></table></figure><br>因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。</p>\n<h2 id=\"isInstance-和-isInstanceOf\"><a href=\"#isInstance-和-isInstanceOf\" class=\"headerlink\" title=\"isInstance 和 isInstanceOf\"></a>isInstance 和 isInstanceOf</h2><p>isInstanceOf和isInstance这两个方法都是用来确定对象的类型。<br>但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。<br>用法也稍微也不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = new A();</span><br><span class=\"line\">a.instanceOf A; //true</span><br><span class=\"line\">a.getClass().instance(A);//true</span><br></pre></td></tr></table></figure><br>值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。<br>在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List getList(final List list)&#123;</span><br><span class=\"line\">    return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] &#123; List.class&#125;</span><br><span class=\"line\">                                 new InvocationHanler()&#123;</span><br><span class=\"line\">                                         public Object invoke(Object proxy, Method method Object[] args) throws Throwable&#123;</span><br><span class=\"line\">                                             if(&quot;add&quot;.equals(method.getName()))&#123;</span><br><span class=\"line\">                                                 throw new UnsupportdOperationException();</span><br><span class=\"line\">                                             &#125;else&#123;</span><br><span class=\"line\">                                                 return method.invoke(list,args);</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;                               );&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。<br>例子来自（<a href=\"http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）\">http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy）</a></p>\n<h2 id=\"反射的危害\"><a href=\"#反射的危害\" class=\"headerlink\" title=\"反射的危害\"></a>反射的危害</h2><p>事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。<br>但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。</p>\n"},{"title":"tree","date":"2016-05-31T05:44:28.000Z","_content":"## 前言\n　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。\n\n## 数据结构\n　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用\n\n{%codeblock%}\npublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\n{%endcodeblock%}\n\n## 二叉树的建立\n　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用\"-1\"表示（貌似很多教材都用'＃'表示）。\n{%codeblock%}\npublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\n{%endcodeblock%}\n## 二叉树的遍历\n　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，\n{% img /images/tree.png%}\n\n标注为１的，是前序遍历\n标注为2的，是中序遍历\n标注为3的，是后序遍历\n\n还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。\n总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)\n下面是我写的非递归前序遍历。\n{%codeblock%}\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n{%endcodeblock%}\n\n层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。\n{%codeblock%}\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n{%endcodeblock%}\n\n## 其他\n树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。\n\n## 练习代码　拿出来献丑了\n\n{%codeblock%}\n\npackage com.may.eighteen;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n\tpublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\tstatic int[] nums = {-1,1,2,3,4,5,6,7,8,9};\n\tpublic static void main(String args[]){\n\t\tSolution s = new Solution();\n\t\tNode root = s.buildTree(nums,1);\n\t\tSystem.out.print(\"-----hello----\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.queueOrder(root);\n\t\tSystem.out.println(\"\");\n\t\tSystem.out.print(s.findNodeCount(root));\n\t\t\n\t}\n\t\n\tpublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\t\n\n\t\n\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root){\n\t\tif(root == null) return;\n\t\t\n\t\t\n\t}\n\t\n\t\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n\t\n\tvoid preorder(Node root){\n\t\tif(root == null) return;\n\t\tSystem.out.print(root.val + \"---\");\n\t\tpreorder(root.left);\n\t\tpreorder(root.right);\n\t}\n\t\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t\n   int findNodeCount(Node root){\n\t\tif(root == null){return 0;}\n\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;\n\t}\n\t\n}\n\n{%endcodeblock%}\n\n\n\n","source":"_posts/tree.md","raw":"---\ntitle: tree\ndate: 2016-05-31 13:44:28\ntags: data struct \n---\n## 前言\n　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。\n\n## 数据结构\n　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用\n\n{%codeblock%}\npublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\n{%endcodeblock%}\n\n## 二叉树的建立\n　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用\"-1\"表示（貌似很多教材都用'＃'表示）。\n{%codeblock%}\npublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\n{%endcodeblock%}\n## 二叉树的遍历\n　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，\n{% img /images/tree.png%}\n\n标注为１的，是前序遍历\n标注为2的，是中序遍历\n标注为3的，是后序遍历\n\n还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。\n总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)\n下面是我写的非递归前序遍历。\n{%codeblock%}\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n{%endcodeblock%}\n\n层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。\n{%codeblock%}\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n{%endcodeblock%}\n\n## 其他\n树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。\n\n## 练习代码　拿出来献丑了\n\n{%codeblock%}\n\npackage com.may.eighteen;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class Solution {\n\n\tpublic static class Node{\n\t\tpublic Node left;\n\t\tpublic Node right;\n\t\tpublic int val;\n\t}\n\tstatic int[] nums = {-1,1,2,3,4,5,6,7,8,9};\n\tpublic static void main(String args[]){\n\t\tSolution s = new Solution();\n\t\tNode root = s.buildTree(nums,1);\n\t\tSystem.out.print(\"-----hello----\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.preorder(root);\n\t\tSystem.out.println(\"\");\n\t\ts.queueOrder(root);\n\t\tSystem.out.println(\"\");\n\t\tSystem.out.print(s.findNodeCount(root));\n\t\t\n\t}\n\t\n\tpublic  Node buildTree(int[] nums,int i) {\n\t\t// TODO Auto-generated method stub\n\t\tif(i > nums.length -1){\n\t\t\treturn null;\n\t\t}\n\t\tif(nums[i]== -1 ){\n\t\t\treturn null;\n\t\t}\n\t\n\t\tNode n  = new Node();\n\t\tn.val = nums[i];\n\t\tn.left = buildTree(nums, 2*i);\n\t\tn.right = buildTree(nums, 2*i+1);\n\t\treturn n;\n\t}\n\t\n\n\t\n\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root){\n\t\tif(root == null) return;\n\t\t\n\t\t\n\t}\n\t\n\t\n\tvoid queueOrder(Node root){\n\t\tList<Node> l = new ArrayList<Node>();\n\t\tl.add(root);\n\t\t\n\t\twhile(l.size() != 0){\n\t\t\tNode n=l.remove(0);\n\t\t\tSystem.out.print(\"  \" + n.val);\n\t\t\tif(n.left != null) l.add(n.left);\n\t\t\tif(n.right != null) l.add(n.right);\n\t\t}\n\t}\n\t\n\tvoid preorder(Node root){\n\t\tif(root == null) return;\n\t\tSystem.out.print(root.val + \"---\");\n\t\tpreorder(root.left);\n\t\tpreorder(root.right);\n\t}\n\t\n\tvoid preorder2(Node root){\n\t\tStack<Node> s = new Stack<Node>();\n        \n\t\twhile(root !=null || !s.isEmpty()){\n\t\t\twhile(root!= null){\n\t\t\t\ts.push(root);\n\t\t\t\tSystem.out.print(root.val + \"--->\");\n\t\t\t}\n\t\t\tif(!s.isEmpty() && root == null){\n\t\t\t\troot=s.pop();\n\t\t\t\troot=root.right;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t\n   int findNodeCount(Node root){\n\t\tif(root == null){return 0;}\n\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;\n\t}\n\t\n}\n\n{%endcodeblock%}\n\n\n\n","slug":"tree","published":1,"updated":"2019-06-25T00:00:59.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kd30009wk00l1ms69yw","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树的建立\"><a href=\"#二叉树的建立\" class=\"headerlink\" title=\"二叉树的建立\"></a>二叉树的建立</h2><p>　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用”-1”表示（貌似很多教材都用’＃’表示）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，<br><img src=\"/images/tree.png\"></p>\n<p>标注为１的，是前序遍历<br>标注为2的，是中序遍历<br>标注为3的，是后序遍历</p>\n<p>还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。<br>总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)<br>下面是我写的非递归前序遍历。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void preorder2(Node root)&#123;</span><br><span class=\"line\">\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">       </span><br><span class=\"line\">\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\troot=root.right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void queueOrder(Node root)&#123;</span><br><span class=\"line\">\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\tl.add(root);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。</p>\n<h2 id=\"练习代码-拿出来献丑了\"><a href=\"#练习代码-拿出来献丑了\" class=\"headerlink\" title=\"练习代码　拿出来献丑了\"></a>练习代码　拿出来献丑了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.may.eighteen;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic int[] nums = &#123;-1,1,2,3,4,5,6,7,8,9&#125;;</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tSolution s = new Solution();</span><br><span class=\"line\">\t\tNode root = s.buildTree(nums,1);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;-----hello----&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.queueOrder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\tSystem.out.print(s.findNodeCount(root));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid queueOrder(Node root)&#123;</span><br><span class=\"line\">\t\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\t\tl.add(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\tSystem.out.print(root.val + &quot;---&quot;);</span><br><span class=\"line\">\t\tpreorder(root.left);</span><br><span class=\"line\">\t\tpreorder(root.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder2(Node root)&#123;</span><br><span class=\"line\">\t\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\t\troot=root.right;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">   int findNodeCount(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null)&#123;return 0;&#125;</span><br><span class=\"line\">\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>　　好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>　　二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树的建立\"><a href=\"#二叉树的建立\" class=\"headerlink\" title=\"二叉树的建立\"></a>二叉树的建立</h2><p>　二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用”-1”表示（貌似很多教材都用’＃’表示）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>　　　二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图，<br><img src=\"/images/tree.png\"></p>\n<p>标注为１的，是前序遍历<br>标注为2的，是中序遍历<br>标注为3的，是后序遍历</p>\n<p>还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。<br>总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)<br>下面是我写的非递归前序遍历。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void preorder2(Node root)&#123;</span><br><span class=\"line\">\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">       </span><br><span class=\"line\">\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\troot=root.right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置　０　不存放。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void queueOrder(Node root)&#123;</span><br><span class=\"line\">\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\tl.add(root);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。</p>\n<h2 id=\"练习代码-拿出来献丑了\"><a href=\"#练习代码-拿出来献丑了\" class=\"headerlink\" title=\"练习代码　拿出来献丑了\"></a>练习代码　拿出来献丑了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.may.eighteen;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static class Node&#123;</span><br><span class=\"line\">\t\tpublic Node left;</span><br><span class=\"line\">\t\tpublic Node right;</span><br><span class=\"line\">\t\tpublic int val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatic int[] nums = &#123;-1,1,2,3,4,5,6,7,8,9&#125;;</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tSolution s = new Solution();</span><br><span class=\"line\">\t\tNode root = s.buildTree(nums,1);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;-----hello----&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.preorder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\ts.queueOrder(root);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&quot;);</span><br><span class=\"line\">\t\tSystem.out.print(s.findNodeCount(root));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic  Node buildTree(int[] nums,int i) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tif(i &gt; nums.length -1)&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(nums[i]== -1 )&#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tNode n  = new Node();</span><br><span class=\"line\">\t\tn.val = nums[i];</span><br><span class=\"line\">\t\tn.left = buildTree(nums, 2*i);</span><br><span class=\"line\">\t\tn.right = buildTree(nums, 2*i+1);</span><br><span class=\"line\">\t\treturn n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void buileTree(int[] preOrder, int[] inOrder, Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid queueOrder(Node root)&#123;</span><br><span class=\"line\">\t\tList&lt;Node&gt; l = new ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\t\tl.add(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\twhile(l.size() != 0)&#123;</span><br><span class=\"line\">\t\t\tNode n=l.remove(0);</span><br><span class=\"line\">\t\t\tSystem.out.print(&quot;  &quot; + n.val);</span><br><span class=\"line\">\t\t\tif(n.left != null) l.add(n.left);</span><br><span class=\"line\">\t\t\tif(n.right != null) l.add(n.right);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null) return;</span><br><span class=\"line\">\t\tSystem.out.print(root.val + &quot;---&quot;);</span><br><span class=\"line\">\t\tpreorder(root.left);</span><br><span class=\"line\">\t\tpreorder(root.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid preorder2(Node root)&#123;</span><br><span class=\"line\">\t\tStack&lt;Node&gt; s = new Stack&lt;Node&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\twhile(root !=null || !s.isEmpty())&#123;</span><br><span class=\"line\">\t\t\twhile(root!= null)&#123;</span><br><span class=\"line\">\t\t\t\ts.push(root);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(root.val + &quot;---&gt;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(!s.isEmpty() &amp;&amp; root == null)&#123;</span><br><span class=\"line\">\t\t\t\troot=s.pop();</span><br><span class=\"line\">\t\t\t\troot=root.right;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">   int findNodeCount(Node root)&#123;</span><br><span class=\"line\">\t\tif(root == null)&#123;return 0;&#125;</span><br><span class=\"line\">\t\treturn findNodeCount(root.left) + findNodeCount(root.right) +1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"String","date":"2016-04-19T09:50:05.000Z","_content":"##  我对java String的理解 \n在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。\n## String的不可变性\n在java设计中，String类型是不可变的。如\n{%codeblock%}\n   String s1 = \"abc\";\n   String s2 = s1.toUpperCase();\n{%endcodeblock%}\n   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。\n\n## String的 + \n大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号\n\n在日常程序编写中，我是经常会编写字符串拼接的程序。如\n String s  = \"I\"+\"love\"+\"CS\";\n 按照String不变性在推测，是不是在生成新的s时，\n 第一步：新生成\"Ilove\"对象\n 第二部：生成\"IloveCS\"对象\n 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。\n\n 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。\n 上述过程，最终实现优化后，差不多如下\n {%codeblock%}\n StringBuilder sb  = new StringBuilder();\n sb.append(\"I\");\n sb.append(\"love\");\n sb.append(\"CS\");\n String s = sb.toString();\n{%endcodeblock%}\n 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。\n\n ## String 存储\n String是一个非常有意思的类。在内存中存储的方式不同\n 当String s1= \"abc\" 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。\n\n {%codeblock%}\n String s2 = \"a\";\n String s3 = \"a\";\n s2 == s3 //  true\n{%endcodeblock%}\n 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）\n\n {%codeblock%}\n String s4 = new String(\"abc\");是生成在堆内存中。\n String s5 = new String(\"abc\");\n s4 == s5 //false\n{%endcodeblock%}\nString s6 = \"abc\" + new String(\"cde\"); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。\n\n\n\n","source":"_posts/我对java-String的理解.md","raw":"---\ntitle: String\ndate: 2016-04-19 17:50:05\ntags: java\n---\n##  我对java String的理解 \n在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。\n## String的不可变性\n在java设计中，String类型是不可变的。如\n{%codeblock%}\n   String s1 = \"abc\";\n   String s2 = s1.toUpperCase();\n{%endcodeblock%}\n   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。\n\n## String的 + \n大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号\n\n在日常程序编写中，我是经常会编写字符串拼接的程序。如\n String s  = \"I\"+\"love\"+\"CS\";\n 按照String不变性在推测，是不是在生成新的s时，\n 第一步：新生成\"Ilove\"对象\n 第二部：生成\"IloveCS\"对象\n 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。\n\n 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。\n 上述过程，最终实现优化后，差不多如下\n {%codeblock%}\n StringBuilder sb  = new StringBuilder();\n sb.append(\"I\");\n sb.append(\"love\");\n sb.append(\"CS\");\n String s = sb.toString();\n{%endcodeblock%}\n 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。\n\n ## String 存储\n String是一个非常有意思的类。在内存中存储的方式不同\n 当String s1= \"abc\" 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。\n\n {%codeblock%}\n String s2 = \"a\";\n String s3 = \"a\";\n s2 == s3 //  true\n{%endcodeblock%}\n 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）\n\n {%codeblock%}\n String s4 = new String(\"abc\");是生成在堆内存中。\n String s5 = new String(\"abc\");\n s4 == s5 //false\n{%endcodeblock%}\nString s6 = \"abc\" + new String(\"cde\"); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。\n\n\n\n","slug":"我对java-String的理解","published":1,"updated":"2019-06-25T00:00:59.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxi82kd5000bwk0057gpb3mp","content":"<h2 id=\"我对java-String的理解\"><a href=\"#我对java-String的理解\" class=\"headerlink\" title=\"我对java String的理解\"></a>我对java String的理解</h2><p>在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。</p>\n<h2 id=\"String的不可变性\"><a href=\"#String的不可变性\" class=\"headerlink\" title=\"String的不可变性\"></a>String的不可变性</h2><p>在java设计中，String类型是不可变的。如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = s1.toUpperCase();</span><br></pre></td></tr></table></figure><br>   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。</p>\n<h2 id=\"String的\"><a href=\"#String的\" class=\"headerlink\" title=\"String的 +\"></a>String的 +</h2><p>大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号</p>\n<p>在日常程序编写中，我是经常会编写字符串拼接的程序。如<br> String s  = “I”+”love”+”CS”;<br> 按照String不变性在推测，是不是在生成新的s时，<br> 第一步：新生成”Ilove”对象<br> 第二部：生成”IloveCS”对象<br> 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。</p>\n<p> 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。<br> 上述过程，最终实现优化后，差不多如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb  = new StringBuilder();</span><br><span class=\"line\">sb.append(&quot;I&quot;);</span><br><span class=\"line\">sb.append(&quot;love&quot;);</span><br><span class=\"line\">sb.append(&quot;CS&quot;);</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure><br> 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。</p>\n<h2 id=\"String-存储\"><a href=\"#String-存储\" class=\"headerlink\" title=\"String 存储\"></a>String 存储</h2><p> String是一个非常有意思的类。在内存中存储的方式不同<br> 当String s1= “abc” 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;a&quot;;</span><br><span class=\"line\">s2 == s3 //  true</span><br></pre></td></tr></table></figure>\n<p> 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = new String(&quot;abc&quot;);是生成在堆内存中。</span><br><span class=\"line\">String s5 = new String(&quot;abc&quot;);</span><br><span class=\"line\">s4 == s5 //false</span><br></pre></td></tr></table></figure>\n<p>String s6 = “abc” + new String(“cde”); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。</p>\n","excerpt":"","more":"<h2 id=\"我对java-String的理解\"><a href=\"#我对java-String的理解\" class=\"headerlink\" title=\"我对java String的理解\"></a>我对java String的理解</h2><p>在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。</p>\n<h2 id=\"String的不可变性\"><a href=\"#String的不可变性\" class=\"headerlink\" title=\"String的不可变性\"></a>String的不可变性</h2><p>在java设计中，String类型是不可变的。如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = s1.toUpperCase();</span><br></pre></td></tr></table></figure><br>   实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。</p>\n<h2 id=\"String的\"><a href=\"#String的\" class=\"headerlink\" title=\"String的 +\"></a>String的 +</h2><p>大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号</p>\n<p>在日常程序编写中，我是经常会编写字符串拼接的程序。如<br> String s  = “I”+”love”+”CS”;<br> 按照String不变性在推测，是不是在生成新的s时，<br> 第一步：新生成”Ilove”对象<br> 第二部：生成”IloveCS”对象<br> 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。</p>\n<p> 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。<br> 上述过程，最终实现优化后，差不多如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb  = new StringBuilder();</span><br><span class=\"line\">sb.append(&quot;I&quot;);</span><br><span class=\"line\">sb.append(&quot;love&quot;);</span><br><span class=\"line\">sb.append(&quot;CS&quot;);</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure><br> 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。</p>\n<h2 id=\"String-存储\"><a href=\"#String-存储\" class=\"headerlink\" title=\"String 存储\"></a>String 存储</h2><p> String是一个非常有意思的类。在内存中存储的方式不同<br> 当String s1= “abc” 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;a&quot;;</span><br><span class=\"line\">s2 == s3 //  true</span><br></pre></td></tr></table></figure>\n<p> 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s4 = new String(&quot;abc&quot;);是生成在堆内存中。</span><br><span class=\"line\">String s5 = new String(&quot;abc&quot;);</span><br><span class=\"line\">s4 == s5 //false</span><br></pre></td></tr></table></figure>\n<p>String s6 = “abc” + new String(“cde”); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。</p>\n"},{"title":"服务的搭建及其演变(1) -简单的单点服务搭建","date":"2019-06-27T16:00:00.000Z","_content":"\n# 服务的搭建及其演变 -简单的单点服务搭建\n\n在日常构建webapp应用中，最常见的就是一个代码模块，依赖一个数据库的架构。这里以一个简单的点赞系统来介绍架构是怎么一步一步由简单变得复杂的。 为了更好的在单机模拟分布式环境，也为了后续的方便部署，这里引入的了docker。\n\n{% img /images/1_webapp_struct_1.png%}\n上图是最简单 webapp 依赖单db的架构图\n\n## 本节相关工具\n  - golang : 一种接近于c的编程语言。在开发难度和性能上做到了比较好的平衡。采用协程+管道的设计，天然较好地支撑了并发,是目前较火的编程语言,这里主要用于编写代码逻辑。\n  - mysql  :  老牌的开源数据库,这里用于数据的持久化存储。\n  - docker ： 近年较火的容器，主要综合和标准化了linux 下的namespace 和 cgroup 技术，并提供相应的手脚架和多种丰富的镜像用于环境的快速部署，资源隔离。本文主要用docker来进行环境的搭建和分布式的模拟\n      下面简单了解下docker比较重要的概念\n1. 镜像 : 打包好的软件合集，是创建容器的模板\n2. 容器 ：主要运行时候的实体，和镜像类似于 类和对象的关系\n3. 仓库 ：镜像市场，可以在上面下载到各种各样的镜像\n\n 上面的解释纯基于我个人理解，如果有不到位的地方请谅解,相关工具的使用方法，我会在使用中说清楚。具体的深度使用细节，可以参考相关的专业书籍。\n\n## 开始搭建\n实验环境主要分为以下几步：\n- docker,go 环境的安装，此类教程网上很多，这里就不在赘述\n- 基于docker 的mysql 环境搭建\n- app代码的编写\n- 基于docker的app部署\n### 基于docker的mysql 环境搭建\n#### 数据库的搭建\n``shell\nocker network create front\n``\n创建基于bridge模式名称为front的网络，后面我们会将所有部署的docker 容器添加进来\n\n```shell\n  docker run -d --name mysql -p 3306:3306  --env MYSQL_ROOT_PASSWORD=123456 --network front mysql\n```\n分析下这条docker命令的构成:\n\n- docker run 是启动一个容器的命令\n- -d 参数指明是后台运行此容器\n- --name 是给容器命名，这里叫做 mysql\n- -p 指明的是容器内端口和宿主机器端口的相互映映射,这里将宿主 3306  端口映射到容器的3306端口,一般mysql服务都使用3306端口\n- --network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中\n- mysql 这个表明要在哪个镜像上创建容器，这里选择的是mysql的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载\n\n- --env 参数表面要设置的环境变量，采用的是key=value的参数形式，我们这里把mysql root 的密码设置为 123456\n\t  \n输入 `docker containers ls -a `\n\t  \n{% img /images/1_docker_show.png%}\n\t  \n看到我们的mysql容器已经搭建完成\n#### 数据库管理员及表结构的创建\n```shell\n mysql  -h127.0.0.1 -P3306 -uroot -p123456\n```\n在我们的宿主机器上登录我们的mysql，如果你的宿主机器内没有mysql 客户端，也可以用如下命令登录 mysql 容器内，进行mysql的管理\n```\n   docker exec -it  mysql /bin/bash\n```\n执行下面sql语句\n```sql\ncreate database praise;\n```\n创建一个点赞数据库\n\n```sql\nCREATE USER 'test'@'%' IDENTIFIED BY 'test';\nGRANT ALL ON *.* TO 'test'@'%';\n```\n创建一个用户名和密码都是 test 的账号,并给此账号赋予最高权限\n\n\n```sql\nALTER USER 'test'@'%' IDENTIFIED WITH mysql_native_password BY 'test';\n```\n更改这个用户的验证方式，这一步的目的主要是解决某些低版本的mysql客户端验证不通过的问题。\n\n```sql\nCREATE TABLE `praise_count` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n `resource_id` bigint(20) NOT NULL DEFAULT '0' COMMENT '资源id',\n `count` bigint(20) NOT NULL DEFAULT '0' COMMENT '次数',\n `ctime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',\n `mtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'modify time',\n PRIMARY KEY (`id`),\n UNIQUE KEY `resource_id` (`resource_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1968180 DEFAULT CHARSET=latin1 COLLATE=latin1_bin ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8 COMMENT='praise_count'\n\n```\n创建 点赞 数据表结构\n&emsp;\n**到这里，我们一个可用于项目的数据库已经搭建完成**\n&emsp;\n*本教程放在真正的生产环境中需要注意的是：*\n1. docker并不适用存储类的服务，存储类服务一般都占用大量磁盘，难以迁移没有必要部署在容器中。这里只是方便搭建环境，所以采用。\n2. 数据库的账号给予权限过高，密码过于简单，存在安全风险。\n\n\n## app 代码的编写\n这里的app相对比较简单，只实现两个接口。\n```\n/praise/set?resource_id={int}\n  点赞次数自增\n/praise/get?resource_id={int}\n  查询点赞次数\n\nresource_id get参数，传入点赞资源的唯一id\n```\n本项目除了依赖mysql的驱动，其余都使用go的原生工具\n```shell\ngo get -u github.com/go-sql-driver/mysql\n#安装go 的mysql驱动\n```\n下面进入代码\n```go\npackage main\n\nimport (\n        \"database/sql\"\n        \"encoding/json\"\n        \"flag\"\n        \"fmt\"\n        \"io\"\n        \"log\"\n        \"net/http\"\n        \"strconv\"\n\n        _ \"github.com/go-sql-driver/mysql\"\n)\n\n//c/s协议返回的json的结构体\n// {\n//    errno : -1/0, 错误码，0代表正常\n//    errmsg: \"\" , 错误信息\n//    data : {\n//             resourceID : 111, 资源id，用于表示唯一的一条资源\n//             count      : 1 ,  此资源被点赞的次数\n//             Ctime      : 1231231, 此项被创建的时间\n//  }\n//\n\ntype Response struct {\n        Errno  int    `json:\"errno\"`\n        ErrMsg string `json:\"errmsg\"`\n        Data   *Item  `json:\"data\"`\n}\ntype Item struct {\n        ResourceID int64 `json:\"resourceID\"`\n        Count      int64 `json:\"count\"`\n        Ctime      int64 `json:\"ctime\"`\n}\n// 数据库地址\nvar dbAddr string\n// 数据库端口\nvar port int\n\nfunc init() {\n         // 主要是用于支持可自定义传入数据库的地址和端口号\n\t\t // 例如 go run main.go -mysql=mysql -port=3304 将数据库地址和端口号传入。此处也写有默认值\n        flag.StringVar(&dbAddr, \"mysql\", \"mysql\", \"please input your mysql address,exp : 127.0.0.1\")\n        flag.IntVar(&port, \"port\", 3306, \"please input your mysql port,exp : 3304\")\n}\n//测试接口\nfunc HelloServer(w http.ResponseWriter, req *http.Request) {\n        io.WriteString(w, \"hello, world!\\n\")\n}\n\nfunc main() {\n        //命令端参数接解析\n        flag.Parse()\n        log.Println(\"server init\")\n\t\t//注册三个接口，分别是 服务器测试接口，点赞接口，和点赞数获取接口\n        http.HandleFunc(\"/hello\", HelloServer)\n        http.HandleFunc(\"/praise/get\", getPrasieCount)\n        http.HandleFunc(\"/praise/set\", setPrasieCount)\n        log.Println(\"server start\")\n\t\t//启动服务器，并监听80端口\n        log.Fatal(http.ListenAndServe(\":80\", nil))\n}\n\n// 获取点赞数，主要逻辑\nfunc getPrasieCount(w http.ResponseWriter, req *http.Request) {\n        resourceID, err := getResourceIDFromGet(req)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n\n        dbOpenCommand := fmt.Sprintf(\"test:test@tcp(%s:%d)/praise?charset=utf8\", dbAddr, port)\n        db, err := sql.Open(\"mysql\", dbOpenCommand)\n\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        defer db.Close()\n\n        sql := fmt.Sprintf(\"select count,ctime from praise_count where resource_id = %d\", resourceID)\n        rows, sqlerr := db.Query(sql)\n        if sqlerr != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", sqlerr))\n                return\n        }\n\n        defer rows.Close()\n        res := Response{Errno: 0}\n        var count, ctime int64\n        if rows.Next() {\n                rows.Scan(&count, &ctime)\n        }\n        res.Data = &Item{ResourceID: resourceID, Count: count, Ctime: ctime}\n\n        retBytes, _ := json.Marshal(res)\n\n        io.WriteString(w, string(retBytes))\n\n}\n//添加点赞数\nfunc setPrasieCount(w http.ResponseWriter, req *http.Request) {\n        resourceID, err := getResourceIDFromGet(req)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n\n        dbOpenCommand := fmt.Sprintf(\"test:test@tcp(%s:%d)/praise?charset=utf8\", dbAddr, port)\n        db, err := sql.Open(\"mysql\", dbOpenCommand)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        defer db.Close()\n        sql := fmt.Sprintf(\"INSERT INTO praise_count  (resource_id,count ) VALUES (%d,1) ON DUPLICATE key UPDATE count=count+1\", resourceID)\n        _, err = db.Query(sql)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        retBytes, _ := json.Marshal(Response{Errno: 0})\n        io.WriteString(w, string(retBytes))\n\n}\n\n//错误处理\nfunc returnErrMsg(w http.ResponseWriter, errno int, errmsg string) {\n\n        retBytes, _ := json.Marshal(Response{Errno: errno, ErrMsg: errmsg})\n        io.WriteString(w, string(retBytes))\n}\n//解析get参数，获取资源ID\nfunc getResourceIDFromGet(req *http.Request) (int64, error) {\n        vars := req.URL.Query()\n        resourceIDStr := vars.Get(\"resource_id\")\n        resourceID, err := strconv.ParseInt(resourceIDStr, 10, 64)\n        return resourceID, err\n}\n```\n\n一个可以上线的代码已经编写完成。接下，将其打包到docker里。你可以想象，docker就是我们的一个服务器，或者是一个pass平台\n\n``` shell\n#启动docker的命令\ndocker run -d -p 8080:80 -v $HOME/cluster-build/chapter_1/src/go/webapp:/go/src/webapp -v $HOME/cluster-build/chapter_1/src/sh:/sh --network front golang sh /sh/start.sh\n```\n这个docker run 命令较为复杂,很多参数的含义我们在上面已经介绍过了，我们介绍没有见过的吧\n\n- -v 文件挂载，将宿主机器上的文件挂载到容器中。其中我们把宿主机器的$HOME/cluster-build/chapter_1/src/go/webapp和 $HOME/cluster-build/chapter_1/src/sh文件夹分别映射到容器/go/src/webapp /sh下。多个 -v 参数可以进行多次映射。\n- --network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中，和mysql处于同一个网络中，方便通讯\n- golang 这个表明要在哪个镜像上创建容器，这里选择的是golang的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载\n- sh start.sh 后置命令，当容器创建完成是，执行这个命令，这里执行一个手写的脚本\n\nstart.sh 这个后置脚本主要做两件事情：\n1. 下载相关的依赖\n2. 将服务启动\n```shell\ngo get -u github.com/go-sql-driver/mysql  &&  go run /go/src/webapp/main.go\n```\n大家看到 上面的挂载命令很复杂，一般大家都会把自己基于golang镜像，再打包出一个新的镜像。这里我们为了直观和方便调试，先采用这种方式进行挂载。后面，我们会用docker-compose 来管理所有的docker容器。\n\n# 结果验证\n  \n   用curl来访问我们期待的服务,资源id 为1 ，先访问 set 接口，在访问 set接口，结果为：\n- set 接口请求示例\n\n{% img /images/1_web_set.png%}\n- get 接口请求示例\n{% img /images/1_web_get.png%}\n\n到这里，最简单的单点服务就已经完成.\n","source":"_posts/server_1.md","raw":"---\ntitle: 服务的搭建及其演变(1) -简单的单点服务搭建\ndate: 2019-06-28 00:00:00\ncategories:\n       - 编程\ntags:\n     - webapp\n     - docker \n     - mysql \n     - golang\n---\n\n# 服务的搭建及其演变 -简单的单点服务搭建\n\n在日常构建webapp应用中，最常见的就是一个代码模块，依赖一个数据库的架构。这里以一个简单的点赞系统来介绍架构是怎么一步一步由简单变得复杂的。 为了更好的在单机模拟分布式环境，也为了后续的方便部署，这里引入的了docker。\n\n{% img /images/1_webapp_struct_1.png%}\n上图是最简单 webapp 依赖单db的架构图\n\n## 本节相关工具\n  - golang : 一种接近于c的编程语言。在开发难度和性能上做到了比较好的平衡。采用协程+管道的设计，天然较好地支撑了并发,是目前较火的编程语言,这里主要用于编写代码逻辑。\n  - mysql  :  老牌的开源数据库,这里用于数据的持久化存储。\n  - docker ： 近年较火的容器，主要综合和标准化了linux 下的namespace 和 cgroup 技术，并提供相应的手脚架和多种丰富的镜像用于环境的快速部署，资源隔离。本文主要用docker来进行环境的搭建和分布式的模拟\n      下面简单了解下docker比较重要的概念\n1. 镜像 : 打包好的软件合集，是创建容器的模板\n2. 容器 ：主要运行时候的实体，和镜像类似于 类和对象的关系\n3. 仓库 ：镜像市场，可以在上面下载到各种各样的镜像\n\n 上面的解释纯基于我个人理解，如果有不到位的地方请谅解,相关工具的使用方法，我会在使用中说清楚。具体的深度使用细节，可以参考相关的专业书籍。\n\n## 开始搭建\n实验环境主要分为以下几步：\n- docker,go 环境的安装，此类教程网上很多，这里就不在赘述\n- 基于docker 的mysql 环境搭建\n- app代码的编写\n- 基于docker的app部署\n### 基于docker的mysql 环境搭建\n#### 数据库的搭建\n``shell\nocker network create front\n``\n创建基于bridge模式名称为front的网络，后面我们会将所有部署的docker 容器添加进来\n\n```shell\n  docker run -d --name mysql -p 3306:3306  --env MYSQL_ROOT_PASSWORD=123456 --network front mysql\n```\n分析下这条docker命令的构成:\n\n- docker run 是启动一个容器的命令\n- -d 参数指明是后台运行此容器\n- --name 是给容器命名，这里叫做 mysql\n- -p 指明的是容器内端口和宿主机器端口的相互映映射,这里将宿主 3306  端口映射到容器的3306端口,一般mysql服务都使用3306端口\n- --network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中\n- mysql 这个表明要在哪个镜像上创建容器，这里选择的是mysql的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载\n\n- --env 参数表面要设置的环境变量，采用的是key=value的参数形式，我们这里把mysql root 的密码设置为 123456\n\t  \n输入 `docker containers ls -a `\n\t  \n{% img /images/1_docker_show.png%}\n\t  \n看到我们的mysql容器已经搭建完成\n#### 数据库管理员及表结构的创建\n```shell\n mysql  -h127.0.0.1 -P3306 -uroot -p123456\n```\n在我们的宿主机器上登录我们的mysql，如果你的宿主机器内没有mysql 客户端，也可以用如下命令登录 mysql 容器内，进行mysql的管理\n```\n   docker exec -it  mysql /bin/bash\n```\n执行下面sql语句\n```sql\ncreate database praise;\n```\n创建一个点赞数据库\n\n```sql\nCREATE USER 'test'@'%' IDENTIFIED BY 'test';\nGRANT ALL ON *.* TO 'test'@'%';\n```\n创建一个用户名和密码都是 test 的账号,并给此账号赋予最高权限\n\n\n```sql\nALTER USER 'test'@'%' IDENTIFIED WITH mysql_native_password BY 'test';\n```\n更改这个用户的验证方式，这一步的目的主要是解决某些低版本的mysql客户端验证不通过的问题。\n\n```sql\nCREATE TABLE `praise_count` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n `resource_id` bigint(20) NOT NULL DEFAULT '0' COMMENT '资源id',\n `count` bigint(20) NOT NULL DEFAULT '0' COMMENT '次数',\n `ctime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',\n `mtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'modify time',\n PRIMARY KEY (`id`),\n UNIQUE KEY `resource_id` (`resource_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1968180 DEFAULT CHARSET=latin1 COLLATE=latin1_bin ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8 COMMENT='praise_count'\n\n```\n创建 点赞 数据表结构\n&emsp;\n**到这里，我们一个可用于项目的数据库已经搭建完成**\n&emsp;\n*本教程放在真正的生产环境中需要注意的是：*\n1. docker并不适用存储类的服务，存储类服务一般都占用大量磁盘，难以迁移没有必要部署在容器中。这里只是方便搭建环境，所以采用。\n2. 数据库的账号给予权限过高，密码过于简单，存在安全风险。\n\n\n## app 代码的编写\n这里的app相对比较简单，只实现两个接口。\n```\n/praise/set?resource_id={int}\n  点赞次数自增\n/praise/get?resource_id={int}\n  查询点赞次数\n\nresource_id get参数，传入点赞资源的唯一id\n```\n本项目除了依赖mysql的驱动，其余都使用go的原生工具\n```shell\ngo get -u github.com/go-sql-driver/mysql\n#安装go 的mysql驱动\n```\n下面进入代码\n```go\npackage main\n\nimport (\n        \"database/sql\"\n        \"encoding/json\"\n        \"flag\"\n        \"fmt\"\n        \"io\"\n        \"log\"\n        \"net/http\"\n        \"strconv\"\n\n        _ \"github.com/go-sql-driver/mysql\"\n)\n\n//c/s协议返回的json的结构体\n// {\n//    errno : -1/0, 错误码，0代表正常\n//    errmsg: \"\" , 错误信息\n//    data : {\n//             resourceID : 111, 资源id，用于表示唯一的一条资源\n//             count      : 1 ,  此资源被点赞的次数\n//             Ctime      : 1231231, 此项被创建的时间\n//  }\n//\n\ntype Response struct {\n        Errno  int    `json:\"errno\"`\n        ErrMsg string `json:\"errmsg\"`\n        Data   *Item  `json:\"data\"`\n}\ntype Item struct {\n        ResourceID int64 `json:\"resourceID\"`\n        Count      int64 `json:\"count\"`\n        Ctime      int64 `json:\"ctime\"`\n}\n// 数据库地址\nvar dbAddr string\n// 数据库端口\nvar port int\n\nfunc init() {\n         // 主要是用于支持可自定义传入数据库的地址和端口号\n\t\t // 例如 go run main.go -mysql=mysql -port=3304 将数据库地址和端口号传入。此处也写有默认值\n        flag.StringVar(&dbAddr, \"mysql\", \"mysql\", \"please input your mysql address,exp : 127.0.0.1\")\n        flag.IntVar(&port, \"port\", 3306, \"please input your mysql port,exp : 3304\")\n}\n//测试接口\nfunc HelloServer(w http.ResponseWriter, req *http.Request) {\n        io.WriteString(w, \"hello, world!\\n\")\n}\n\nfunc main() {\n        //命令端参数接解析\n        flag.Parse()\n        log.Println(\"server init\")\n\t\t//注册三个接口，分别是 服务器测试接口，点赞接口，和点赞数获取接口\n        http.HandleFunc(\"/hello\", HelloServer)\n        http.HandleFunc(\"/praise/get\", getPrasieCount)\n        http.HandleFunc(\"/praise/set\", setPrasieCount)\n        log.Println(\"server start\")\n\t\t//启动服务器，并监听80端口\n        log.Fatal(http.ListenAndServe(\":80\", nil))\n}\n\n// 获取点赞数，主要逻辑\nfunc getPrasieCount(w http.ResponseWriter, req *http.Request) {\n        resourceID, err := getResourceIDFromGet(req)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n\n        dbOpenCommand := fmt.Sprintf(\"test:test@tcp(%s:%d)/praise?charset=utf8\", dbAddr, port)\n        db, err := sql.Open(\"mysql\", dbOpenCommand)\n\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        defer db.Close()\n\n        sql := fmt.Sprintf(\"select count,ctime from praise_count where resource_id = %d\", resourceID)\n        rows, sqlerr := db.Query(sql)\n        if sqlerr != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", sqlerr))\n                return\n        }\n\n        defer rows.Close()\n        res := Response{Errno: 0}\n        var count, ctime int64\n        if rows.Next() {\n                rows.Scan(&count, &ctime)\n        }\n        res.Data = &Item{ResourceID: resourceID, Count: count, Ctime: ctime}\n\n        retBytes, _ := json.Marshal(res)\n\n        io.WriteString(w, string(retBytes))\n\n}\n//添加点赞数\nfunc setPrasieCount(w http.ResponseWriter, req *http.Request) {\n        resourceID, err := getResourceIDFromGet(req)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n\n        dbOpenCommand := fmt.Sprintf(\"test:test@tcp(%s:%d)/praise?charset=utf8\", dbAddr, port)\n        db, err := sql.Open(\"mysql\", dbOpenCommand)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        defer db.Close()\n        sql := fmt.Sprintf(\"INSERT INTO praise_count  (resource_id,count ) VALUES (%d,1) ON DUPLICATE key UPDATE count=count+1\", resourceID)\n        _, err = db.Query(sql)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        retBytes, _ := json.Marshal(Response{Errno: 0})\n        io.WriteString(w, string(retBytes))\n\n}\n\n//错误处理\nfunc returnErrMsg(w http.ResponseWriter, errno int, errmsg string) {\n\n        retBytes, _ := json.Marshal(Response{Errno: errno, ErrMsg: errmsg})\n        io.WriteString(w, string(retBytes))\n}\n//解析get参数，获取资源ID\nfunc getResourceIDFromGet(req *http.Request) (int64, error) {\n        vars := req.URL.Query()\n        resourceIDStr := vars.Get(\"resource_id\")\n        resourceID, err := strconv.ParseInt(resourceIDStr, 10, 64)\n        return resourceID, err\n}\n```\n\n一个可以上线的代码已经编写完成。接下，将其打包到docker里。你可以想象，docker就是我们的一个服务器，或者是一个pass平台\n\n``` shell\n#启动docker的命令\ndocker run -d -p 8080:80 -v $HOME/cluster-build/chapter_1/src/go/webapp:/go/src/webapp -v $HOME/cluster-build/chapter_1/src/sh:/sh --network front golang sh /sh/start.sh\n```\n这个docker run 命令较为复杂,很多参数的含义我们在上面已经介绍过了，我们介绍没有见过的吧\n\n- -v 文件挂载，将宿主机器上的文件挂载到容器中。其中我们把宿主机器的$HOME/cluster-build/chapter_1/src/go/webapp和 $HOME/cluster-build/chapter_1/src/sh文件夹分别映射到容器/go/src/webapp /sh下。多个 -v 参数可以进行多次映射。\n- --network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中，和mysql处于同一个网络中，方便通讯\n- golang 这个表明要在哪个镜像上创建容器，这里选择的是golang的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载\n- sh start.sh 后置命令，当容器创建完成是，执行这个命令，这里执行一个手写的脚本\n\nstart.sh 这个后置脚本主要做两件事情：\n1. 下载相关的依赖\n2. 将服务启动\n```shell\ngo get -u github.com/go-sql-driver/mysql  &&  go run /go/src/webapp/main.go\n```\n大家看到 上面的挂载命令很复杂，一般大家都会把自己基于golang镜像，再打包出一个新的镜像。这里我们为了直观和方便调试，先采用这种方式进行挂载。后面，我们会用docker-compose 来管理所有的docker容器。\n\n# 结果验证\n  \n   用curl来访问我们期待的服务,资源id 为1 ，先访问 set 接口，在访问 set接口，结果为：\n- set 接口请求示例\n\n{% img /images/1_web_set.png%}\n- get 接口请求示例\n{% img /images/1_web_get.png%}\n\n到这里，最简单的单点服务就已经完成.\n","slug":"server_1","published":1,"updated":"2019-07-04T11:42:43.872Z","_id":"cjxluuib50000y900raopcvjd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"服务的搭建及其演变-简单的单点服务搭建\"><a href=\"#服务的搭建及其演变-简单的单点服务搭建\" class=\"headerlink\" title=\"服务的搭建及其演变 -简单的单点服务搭建\"></a>服务的搭建及其演变 -简单的单点服务搭建</h1><p>在日常构建webapp应用中，最常见的就是一个代码模块，依赖一个数据库的架构。这里以一个简单的点赞系统来介绍架构是怎么一步一步由简单变得复杂的。 为了更好的在单机模拟分布式环境，也为了后续的方便部署，这里引入的了docker。</p>\n<img src=\"/images/1_webapp_struct_1.png\">\n<p>上图是最简单 webapp 依赖单db的架构图</p>\n<h2 id=\"本节相关工具\"><a href=\"#本节相关工具\" class=\"headerlink\" title=\"本节相关工具\"></a>本节相关工具</h2><ul>\n<li>golang : 一种接近于c的编程语言。在开发难度和性能上做到了比较好的平衡。采用协程+管道的设计，天然较好地支撑了并发,是目前较火的编程语言,这里主要用于编写代码逻辑。</li>\n<li>mysql  :  老牌的开源数据库,这里用于数据的持久化存储。</li>\n<li><p>docker ： 近年较火的容器，主要综合和标准化了linux 下的namespace 和 cgroup 技术，并提供相应的手脚架和多种丰富的镜像用于环境的快速部署，资源隔离。本文主要用docker来进行环境的搭建和分布式的模拟<br>  下面简单了解下docker比较重要的概念</p>\n<ol>\n<li>镜像 : 打包好的软件合集，是创建容器的模板</li>\n<li>容器 ：主要运行时候的实体，和镜像类似于 类和对象的关系</li>\n<li>仓库 ：镜像市场，可以在上面下载到各种各样的镜像</li>\n</ol>\n<p>上面的解释纯基于我个人理解，如果有不到位的地方请谅解,相关工具的使用方法，我会在使用中说清楚。具体的深度使用细节，可以参考相关的专业书籍。</p>\n</li>\n</ul>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><p>实验环境主要分为以下几步：</p>\n<ul>\n<li>docker,go 环境的安装，此类教程网上很多，这里就不在赘述</li>\n<li>基于docker 的mysql 环境搭建</li>\n<li>app代码的编写</li>\n<li>基于docker的app部署<h3 id=\"基于docker的mysql-环境搭建\"><a href=\"#基于docker的mysql-环境搭建\" class=\"headerlink\" title=\"基于docker的mysql 环境搭建\"></a>基于docker的mysql 环境搭建</h3><h4 id=\"数据库的搭建\"><a href=\"#数据库的搭建\" class=\"headerlink\" title=\"数据库的搭建\"></a>数据库的搭建</h4><code>shell\nocker network create front</code><br>创建基于bridge模式名称为front的网络，后面我们会将所有部署的docker 容器添加进来</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mysql -p 3306:3306  --env MYSQL_ROOT_PASSWORD=123456 --network front mysql</span><br></pre></td></tr></table></figure>\n<p>分析下这条docker命令的构成:</p>\n<ul>\n<li>docker run 是启动一个容器的命令</li>\n<li>-d 参数指明是后台运行此容器</li>\n<li>–name 是给容器命名，这里叫做 mysql</li>\n<li>-p 指明的是容器内端口和宿主机器端口的相互映映射,这里将宿主 3306  端口映射到容器的3306端口,一般mysql服务都使用3306端口</li>\n<li>–network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中</li>\n<li><p>mysql 这个表明要在哪个镜像上创建容器，这里选择的是mysql的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载</p>\n</li>\n<li><p>–env 参数表面要设置的环境变量，采用的是key=value的参数形式，我们这里把mysql root 的密码设置为 123456</p>\n</li>\n</ul>\n<p>输入 <code>docker containers ls -a</code></p>\n<img src=\"/images/1_docker_show.png\">\n<p>看到我们的mysql容器已经搭建完成</p>\n<h4 id=\"数据库管理员及表结构的创建\"><a href=\"#数据库管理员及表结构的创建\" class=\"headerlink\" title=\"数据库管理员及表结构的创建\"></a>数据库管理员及表结构的创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql  -h127.0.0.1 -P3306 -uroot -p123456</span><br></pre></td></tr></table></figure>\n<p>在我们的宿主机器上登录我们的mysql，如果你的宿主机器内没有mysql 客户端，也可以用如下命令登录 mysql 容器内，进行mysql的管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it  mysql /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>执行下面sql语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> praise;</span><br></pre></td></tr></table></figure></p>\n<p>创建一个点赞数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n<p>创建一个用户名和密码都是 test 的账号,并给此账号赋予最高权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">'test'</span>;</span><br></pre></td></tr></table></figure>\n<p>更改这个用户的验证方式，这一步的目的主要是解决某些低版本的mysql客户端验证不通过的问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`praise_count`</span> (</span><br><span class=\"line\"> <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\"> <span class=\"string\">`resource_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'资源id'</span>,</span><br><span class=\"line\"> <span class=\"string\">`count`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'次数'</span>,</span><br><span class=\"line\"> <span class=\"string\">`ctime`</span> <span class=\"keyword\">timestamp</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'create time'</span>,</span><br><span class=\"line\"> <span class=\"string\">`mtime`</span> <span class=\"keyword\">timestamp</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'modify time'</span>,</span><br><span class=\"line\"> PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\"> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`resource_id`</span> (<span class=\"string\">`resource_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1968180</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=latin1 <span class=\"keyword\">COLLATE</span>=latin1_bin ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=<span class=\"number\">8</span> <span class=\"keyword\">COMMENT</span>=<span class=\"string\">'praise_count'</span></span><br></pre></td></tr></table></figure>\n<p>创建 点赞 数据表结构<br>&emsp;<br><strong>到这里，我们一个可用于项目的数据库已经搭建完成</strong><br>&emsp;<br><em>本教程放在真正的生产环境中需要注意的是：</em></p>\n<ol>\n<li>docker并不适用存储类的服务，存储类服务一般都占用大量磁盘，难以迁移没有必要部署在容器中。这里只是方便搭建环境，所以采用。</li>\n<li>数据库的账号给予权限过高，密码过于简单，存在安全风险。</li>\n</ol>\n<h2 id=\"app-代码的编写\"><a href=\"#app-代码的编写\" class=\"headerlink\" title=\"app 代码的编写\"></a>app 代码的编写</h2><p>这里的app相对比较简单，只实现两个接口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/praise/set?resource_id=&#123;int&#125;</span><br><span class=\"line\">  点赞次数自增</span><br><span class=\"line\">/praise/get?resource_id=&#123;int&#125;</span><br><span class=\"line\">  查询点赞次数</span><br><span class=\"line\"></span><br><span class=\"line\">resource_id get参数，传入点赞资源的唯一id</span><br></pre></td></tr></table></figure></p>\n<p>本项目除了依赖mysql的驱动，其余都使用go的原生工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-sql-driver/mysql</span><br><span class=\"line\">#安装go 的mysql驱动</span><br></pre></td></tr></table></figure></p>\n<p>下面进入代码<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">        <span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">        <span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">        <span class=\"string\">\"flag\"</span></span><br><span class=\"line\">        <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">        <span class=\"string\">\"io\"</span></span><br><span class=\"line\">        <span class=\"string\">\"log\"</span></span><br><span class=\"line\">        <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">        <span class=\"string\">\"strconv\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        _ <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//c/s协议返回的json的结构体</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    errno : -1/0, 错误码，0代表正常</span></span><br><span class=\"line\"><span class=\"comment\">//    errmsg: \"\" , 错误信息</span></span><br><span class=\"line\"><span class=\"comment\">//    data : &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             resourceID : 111, 资源id，用于表示唯一的一条资源</span></span><br><span class=\"line\"><span class=\"comment\">//             count      : 1 ,  此资源被点赞的次数</span></span><br><span class=\"line\"><span class=\"comment\">//             Ctime      : 1231231, 此项被创建的时间</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Errno  <span class=\"keyword\">int</span>    <span class=\"string\">`json:\"errno\"`</span></span><br><span class=\"line\">        ErrMsg <span class=\"keyword\">string</span> <span class=\"string\">`json:\"errmsg\"`</span></span><br><span class=\"line\">        Data   *Item  <span class=\"string\">`json:\"data\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Item <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        ResourceID <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"resourceID\"`</span></span><br><span class=\"line\">        Count      <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"count\"`</span></span><br><span class=\"line\">        Ctime      <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"ctime\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据库地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dbAddr <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"comment\">// 数据库端口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> port <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> init() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 主要是用于支持可自定义传入数据库的地址和端口号</span></span><br><span class=\"line\">\t\t <span class=\"comment\">// 例如 go run main.go -mysql=mysql -port=3304 将数据库地址和端口号传入。此处也写有默认值</span></span><br><span class=\"line\">        flag.StringVar(&amp;dbAddr, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"please input your mysql address,exp : 127.0.0.1\"</span>)</span><br><span class=\"line\">        flag.IntVar(&amp;port, <span class=\"string\">\"port\"</span>, <span class=\"number\">3306</span>, <span class=\"string\">\"please input your mysql port,exp : 3304\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试接口</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> HelloServer(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"hello, world!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//命令端参数接解析</span></span><br><span class=\"line\">        flag.Parse()</span><br><span class=\"line\">        log.Println(<span class=\"string\">\"server init\"</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//注册三个接口，分别是 服务器测试接口，点赞接口，和点赞数获取接口</span></span><br><span class=\"line\">        http.HandleFunc(<span class=\"string\">\"/hello\"</span>, HelloServer)</span><br><span class=\"line\">        http.HandleFunc(<span class=\"string\">\"/praise/get\"</span>, getPrasieCount)</span><br><span class=\"line\">        http.HandleFunc(<span class=\"string\">\"/praise/set\"</span>, setPrasieCount)</span><br><span class=\"line\">        log.Println(<span class=\"string\">\"server start\"</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//启动服务器，并监听80端口</span></span><br><span class=\"line\">        log.Fatal(http.ListenAndServe(<span class=\"string\">\":80\"</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取点赞数，主要逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> getPrasieCount(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        resourceID, err := getResourceIDFromGet(req)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dbOpenCommand := fmt.Sprintf(<span class=\"string\">\"test:test@tcp(%s:%d)/praise?charset=utf8\"</span>, dbAddr, port)</span><br><span class=\"line\">        db, err := sql.Open(<span class=\"string\">\"mysql\"</span>, dbOpenCommand)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">        sql := fmt.Sprintf(<span class=\"string\">\"select count,ctime from praise_count where resource_id = %d\"</span>, resourceID)</span><br><span class=\"line\">        rows, sqlerr := db.Query(sql)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sqlerr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, sqlerr))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">defer</span> rows.Close()</span><br><span class=\"line\">        res := Response&#123;Errno: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count, ctime <span class=\"keyword\">int64</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> rows.Next() &#123;</span><br><span class=\"line\">                rows.Scan(&amp;count, &amp;ctime)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.Data = &amp;Item&#123;ResourceID: resourceID, Count: count, Ctime: ctime&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        retBytes, _ := json.Marshal(res)</span><br><span class=\"line\"></span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加点赞数</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> setPrasieCount(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        resourceID, err := getResourceIDFromGet(req)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dbOpenCommand := fmt.Sprintf(<span class=\"string\">\"test:test@tcp(%s:%d)/praise?charset=utf8\"</span>, dbAddr, port)</span><br><span class=\"line\">        db, err := sql.Open(<span class=\"string\">\"mysql\"</span>, dbOpenCommand)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">        sql := fmt.Sprintf(<span class=\"string\">\"INSERT INTO praise_count  (resource_id,count ) VALUES (%d,1) ON DUPLICATE key UPDATE count=count+1\"</span>, resourceID)</span><br><span class=\"line\">        _, err = db.Query(sql)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retBytes, _ := json.Marshal(Response&#123;Errno: <span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误处理</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> returnErrMsg(w http.ResponseWriter, errno <span class=\"keyword\">int</span>, errmsg <span class=\"keyword\">string</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        retBytes, _ := json.Marshal(Response&#123;Errno: errno, ErrMsg: errmsg&#125;)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解析get参数，获取资源ID</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> getResourceIDFromGet(req *http.Request) (<span class=\"keyword\">int64</span>, error) &#123;</span><br><span class=\"line\">        vars := req.URL.Query()</span><br><span class=\"line\">        resourceIDStr := vars.Get(<span class=\"string\">\"resource_id\"</span>)</span><br><span class=\"line\">        resourceID, err := strconv.ParseInt(resourceIDStr, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resourceID, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一个可以上线的代码已经编写完成。接下，将其打包到docker里。你可以想象，docker就是我们的一个服务器，或者是一个pass平台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动docker的命令</span><br><span class=\"line\">docker run -d -p 8080:80 -v $HOME/cluster-build/chapter_1/src/go/webapp:/go/src/webapp -v $HOME/cluster-build/chapter_1/src/sh:/sh --network front golang sh /sh/start.sh</span><br></pre></td></tr></table></figure>\n<p>这个docker run 命令较为复杂,很多参数的含义我们在上面已经介绍过了，我们介绍没有见过的吧</p>\n<ul>\n<li>-v 文件挂载，将宿主机器上的文件挂载到容器中。其中我们把宿主机器的$HOME/cluster-build/chapter_1/src/go/webapp和 $HOME/cluster-build/chapter_1/src/sh文件夹分别映射到容器/go/src/webapp /sh下。多个 -v 参数可以进行多次映射。</li>\n<li>–network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中，和mysql处于同一个网络中，方便通讯</li>\n<li>golang 这个表明要在哪个镜像上创建容器，这里选择的是golang的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载</li>\n<li>sh start.sh 后置命令，当容器创建完成是，执行这个命令，这里执行一个手写的脚本</li>\n</ul>\n<p>start.sh 这个后置脚本主要做两件事情：</p>\n<ol>\n<li>下载相关的依赖</li>\n<li>将服务启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-sql-driver/mysql  &amp;&amp;  go run /go/src/webapp/main.go</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>大家看到 上面的挂载命令很复杂，一般大家都会把自己基于golang镜像，再打包出一个新的镜像。这里我们为了直观和方便调试，先采用这种方式进行挂载。后面，我们会用docker-compose 来管理所有的docker容器。</p>\n<h1 id=\"结果验证\"><a href=\"#结果验证\" class=\"headerlink\" title=\"结果验证\"></a>结果验证</h1><p>   用curl来访问我们期待的服务,资源id 为1 ，先访问 set 接口，在访问 set接口，结果为：</p>\n<ul>\n<li>set 接口请求示例</li>\n</ul>\n<img src=\"/images/1_web_set.png\">\n<ul>\n<li>get 接口请求示例<img src=\"/images/1_web_get.png\">\n</li>\n</ul>\n<p>到这里，最简单的单点服务就已经完成.</p>\n","excerpt":"","more":"<h1 id=\"服务的搭建及其演变-简单的单点服务搭建\"><a href=\"#服务的搭建及其演变-简单的单点服务搭建\" class=\"headerlink\" title=\"服务的搭建及其演变 -简单的单点服务搭建\"></a>服务的搭建及其演变 -简单的单点服务搭建</h1><p>在日常构建webapp应用中，最常见的就是一个代码模块，依赖一个数据库的架构。这里以一个简单的点赞系统来介绍架构是怎么一步一步由简单变得复杂的。 为了更好的在单机模拟分布式环境，也为了后续的方便部署，这里引入的了docker。</p>\n<img src=\"/images/1_webapp_struct_1.png\">\n<p>上图是最简单 webapp 依赖单db的架构图</p>\n<h2 id=\"本节相关工具\"><a href=\"#本节相关工具\" class=\"headerlink\" title=\"本节相关工具\"></a>本节相关工具</h2><ul>\n<li>golang : 一种接近于c的编程语言。在开发难度和性能上做到了比较好的平衡。采用协程+管道的设计，天然较好地支撑了并发,是目前较火的编程语言,这里主要用于编写代码逻辑。</li>\n<li>mysql  :  老牌的开源数据库,这里用于数据的持久化存储。</li>\n<li><p>docker ： 近年较火的容器，主要综合和标准化了linux 下的namespace 和 cgroup 技术，并提供相应的手脚架和多种丰富的镜像用于环境的快速部署，资源隔离。本文主要用docker来进行环境的搭建和分布式的模拟<br>  下面简单了解下docker比较重要的概念</p>\n<ol>\n<li>镜像 : 打包好的软件合集，是创建容器的模板</li>\n<li>容器 ：主要运行时候的实体，和镜像类似于 类和对象的关系</li>\n<li>仓库 ：镜像市场，可以在上面下载到各种各样的镜像</li>\n</ol>\n<p>上面的解释纯基于我个人理解，如果有不到位的地方请谅解,相关工具的使用方法，我会在使用中说清楚。具体的深度使用细节，可以参考相关的专业书籍。</p>\n</li>\n</ul>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><p>实验环境主要分为以下几步：</p>\n<ul>\n<li>docker,go 环境的安装，此类教程网上很多，这里就不在赘述</li>\n<li>基于docker 的mysql 环境搭建</li>\n<li>app代码的编写</li>\n<li>基于docker的app部署<h3 id=\"基于docker的mysql-环境搭建\"><a href=\"#基于docker的mysql-环境搭建\" class=\"headerlink\" title=\"基于docker的mysql 环境搭建\"></a>基于docker的mysql 环境搭建</h3><h4 id=\"数据库的搭建\"><a href=\"#数据库的搭建\" class=\"headerlink\" title=\"数据库的搭建\"></a>数据库的搭建</h4><code>shell\nocker network create front</code><br>创建基于bridge模式名称为front的网络，后面我们会将所有部署的docker 容器添加进来</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mysql -p 3306:3306  --env MYSQL_ROOT_PASSWORD=123456 --network front mysql</span><br></pre></td></tr></table></figure>\n<p>分析下这条docker命令的构成:</p>\n<ul>\n<li>docker run 是启动一个容器的命令</li>\n<li>-d 参数指明是后台运行此容器</li>\n<li>–name 是给容器命名，这里叫做 mysql</li>\n<li>-p 指明的是容器内端口和宿主机器端口的相互映映射,这里将宿主 3306  端口映射到容器的3306端口,一般mysql服务都使用3306端口</li>\n<li>–network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中</li>\n<li><p>mysql 这个表明要在哪个镜像上创建容器，这里选择的是mysql的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载</p>\n</li>\n<li><p>–env 参数表面要设置的环境变量，采用的是key=value的参数形式，我们这里把mysql root 的密码设置为 123456</p>\n</li>\n</ul>\n<p>输入 <code>docker containers ls -a</code></p>\n<img src=\"/images/1_docker_show.png\">\n<p>看到我们的mysql容器已经搭建完成</p>\n<h4 id=\"数据库管理员及表结构的创建\"><a href=\"#数据库管理员及表结构的创建\" class=\"headerlink\" title=\"数据库管理员及表结构的创建\"></a>数据库管理员及表结构的创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql  -h127.0.0.1 -P3306 -uroot -p123456</span><br></pre></td></tr></table></figure>\n<p>在我们的宿主机器上登录我们的mysql，如果你的宿主机器内没有mysql 客户端，也可以用如下命令登录 mysql 容器内，进行mysql的管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it  mysql /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>执行下面sql语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> praise;</span><br></pre></td></tr></table></figure></p>\n<p>创建一个点赞数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n<p>创建一个用户名和密码都是 test 的账号,并给此账号赋予最高权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">'test'</span>;</span><br></pre></td></tr></table></figure>\n<p>更改这个用户的验证方式，这一步的目的主要是解决某些低版本的mysql客户端验证不通过的问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`praise_count`</span> (</span><br><span class=\"line\"> <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\"> <span class=\"string\">`resource_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'资源id'</span>,</span><br><span class=\"line\"> <span class=\"string\">`count`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'次数'</span>,</span><br><span class=\"line\"> <span class=\"string\">`ctime`</span> <span class=\"keyword\">timestamp</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'create time'</span>,</span><br><span class=\"line\"> <span class=\"string\">`mtime`</span> <span class=\"keyword\">timestamp</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'modify time'</span>,</span><br><span class=\"line\"> PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\"> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`resource_id`</span> (<span class=\"string\">`resource_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1968180</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=latin1 <span class=\"keyword\">COLLATE</span>=latin1_bin ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=<span class=\"number\">8</span> <span class=\"keyword\">COMMENT</span>=<span class=\"string\">'praise_count'</span></span><br></pre></td></tr></table></figure>\n<p>创建 点赞 数据表结构<br>&emsp;<br><strong>到这里，我们一个可用于项目的数据库已经搭建完成</strong><br>&emsp;<br><em>本教程放在真正的生产环境中需要注意的是：</em></p>\n<ol>\n<li>docker并不适用存储类的服务，存储类服务一般都占用大量磁盘，难以迁移没有必要部署在容器中。这里只是方便搭建环境，所以采用。</li>\n<li>数据库的账号给予权限过高，密码过于简单，存在安全风险。</li>\n</ol>\n<h2 id=\"app-代码的编写\"><a href=\"#app-代码的编写\" class=\"headerlink\" title=\"app 代码的编写\"></a>app 代码的编写</h2><p>这里的app相对比较简单，只实现两个接口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/praise/set?resource_id=&#123;int&#125;</span><br><span class=\"line\">  点赞次数自增</span><br><span class=\"line\">/praise/get?resource_id=&#123;int&#125;</span><br><span class=\"line\">  查询点赞次数</span><br><span class=\"line\"></span><br><span class=\"line\">resource_id get参数，传入点赞资源的唯一id</span><br></pre></td></tr></table></figure></p>\n<p>本项目除了依赖mysql的驱动，其余都使用go的原生工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-sql-driver/mysql</span><br><span class=\"line\">#安装go 的mysql驱动</span><br></pre></td></tr></table></figure></p>\n<p>下面进入代码<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">        <span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">        <span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">        <span class=\"string\">\"flag\"</span></span><br><span class=\"line\">        <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">        <span class=\"string\">\"io\"</span></span><br><span class=\"line\">        <span class=\"string\">\"log\"</span></span><br><span class=\"line\">        <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">        <span class=\"string\">\"strconv\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        _ <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//c/s协议返回的json的结构体</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    errno : -1/0, 错误码，0代表正常</span></span><br><span class=\"line\"><span class=\"comment\">//    errmsg: \"\" , 错误信息</span></span><br><span class=\"line\"><span class=\"comment\">//    data : &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             resourceID : 111, 资源id，用于表示唯一的一条资源</span></span><br><span class=\"line\"><span class=\"comment\">//             count      : 1 ,  此资源被点赞的次数</span></span><br><span class=\"line\"><span class=\"comment\">//             Ctime      : 1231231, 此项被创建的时间</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Errno  <span class=\"keyword\">int</span>    <span class=\"string\">`json:\"errno\"`</span></span><br><span class=\"line\">        ErrMsg <span class=\"keyword\">string</span> <span class=\"string\">`json:\"errmsg\"`</span></span><br><span class=\"line\">        Data   *Item  <span class=\"string\">`json:\"data\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Item <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        ResourceID <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"resourceID\"`</span></span><br><span class=\"line\">        Count      <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"count\"`</span></span><br><span class=\"line\">        Ctime      <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"ctime\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据库地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dbAddr <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"comment\">// 数据库端口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> port <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> init() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 主要是用于支持可自定义传入数据库的地址和端口号</span></span><br><span class=\"line\">\t\t <span class=\"comment\">// 例如 go run main.go -mysql=mysql -port=3304 将数据库地址和端口号传入。此处也写有默认值</span></span><br><span class=\"line\">        flag.StringVar(&amp;dbAddr, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"please input your mysql address,exp : 127.0.0.1\"</span>)</span><br><span class=\"line\">        flag.IntVar(&amp;port, <span class=\"string\">\"port\"</span>, <span class=\"number\">3306</span>, <span class=\"string\">\"please input your mysql port,exp : 3304\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试接口</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> HelloServer(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"hello, world!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//命令端参数接解析</span></span><br><span class=\"line\">        flag.Parse()</span><br><span class=\"line\">        log.Println(<span class=\"string\">\"server init\"</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//注册三个接口，分别是 服务器测试接口，点赞接口，和点赞数获取接口</span></span><br><span class=\"line\">        http.HandleFunc(<span class=\"string\">\"/hello\"</span>, HelloServer)</span><br><span class=\"line\">        http.HandleFunc(<span class=\"string\">\"/praise/get\"</span>, getPrasieCount)</span><br><span class=\"line\">        http.HandleFunc(<span class=\"string\">\"/praise/set\"</span>, setPrasieCount)</span><br><span class=\"line\">        log.Println(<span class=\"string\">\"server start\"</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//启动服务器，并监听80端口</span></span><br><span class=\"line\">        log.Fatal(http.ListenAndServe(<span class=\"string\">\":80\"</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取点赞数，主要逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> getPrasieCount(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        resourceID, err := getResourceIDFromGet(req)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dbOpenCommand := fmt.Sprintf(<span class=\"string\">\"test:test@tcp(%s:%d)/praise?charset=utf8\"</span>, dbAddr, port)</span><br><span class=\"line\">        db, err := sql.Open(<span class=\"string\">\"mysql\"</span>, dbOpenCommand)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">        sql := fmt.Sprintf(<span class=\"string\">\"select count,ctime from praise_count where resource_id = %d\"</span>, resourceID)</span><br><span class=\"line\">        rows, sqlerr := db.Query(sql)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sqlerr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, sqlerr))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">defer</span> rows.Close()</span><br><span class=\"line\">        res := Response&#123;Errno: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count, ctime <span class=\"keyword\">int64</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> rows.Next() &#123;</span><br><span class=\"line\">                rows.Scan(&amp;count, &amp;ctime)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.Data = &amp;Item&#123;ResourceID: resourceID, Count: count, Ctime: ctime&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        retBytes, _ := json.Marshal(res)</span><br><span class=\"line\"></span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加点赞数</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> setPrasieCount(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        resourceID, err := getResourceIDFromGet(req)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dbOpenCommand := fmt.Sprintf(<span class=\"string\">\"test:test@tcp(%s:%d)/praise?charset=utf8\"</span>, dbAddr, port)</span><br><span class=\"line\">        db, err := sql.Open(<span class=\"string\">\"mysql\"</span>, dbOpenCommand)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">        sql := fmt.Sprintf(<span class=\"string\">\"INSERT INTO praise_count  (resource_id,count ) VALUES (%d,1) ON DUPLICATE key UPDATE count=count+1\"</span>, resourceID)</span><br><span class=\"line\">        _, err = db.Query(sql)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retBytes, _ := json.Marshal(Response&#123;Errno: <span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误处理</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> returnErrMsg(w http.ResponseWriter, errno <span class=\"keyword\">int</span>, errmsg <span class=\"keyword\">string</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        retBytes, _ := json.Marshal(Response&#123;Errno: errno, ErrMsg: errmsg&#125;)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解析get参数，获取资源ID</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> getResourceIDFromGet(req *http.Request) (<span class=\"keyword\">int64</span>, error) &#123;</span><br><span class=\"line\">        vars := req.URL.Query()</span><br><span class=\"line\">        resourceIDStr := vars.Get(<span class=\"string\">\"resource_id\"</span>)</span><br><span class=\"line\">        resourceID, err := strconv.ParseInt(resourceIDStr, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resourceID, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一个可以上线的代码已经编写完成。接下，将其打包到docker里。你可以想象，docker就是我们的一个服务器，或者是一个pass平台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动docker的命令</span><br><span class=\"line\">docker run -d -p 8080:80 -v $HOME/cluster-build/chapter_1/src/go/webapp:/go/src/webapp -v $HOME/cluster-build/chapter_1/src/sh:/sh --network front golang sh /sh/start.sh</span><br></pre></td></tr></table></figure>\n<p>这个docker run 命令较为复杂,很多参数的含义我们在上面已经介绍过了，我们介绍没有见过的吧</p>\n<ul>\n<li>-v 文件挂载，将宿主机器上的文件挂载到容器中。其中我们把宿主机器的$HOME/cluster-build/chapter_1/src/go/webapp和 $HOME/cluster-build/chapter_1/src/sh文件夹分别映射到容器/go/src/webapp /sh下。多个 -v 参数可以进行多次映射。</li>\n<li>–network 参数表明要添加到哪个网络中，这里加入上面创建的front网络中，和mysql处于同一个网络中，方便通讯</li>\n<li>golang 这个表明要在哪个镜像上创建容器，这里选择的是golang的原生镜像。当镜像存在是会直接使用，不然docker eneeger 会替我们从网上进行下载</li>\n<li>sh start.sh 后置命令，当容器创建完成是，执行这个命令，这里执行一个手写的脚本</li>\n</ul>\n<p>start.sh 这个后置脚本主要做两件事情：</p>\n<ol>\n<li>下载相关的依赖</li>\n<li>将服务启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-sql-driver/mysql  &amp;&amp;  go run /go/src/webapp/main.go</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>大家看到 上面的挂载命令很复杂，一般大家都会把自己基于golang镜像，再打包出一个新的镜像。这里我们为了直观和方便调试，先采用这种方式进行挂载。后面，我们会用docker-compose 来管理所有的docker容器。</p>\n<h1 id=\"结果验证\"><a href=\"#结果验证\" class=\"headerlink\" title=\"结果验证\"></a>结果验证</h1><p>   用curl来访问我们期待的服务,资源id 为1 ，先访问 set 接口，在访问 set接口，结果为：</p>\n<ul>\n<li>set 接口请求示例</li>\n</ul>\n<img src=\"/images/1_web_set.png\">\n<ul>\n<li>get 接口请求示例<img src=\"/images/1_web_get.png\">\n</li>\n</ul>\n<p>到这里，最简单的单点服务就已经完成.</p>\n"},{"title":"服务的搭建及其演变(2) - 高可用分布式缓存系统构建","date":"2019-07-05T16:00:00.000Z","_content":"# 前言\n在前一节中，已经实现了最简单的单点模式webapp 搭建。这种架构很难抗住高qps（每秒访问次数）的冲击。随着业务发展，需要进行改造。一套抗高访问量的系统是很复杂的，每一个组件都有其优化的点。在众多的环境中，数据库往往是最薄弱的一环. \n对于数据库优化，目前有几种\n- 数据库上流进行缓存。将热数据存入内存数据库中，如常见的nosql数据库 redis、memcache；或者添加到webapp 的localcache中。这种方式优点是: 部署简单；执行简单。缺点是 入侵代码;增加代码复杂度；缓存数据存在不一致的风险；缓存命中率如果无法保证的话，也达不到保证下游安全的目的。\n- mysql 进行主从部署，一般来说主库只负责写操作，并将数据库内容同步更新到从库中。从库负责读操作。优点是：对代码入侵程度小；当某个库不可用时，可以进行切换。缺点是：在大规模的写操作时，可能会带来主从数据的延迟；主库压力大。\n- 进行拆库拆表。 mysql 主从部署解决不了当数据急剧增加上，查询、插入过慢的问题。这时候一般我们会进行拆库拆表，这是一个痛苦的过程。其对业务代码入侵非常大。\n上述几个方法，可能会同时存在。在这里介绍下，最常见的添加缓存的方案。并进行扩展，描述 redis 怎么进行主从部署以及自动进行主从切换（mysql 主从部署的大体也是这么一个流程，就不重复介绍了）。\n\n# 相关工具\n本节会用到新的三个伙伴\n- redis ： 基于内存的 key-value 存储系统,能承受较高的qps，支持本地磁盘持久化备份。采用单线程的设计方案，逻辑相对简单。\n- docker-compose : docker 相关的手脚架工具，可以定义 、部署多个docker 容器。\n（相信大家到我前一节又长又臭的docker run 命令已经有些无奈了。docker - compose 能帮助我们解决这个问题）\n- sentinel : 用于管理、监控 以及故障迁移 redis的工具\n\n# 分布式环境构建\n## 缓存设计 -  基于docker单独redis搭建\n这里引入 docker-compose 来帮助我们管理日益复杂的docker 容器.docker-compose 安装 `sudo pip install -U docker-compose`\n安装好后，创建一个名为 docker-compose.yml文件 `touch docker-compose.yml`,并往文件内添加以下内容\n```yml\nversion: '2.0' # docker-compose.yml 的版本信息,这里写成2.X\nservices:   # 要定义的服务信息，这里除了需要添加之前的webapp 和 mysql 的运行环境，还需要添加redis服务\n   webapp:\n        image: golang       # 镜像名称\n        container_name: webapp # 生成的容器名称\n        ports:\n            - 8080:80      # 宿主机器和容器的端口映射，这里是 宿主机器端口号:容器端口号\n        networks:\n            - front        # 此容器添加入的网络\n        volumes:\n            - ./go/webapp:/go/src/webapp   # 宿主机器目录和容器目录的映射， 这里是 宿主机器目录:容器内目录\n            - ./sh:/sh\n        command: sh /sh/start.sh       # 容器创建后要运行的命令\n```\n上面这段配置相当于 上节的 \n```shell\ndocker run -d -p  8080:80 -v $HOME/src/go/webapp:/go/src/webapp -v $HOME/src/sh:/sh --network front golang sh /sh/start.sh`\n```\n接下来配置docker-compose.yml部分\n```yml   \n   mysql:\n        image: mysql\n        container_name: mysql\n        ports:\n            - 3306:3306\n        networks:\n            - front\n        environment:\n            \"MYSQL_ROOT_PASSWORD\": \"123456\" # 容器内要设置的系统变量，这里是设置容器的mysql root密码\n   redis_master:\n        image: redis\n        container_name: redis_master\n        networks:\n            - front\n        ports:\n            - 7002:6379\n        restart: always\n\n  networks:     # 定义网络信息\n    front: # 新网络名称\n        driver: bridge # 网络的模式,一般都选择bridge （docker中有多种网路模式，可以根据不同的使用场景进行使用，想深入了解，可以看docker官网介绍）\n```\nwebapp 中需要操作redis，这里依赖redigo这个开源的库，在启动之前把依赖下载的指令加入之前的start.sh 中,start.sh现在为\n\n```shell\ngo get -u github.com/go-sql-driver/mysql && go get -u github.com/garyburd/redigo/redis  &&  go run /go/src/webapp/main.go\n```\ndocker-compose.yml 完成后，在当前目录下执行 `docker-compose up -d`,常见容器<br>\n输入 `docker container  ls -a`\n{%img /images/2_compose_ret.png%}\n看到我们的redis，mysql，webapp已经跑起来了\n\n## 代码改写\n基本的开发环境已经搭建完毕，现在改写我们之前的webapp 代码<br>\n这里先添加 三个关于缓存操作的代码\n- 添加缓存\n```go\n//将点赞数放入redis_master缓存中\nfunc setToCache(resourceID int64, praiseCount int64) error {\n        conn, err := redis.Dial(\"tcp\", \"redis_master:6379\") //连接redis, host:port形式，host是上面定义的容器名称，port 是redis容器的redis服务端口号\n        if err != nil {\n                return err\n        }\n        defer conn.Close()\n        //const praise_count_cache_key_fmt string = \"resource_%d_prasie_cache\"\n        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID) \n        _, err = conn.Do(\"SET\", key, praiseCount) //将结果放入redis中\n        return err\n\n}\n```\n- 清除缓存\n``` go\n//清除缓存数据\nfunc CleanCache(resourceID int64) error {\n        conn, err := redis.Dial(\"tcp\", \"redis_master:6379\")\n        if err != nil {\n                return err\n        }\n        defer conn.Close()\n        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)\n        _, err = conn.Do(\"DEL\", key)\n        return err\n}\n```\n- 从缓存中获取数据\n``` go\n//从redis_master中获取点赞数\nfunc getFromCache(resourceID int64) (int64, error) {\n        conn, err := redis.Dial(\"tcp\", \"redis_master:6379\")\n        if err != nil {\n                return 0, err\n        }\n        defer conn.Close()\n        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)\n        praiseCount, err := redis.Int64(conn.Do(\"GET\", key))\n        if err != nil {\n                return 0, err\n        }\n        return praiseCount, nil\n}\n```\n接下来修改主流程里面的代码\n删除缓存操作放在写操作内，保证缓存一致\n```go\nfunc setPrasieCount(w http.ResponseWriter, req *http.Request) { \n       ..... //省略代码，如需要看上一节，在git中下载\n        _, err = db.Query(sql)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        CleanCache(resourceID) //在添加点赞数是删除缓存\n        retBytes, _ := json.Marshal(Response{Errno: 0})\n        io.WriteString(w, string(retBytes))\n\n}\n```\n读取缓存\n```go\nfunc getPrasieCount(w http.ResponseWriter, req *http.Request) {\n        ... //省略参数获取部分\n        praiseCount, err := getFromCache(resourceID)  // 从缓存读取点赞数\n        if err != nil && err != redis.ErrNil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n\n        if err != redis.ErrNil { //当缓存内有数据时直接返回\n\n                res := &Response{Errno: 0, Data: &Item{ResourceID: resourceID, Count: praiseCount}}\n                retBytes, _ := json.Marshal(res)\n                setToCache(resourceID, praiseCount)\n                io.WriteString(w, string(retBytes))\n                return\n\n        }\n        ......//省略从数据库读取数据部分\n        \n        setToCache(resourceID, count) //缓存内没有数据，将从数据库里面读到的数据放入缓存中，以便下次使用\n        retBytes, _ := json.Marshal(res)\n        io.WriteString(w, string(retBytes))\n}\n```\n从上述代码中，可以看到，在读取点赞数时，先读缓存，如果缓存有数据我们直接当做结果进行返回。如果结果中没有数据，在进行数据库查询，并将查询结果放回redis-cache中。当有足够的高的缓存命中率时，能很好减少到下游db的流量，从而达到保护db的目的<br>\n在写点赞数时，会把redis cache的数据进行删除，从而保证下次直读db，保证数据的一致性。***存在缓存设计的风险点，当缓存删除失败时，会造成缓存数据和db数据不一致，对于要求数据强一致的业务不能这么进行设计***\n此时架构为：\n{% img /images/2_webapp_struct_1.png %}\n在原来的基础上多了一层缓存\n## 主从结构的分流设计 - 基于docker带有主从结构的redis 搭建\n至此，保护db的目的已经达到了。假设缓存流量持续上涨，缓存命中率也较高的情况下。redis-cache会成为新的瓶颈，除了在redis -cache 上在加一层在服务器上的local-cache外。我们还有第二个解决方案 ，进行主从结构的部署,（这里提供redis的解决方案，db也可以参考这种方案）。 redis 本身就支持主从结构的部署，只需要简单的命令 `redis-server --slaveof <$redis_master_host> <$redis_master_port>` 即可<br>\n\n下面解决往docker-compose.yml添加新服务\n```yml\n redis_slave_1:\n        image: redis\n        ports:\n            - 7003:6379\n        restart: always\n        container_name: redis_slave_1\n        command: redis-server --slaveof redis_master 6379 #启动一个redis服务，并设置成为redis_master的从库\n        networks:\n            - front\n        image: redis\n        restart: always\n   redis_slave_2:\n        image: redis\n        ports:\n            - 7004:6379\n        restart: always\n        container_name: redis_slave_2\n        networks:\n            - front\n        image: redis\n        restart: always\n        command: redis-server --slaveof redis_master 6379\n```\n修改完成后，执行 `docker-compose up -d` 镜像重新部署\n{%img /images/2_compose_ret2.png%}\n结果显示，我们两个redis 的从库已经部署好了\n### 代码改写\n下面进行读写入口的改写\n```go\nfunc getFromCache(resourceID int64) (int64, error) {\n        conn, err := redis.Dial(\"tcp\", \"redis_slave_1:6379\") //更改读逻辑的redis入口\n        if err != nil {\n                return 0, err\n        }\n        ....//省略其他逻辑\n       return praiseCount, nil\n}\n```\n最后，写缓存流量在redis_master 主库上，读流量在从库上（从库如果有写操作会进行保存），大大减少redis master主库上的流量，从而达到分流的目的\n此时的架构为：\n{% img /images/2_webapp_struct_2.png %}\nredis部署呈现主从结构\n## 自动主从切换 - 基于docker的sentinel 环境搭建\n通过以上两个设计，系统稳定性已经上升了一个档次。但，我们观察到，主库现在又面临着单点的问题。如果主库出现可用性问题，结果往往是灾难的。我们需要套机制来进行监控主库和稳定性和当出现问题时，能进行主从切换,我们依旧以redis为例\nsentinel作为最常用的redis 监控、主从切换工具而被广泛应用。首先，先进行sentinel配置的编写,保存为 sentinel.conf\n```shell\nport 26379 # sentinel 的服务端口\n\ndir /tmp  # 工作文件目录\n\nsentinel monitor master redis_master 6379 1 # 对redis主库进行监听 后面三个参数的意思分别是 ： 主库的host，主库的端口，当 1 个sentinel 检查出现错误后，自动进行主从切换\nsentinel down-after-milliseconds master 30000 # 心跳检查，当主库在30000 ms内没有应答，则认为其已经不可用，进行容灾操作\n```\n在启动两个sentinel 服务容器\n```yml\nsentinel_1:\n        image: redis\n        ports:\n            - 7006:26379\n        restart: always\n        container_name: sentinel_1\n        networks:\n            - front\n        image: redis\n        volumes:\n            - ./conf:/data/conf\n        restart: always\n        command: redis-server /data/conf/sentinel.conf --sentinel   \n\n   sentinel_2:\n        image: redis\n        ports:\n            - 7005:26379\n        restart: always\n        container_name: sentinel_2\n        networks:\n            - front\n        image: redis\n        volumes:\n            - ./conf:/data/conf\n        restart: always\n        command: redis-server /data/conf/sentinel.conf --sentinel\n```\n` command: redis-server /data/conf/sentinel.conf --sentinel`  \n用这条命令启动一个sentinel服务，监控redis\n```shell\ndocker-compose up -d \ndocker container ls -a \n```\n重新部署和查看，我们看到两个sentinel 服务已经启动\n{%img /image/2_compose_ret3 %}\n在改写代码之前，我们手动测试下。\n1. `docker logs -f sentinel_1` 查看sentienl_1 容器中标准输出流的日志,看到redis主库的状态和地址<br>\n2.  `docker pause redis_master` 手动暂停一个容器，来模拟线上出现问题，sentinel进行的操作,可以看到，sentinel对我们的主库进行了切换。\n{%img /images/2_sentinel_log_1.png %}\n步骤1 结果\n{%img /images/2_sentinel_log_2.png %}\n步骤2 结果\n### 代码改写\n在点赞项目中应用<br>\n获取redis-master地址方法\n```go\npackage redis\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/garyburd/redigo/redis\"\n)\n\ntype Sentinel struct {\n\tName  string\n\tAddrs []string\n}\n\n//为了试验方便，这里写死两个sentinel 地址，比较的做法是通过配置和服务发现中心的方式实现\nvar DefaultSentinel Sentinel = Sentinel{\n\tName:  \"default\",\n\tAddrs: []string{\"sentinel_1:26379\", \"sentinel_2:26379\"},\n}\n\nfunc (s *Sentinel) GetRedisConn() (redis.Conn, error) {\n\n\tfor _, addr := range s.Addrs { //防止一个sentinel挂掉,保证两个可用\n\t\tsentinelConn, err := redis.DialTimeout(\"tcp\", addr, 1*time.Second, 1*time.Second, 1*time.Second)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tdefer sentinelConn.Close()\n\t\tres, err := redis.Strings(sentinelConn.Do(\"SENTINEL\", \"get-master-addr-by-name\", \"master\")) //获取redis 主库的地址\n\t\tlog.Printf(\"redis_master_addr:%v\", res)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tredisConn, err := redis.DialTimeout(\"tcp\", fmt.Sprintf(\"%s:%s\", res[0], res[1]), 1*time.Second, 1*time.Second, 1*time.Second)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\treturn redisConn, nil\n\t}\n\treturn nil, fmt.Errorf(\"sentinel err\")\n}\n```\n此时的架构为：\n{% img /image/2_webapp_struct_3.png %}\n## 总结\n第二章相比起第二章来说，总体的业务功能并没有变化。但是其架构比起之前变得更加复杂，稳定性也得到了较好的保证。\n至此，我们项目的变化过程为:\n{%img /images/2_webapp_struct_4.png%}\n\n## 生产环境中的注意点\n- 本章主要用redis来阐述如果通过改变整体架构来面对大流量场景，其实 mysql的也有类似的操作，在实际应用中常常是先解决mysql的单点问题。\n- 要结合自身业务分析架构的薄弱环境，在进行业务的改造\n- 代码中部分逻辑可以抽象成配置，用热加载的形式载入，而不是单纯的写死。连接下游时，也可以设计成用池的形式维护一个长连接。但是，这样设计代码会很复杂。可以根据使用场景进行选择\n\n\n\n\n\n\n","source":"_posts/server_2.md","raw":"---\ntitle: 服务的搭建及其演变(2) - 高可用分布式缓存系统构建\ndate: 2019-07-06 00:00:00\ncategories:\n - 编程\ntags: \n    - webapp\n    - docker-compose \n    - redis \n    - sentinel\n---\n# 前言\n在前一节中，已经实现了最简单的单点模式webapp 搭建。这种架构很难抗住高qps（每秒访问次数）的冲击。随着业务发展，需要进行改造。一套抗高访问量的系统是很复杂的，每一个组件都有其优化的点。在众多的环境中，数据库往往是最薄弱的一环. \n对于数据库优化，目前有几种\n- 数据库上流进行缓存。将热数据存入内存数据库中，如常见的nosql数据库 redis、memcache；或者添加到webapp 的localcache中。这种方式优点是: 部署简单；执行简单。缺点是 入侵代码;增加代码复杂度；缓存数据存在不一致的风险；缓存命中率如果无法保证的话，也达不到保证下游安全的目的。\n- mysql 进行主从部署，一般来说主库只负责写操作，并将数据库内容同步更新到从库中。从库负责读操作。优点是：对代码入侵程度小；当某个库不可用时，可以进行切换。缺点是：在大规模的写操作时，可能会带来主从数据的延迟；主库压力大。\n- 进行拆库拆表。 mysql 主从部署解决不了当数据急剧增加上，查询、插入过慢的问题。这时候一般我们会进行拆库拆表，这是一个痛苦的过程。其对业务代码入侵非常大。\n上述几个方法，可能会同时存在。在这里介绍下，最常见的添加缓存的方案。并进行扩展，描述 redis 怎么进行主从部署以及自动进行主从切换（mysql 主从部署的大体也是这么一个流程，就不重复介绍了）。\n\n# 相关工具\n本节会用到新的三个伙伴\n- redis ： 基于内存的 key-value 存储系统,能承受较高的qps，支持本地磁盘持久化备份。采用单线程的设计方案，逻辑相对简单。\n- docker-compose : docker 相关的手脚架工具，可以定义 、部署多个docker 容器。\n（相信大家到我前一节又长又臭的docker run 命令已经有些无奈了。docker - compose 能帮助我们解决这个问题）\n- sentinel : 用于管理、监控 以及故障迁移 redis的工具\n\n# 分布式环境构建\n## 缓存设计 -  基于docker单独redis搭建\n这里引入 docker-compose 来帮助我们管理日益复杂的docker 容器.docker-compose 安装 `sudo pip install -U docker-compose`\n安装好后，创建一个名为 docker-compose.yml文件 `touch docker-compose.yml`,并往文件内添加以下内容\n```yml\nversion: '2.0' # docker-compose.yml 的版本信息,这里写成2.X\nservices:   # 要定义的服务信息，这里除了需要添加之前的webapp 和 mysql 的运行环境，还需要添加redis服务\n   webapp:\n        image: golang       # 镜像名称\n        container_name: webapp # 生成的容器名称\n        ports:\n            - 8080:80      # 宿主机器和容器的端口映射，这里是 宿主机器端口号:容器端口号\n        networks:\n            - front        # 此容器添加入的网络\n        volumes:\n            - ./go/webapp:/go/src/webapp   # 宿主机器目录和容器目录的映射， 这里是 宿主机器目录:容器内目录\n            - ./sh:/sh\n        command: sh /sh/start.sh       # 容器创建后要运行的命令\n```\n上面这段配置相当于 上节的 \n```shell\ndocker run -d -p  8080:80 -v $HOME/src/go/webapp:/go/src/webapp -v $HOME/src/sh:/sh --network front golang sh /sh/start.sh`\n```\n接下来配置docker-compose.yml部分\n```yml   \n   mysql:\n        image: mysql\n        container_name: mysql\n        ports:\n            - 3306:3306\n        networks:\n            - front\n        environment:\n            \"MYSQL_ROOT_PASSWORD\": \"123456\" # 容器内要设置的系统变量，这里是设置容器的mysql root密码\n   redis_master:\n        image: redis\n        container_name: redis_master\n        networks:\n            - front\n        ports:\n            - 7002:6379\n        restart: always\n\n  networks:     # 定义网络信息\n    front: # 新网络名称\n        driver: bridge # 网络的模式,一般都选择bridge （docker中有多种网路模式，可以根据不同的使用场景进行使用，想深入了解，可以看docker官网介绍）\n```\nwebapp 中需要操作redis，这里依赖redigo这个开源的库，在启动之前把依赖下载的指令加入之前的start.sh 中,start.sh现在为\n\n```shell\ngo get -u github.com/go-sql-driver/mysql && go get -u github.com/garyburd/redigo/redis  &&  go run /go/src/webapp/main.go\n```\ndocker-compose.yml 完成后，在当前目录下执行 `docker-compose up -d`,常见容器<br>\n输入 `docker container  ls -a`\n{%img /images/2_compose_ret.png%}\n看到我们的redis，mysql，webapp已经跑起来了\n\n## 代码改写\n基本的开发环境已经搭建完毕，现在改写我们之前的webapp 代码<br>\n这里先添加 三个关于缓存操作的代码\n- 添加缓存\n```go\n//将点赞数放入redis_master缓存中\nfunc setToCache(resourceID int64, praiseCount int64) error {\n        conn, err := redis.Dial(\"tcp\", \"redis_master:6379\") //连接redis, host:port形式，host是上面定义的容器名称，port 是redis容器的redis服务端口号\n        if err != nil {\n                return err\n        }\n        defer conn.Close()\n        //const praise_count_cache_key_fmt string = \"resource_%d_prasie_cache\"\n        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID) \n        _, err = conn.Do(\"SET\", key, praiseCount) //将结果放入redis中\n        return err\n\n}\n```\n- 清除缓存\n``` go\n//清除缓存数据\nfunc CleanCache(resourceID int64) error {\n        conn, err := redis.Dial(\"tcp\", \"redis_master:6379\")\n        if err != nil {\n                return err\n        }\n        defer conn.Close()\n        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)\n        _, err = conn.Do(\"DEL\", key)\n        return err\n}\n```\n- 从缓存中获取数据\n``` go\n//从redis_master中获取点赞数\nfunc getFromCache(resourceID int64) (int64, error) {\n        conn, err := redis.Dial(\"tcp\", \"redis_master:6379\")\n        if err != nil {\n                return 0, err\n        }\n        defer conn.Close()\n        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)\n        praiseCount, err := redis.Int64(conn.Do(\"GET\", key))\n        if err != nil {\n                return 0, err\n        }\n        return praiseCount, nil\n}\n```\n接下来修改主流程里面的代码\n删除缓存操作放在写操作内，保证缓存一致\n```go\nfunc setPrasieCount(w http.ResponseWriter, req *http.Request) { \n       ..... //省略代码，如需要看上一节，在git中下载\n        _, err = db.Query(sql)\n        if err != nil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n        CleanCache(resourceID) //在添加点赞数是删除缓存\n        retBytes, _ := json.Marshal(Response{Errno: 0})\n        io.WriteString(w, string(retBytes))\n\n}\n```\n读取缓存\n```go\nfunc getPrasieCount(w http.ResponseWriter, req *http.Request) {\n        ... //省略参数获取部分\n        praiseCount, err := getFromCache(resourceID)  // 从缓存读取点赞数\n        if err != nil && err != redis.ErrNil {\n                returnErrMsg(w, -1, fmt.Sprintf(\"%v\", err))\n                return\n        }\n\n        if err != redis.ErrNil { //当缓存内有数据时直接返回\n\n                res := &Response{Errno: 0, Data: &Item{ResourceID: resourceID, Count: praiseCount}}\n                retBytes, _ := json.Marshal(res)\n                setToCache(resourceID, praiseCount)\n                io.WriteString(w, string(retBytes))\n                return\n\n        }\n        ......//省略从数据库读取数据部分\n        \n        setToCache(resourceID, count) //缓存内没有数据，将从数据库里面读到的数据放入缓存中，以便下次使用\n        retBytes, _ := json.Marshal(res)\n        io.WriteString(w, string(retBytes))\n}\n```\n从上述代码中，可以看到，在读取点赞数时，先读缓存，如果缓存有数据我们直接当做结果进行返回。如果结果中没有数据，在进行数据库查询，并将查询结果放回redis-cache中。当有足够的高的缓存命中率时，能很好减少到下游db的流量，从而达到保护db的目的<br>\n在写点赞数时，会把redis cache的数据进行删除，从而保证下次直读db，保证数据的一致性。***存在缓存设计的风险点，当缓存删除失败时，会造成缓存数据和db数据不一致，对于要求数据强一致的业务不能这么进行设计***\n此时架构为：\n{% img /images/2_webapp_struct_1.png %}\n在原来的基础上多了一层缓存\n## 主从结构的分流设计 - 基于docker带有主从结构的redis 搭建\n至此，保护db的目的已经达到了。假设缓存流量持续上涨，缓存命中率也较高的情况下。redis-cache会成为新的瓶颈，除了在redis -cache 上在加一层在服务器上的local-cache外。我们还有第二个解决方案 ，进行主从结构的部署,（这里提供redis的解决方案，db也可以参考这种方案）。 redis 本身就支持主从结构的部署，只需要简单的命令 `redis-server --slaveof <$redis_master_host> <$redis_master_port>` 即可<br>\n\n下面解决往docker-compose.yml添加新服务\n```yml\n redis_slave_1:\n        image: redis\n        ports:\n            - 7003:6379\n        restart: always\n        container_name: redis_slave_1\n        command: redis-server --slaveof redis_master 6379 #启动一个redis服务，并设置成为redis_master的从库\n        networks:\n            - front\n        image: redis\n        restart: always\n   redis_slave_2:\n        image: redis\n        ports:\n            - 7004:6379\n        restart: always\n        container_name: redis_slave_2\n        networks:\n            - front\n        image: redis\n        restart: always\n        command: redis-server --slaveof redis_master 6379\n```\n修改完成后，执行 `docker-compose up -d` 镜像重新部署\n{%img /images/2_compose_ret2.png%}\n结果显示，我们两个redis 的从库已经部署好了\n### 代码改写\n下面进行读写入口的改写\n```go\nfunc getFromCache(resourceID int64) (int64, error) {\n        conn, err := redis.Dial(\"tcp\", \"redis_slave_1:6379\") //更改读逻辑的redis入口\n        if err != nil {\n                return 0, err\n        }\n        ....//省略其他逻辑\n       return praiseCount, nil\n}\n```\n最后，写缓存流量在redis_master 主库上，读流量在从库上（从库如果有写操作会进行保存），大大减少redis master主库上的流量，从而达到分流的目的\n此时的架构为：\n{% img /images/2_webapp_struct_2.png %}\nredis部署呈现主从结构\n## 自动主从切换 - 基于docker的sentinel 环境搭建\n通过以上两个设计，系统稳定性已经上升了一个档次。但，我们观察到，主库现在又面临着单点的问题。如果主库出现可用性问题，结果往往是灾难的。我们需要套机制来进行监控主库和稳定性和当出现问题时，能进行主从切换,我们依旧以redis为例\nsentinel作为最常用的redis 监控、主从切换工具而被广泛应用。首先，先进行sentinel配置的编写,保存为 sentinel.conf\n```shell\nport 26379 # sentinel 的服务端口\n\ndir /tmp  # 工作文件目录\n\nsentinel monitor master redis_master 6379 1 # 对redis主库进行监听 后面三个参数的意思分别是 ： 主库的host，主库的端口，当 1 个sentinel 检查出现错误后，自动进行主从切换\nsentinel down-after-milliseconds master 30000 # 心跳检查，当主库在30000 ms内没有应答，则认为其已经不可用，进行容灾操作\n```\n在启动两个sentinel 服务容器\n```yml\nsentinel_1:\n        image: redis\n        ports:\n            - 7006:26379\n        restart: always\n        container_name: sentinel_1\n        networks:\n            - front\n        image: redis\n        volumes:\n            - ./conf:/data/conf\n        restart: always\n        command: redis-server /data/conf/sentinel.conf --sentinel   \n\n   sentinel_2:\n        image: redis\n        ports:\n            - 7005:26379\n        restart: always\n        container_name: sentinel_2\n        networks:\n            - front\n        image: redis\n        volumes:\n            - ./conf:/data/conf\n        restart: always\n        command: redis-server /data/conf/sentinel.conf --sentinel\n```\n` command: redis-server /data/conf/sentinel.conf --sentinel`  \n用这条命令启动一个sentinel服务，监控redis\n```shell\ndocker-compose up -d \ndocker container ls -a \n```\n重新部署和查看，我们看到两个sentinel 服务已经启动\n{%img /image/2_compose_ret3 %}\n在改写代码之前，我们手动测试下。\n1. `docker logs -f sentinel_1` 查看sentienl_1 容器中标准输出流的日志,看到redis主库的状态和地址<br>\n2.  `docker pause redis_master` 手动暂停一个容器，来模拟线上出现问题，sentinel进行的操作,可以看到，sentinel对我们的主库进行了切换。\n{%img /images/2_sentinel_log_1.png %}\n步骤1 结果\n{%img /images/2_sentinel_log_2.png %}\n步骤2 结果\n### 代码改写\n在点赞项目中应用<br>\n获取redis-master地址方法\n```go\npackage redis\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/garyburd/redigo/redis\"\n)\n\ntype Sentinel struct {\n\tName  string\n\tAddrs []string\n}\n\n//为了试验方便，这里写死两个sentinel 地址，比较的做法是通过配置和服务发现中心的方式实现\nvar DefaultSentinel Sentinel = Sentinel{\n\tName:  \"default\",\n\tAddrs: []string{\"sentinel_1:26379\", \"sentinel_2:26379\"},\n}\n\nfunc (s *Sentinel) GetRedisConn() (redis.Conn, error) {\n\n\tfor _, addr := range s.Addrs { //防止一个sentinel挂掉,保证两个可用\n\t\tsentinelConn, err := redis.DialTimeout(\"tcp\", addr, 1*time.Second, 1*time.Second, 1*time.Second)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tdefer sentinelConn.Close()\n\t\tres, err := redis.Strings(sentinelConn.Do(\"SENTINEL\", \"get-master-addr-by-name\", \"master\")) //获取redis 主库的地址\n\t\tlog.Printf(\"redis_master_addr:%v\", res)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tredisConn, err := redis.DialTimeout(\"tcp\", fmt.Sprintf(\"%s:%s\", res[0], res[1]), 1*time.Second, 1*time.Second, 1*time.Second)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\treturn redisConn, nil\n\t}\n\treturn nil, fmt.Errorf(\"sentinel err\")\n}\n```\n此时的架构为：\n{% img /image/2_webapp_struct_3.png %}\n## 总结\n第二章相比起第二章来说，总体的业务功能并没有变化。但是其架构比起之前变得更加复杂，稳定性也得到了较好的保证。\n至此，我们项目的变化过程为:\n{%img /images/2_webapp_struct_4.png%}\n\n## 生产环境中的注意点\n- 本章主要用redis来阐述如果通过改变整体架构来面对大流量场景，其实 mysql的也有类似的操作，在实际应用中常常是先解决mysql的单点问题。\n- 要结合自身业务分析架构的薄弱环境，在进行业务的改造\n- 代码中部分逻辑可以抽象成配置，用热加载的形式载入，而不是单纯的写死。连接下游时，也可以设计成用池的形式维护一个长连接。但是，这样设计代码会很复杂。可以根据使用场景进行选择\n\n\n\n\n\n\n","slug":"server_2","published":1,"updated":"2019-07-04T11:46:07.083Z","_id":"cjxn88qs900004e00ol0kdzxl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在前一节中，已经实现了最简单的单点模式webapp 搭建。这种架构很难抗住高qps（每秒访问次数）的冲击。随着业务发展，需要进行改造。一套抗高访问量的系统是很复杂的，每一个组件都有其优化的点。在众多的环境中，数据库往往是最薄弱的一环.<br>对于数据库优化，目前有几种</p>\n<ul>\n<li>数据库上流进行缓存。将热数据存入内存数据库中，如常见的nosql数据库 redis、memcache；或者添加到webapp 的localcache中。这种方式优点是: 部署简单；执行简单。缺点是 入侵代码;增加代码复杂度；缓存数据存在不一致的风险；缓存命中率如果无法保证的话，也达不到保证下游安全的目的。</li>\n<li>mysql 进行主从部署，一般来说主库只负责写操作，并将数据库内容同步更新到从库中。从库负责读操作。优点是：对代码入侵程度小；当某个库不可用时，可以进行切换。缺点是：在大规模的写操作时，可能会带来主从数据的延迟；主库压力大。</li>\n<li>进行拆库拆表。 mysql 主从部署解决不了当数据急剧增加上，查询、插入过慢的问题。这时候一般我们会进行拆库拆表，这是一个痛苦的过程。其对业务代码入侵非常大。<br>上述几个方法，可能会同时存在。在这里介绍下，最常见的添加缓存的方案。并进行扩展，描述 redis 怎么进行主从部署以及自动进行主从切换（mysql 主从部署的大体也是这么一个流程，就不重复介绍了）。</li>\n</ul>\n<h1 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h1><p>本节会用到新的三个伙伴</p>\n<ul>\n<li>redis ： 基于内存的 key-value 存储系统,能承受较高的qps，支持本地磁盘持久化备份。采用单线程的设计方案，逻辑相对简单。</li>\n<li>docker-compose : docker 相关的手脚架工具，可以定义 、部署多个docker 容器。<br>（相信大家到我前一节又长又臭的docker run 命令已经有些无奈了。docker - compose 能帮助我们解决这个问题）</li>\n<li>sentinel : 用于管理、监控 以及故障迁移 redis的工具</li>\n</ul>\n<h1 id=\"分布式环境构建\"><a href=\"#分布式环境构建\" class=\"headerlink\" title=\"分布式环境构建\"></a>分布式环境构建</h1><h2 id=\"缓存设计-基于docker单独redis搭建\"><a href=\"#缓存设计-基于docker单独redis搭建\" class=\"headerlink\" title=\"缓存设计 -  基于docker单独redis搭建\"></a>缓存设计 -  基于docker单独redis搭建</h2><p>这里引入 docker-compose 来帮助我们管理日益复杂的docker 容器.docker-compose 安装 <code>sudo pip install -U docker-compose</code><br>安装好后，创建一个名为 docker-compose.yml文件 <code>touch docker-compose.yml</code>,并往文件内添加以下内容<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2.0'</span> <span class=\"comment\"># docker-compose.yml 的版本信息,这里写成2.X</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>   <span class=\"comment\"># 要定义的服务信息，这里除了需要添加之前的webapp 和 mysql 的运行环境，还需要添加redis服务</span></span><br><span class=\"line\"><span class=\"attr\">   webapp:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> golang       <span class=\"comment\"># 镜像名称</span></span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> webapp <span class=\"comment\"># 生成的容器名称</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">8080</span>:<span class=\"number\">80</span>      <span class=\"comment\"># 宿主机器和容器的端口映射，这里是 宿主机器端口号:容器端口号</span></span><br><span class=\"line\"><span class=\"attr\">        networks:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> front        <span class=\"comment\"># 此容器添加入的网络</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./go/webapp:/go/src/webapp   <span class=\"comment\"># 宿主机器目录和容器目录的映射， 这里是 宿主机器目录:容器内目录</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./sh:/sh</span><br><span class=\"line\"><span class=\"attr\">        command:</span> sh /sh/start.sh       <span class=\"comment\"># 容器创建后要运行的命令</span></span><br></pre></td></tr></table></figure></p>\n<p>上面这段配置相当于 上节的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p  8080:80 -v $HOME/src/go/webapp:/go/src/webapp -v $HOME/src/sh:/sh --network front golang sh /sh/start.sh`</span><br></pre></td></tr></table></figure></p>\n<p>接下来配置docker-compose.yml部分<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\"> mysql:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> mysql</span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> mysql</span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"number\">3306</span>:<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">      networks:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> front</span><br><span class=\"line\"><span class=\"attr\">      environment:</span></span><br><span class=\"line\"><span class=\"attr\">          \"MYSQL_ROOT_PASSWORD\":</span> <span class=\"string\">\"123456\"</span> <span class=\"comment\"># 容器内要设置的系统变量，这里是设置容器的mysql root密码</span></span><br><span class=\"line\"><span class=\"attr\"> redis_master:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> redis_master</span><br><span class=\"line\"><span class=\"attr\">      networks:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> front</span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"number\">7002</span>:<span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> always</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span>     <span class=\"comment\"># 定义网络信息</span></span><br><span class=\"line\"><span class=\"attr\">  front:</span> <span class=\"comment\"># 新网络名称</span></span><br><span class=\"line\"><span class=\"attr\">      driver:</span> bridge <span class=\"comment\"># 网络的模式,一般都选择bridge （docker中有多种网路模式，可以根据不同的使用场景进行使用，想深入了解，可以看docker官网介绍）</span></span><br></pre></td></tr></table></figure></p>\n<p>webapp 中需要操作redis，这里依赖redigo这个开源的库，在启动之前把依赖下载的指令加入之前的start.sh 中,start.sh现在为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-sql-driver/mysql &amp;&amp; go get -u github.com/garyburd/redigo/redis  &amp;&amp;  go run /go/src/webapp/main.go</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml 完成后，在当前目录下执行 <code>docker-compose up -d</code>,常见容器<br><br>输入 <code>docker container  ls -a</code><br><img src=\"/images/2_compose_ret.png\"><br>看到我们的redis，mysql，webapp已经跑起来了</p>\n<h2 id=\"代码改写\"><a href=\"#代码改写\" class=\"headerlink\" title=\"代码改写\"></a>代码改写</h2><p>基本的开发环境已经搭建完毕，现在改写我们之前的webapp 代码<br><br>这里先添加 三个关于缓存操作的代码</p>\n<ul>\n<li><p>添加缓存</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将点赞数放入redis_master缓存中</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> setToCache(resourceID <span class=\"keyword\">int64</span>, praiseCount <span class=\"keyword\">int64</span>) error &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_master:6379\"</span>) <span class=\"comment\">//连接redis, host:port形式，host是上面定义的容器名称，port 是redis容器的redis服务端口号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">        <span class=\"comment\">//const praise_count_cache_key_fmt string = \"resource_%d_prasie_cache\"</span></span><br><span class=\"line\">        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID) </span><br><span class=\"line\">        _, err = conn.Do(<span class=\"string\">\"SET\"</span>, key, praiseCount) <span class=\"comment\">//将结果放入redis中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除缓存</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除缓存数据</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> CleanCache(resourceID <span class=\"keyword\">int64</span>) error &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_master:6379\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)</span><br><span class=\"line\">        _, err = conn.Do(<span class=\"string\">\"DEL\"</span>, key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从缓存中获取数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从redis_master中获取点赞数</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> getFromCache(resourceID <span class=\"keyword\">int64</span>) (<span class=\"keyword\">int64</span>, error) &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_master:6379\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)</span><br><span class=\"line\">        praiseCount, err := redis.Int64(conn.Do(<span class=\"string\">\"GET\"</span>, key))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> praiseCount, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来修改主流程里面的代码<br>删除缓存操作放在写操作内，保证缓存一致<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> setPrasieCount(w http.ResponseWriter, req *http.Request) &#123; </span><br><span class=\"line\">       ..... <span class=\"comment\">//省略代码，如需要看上一节，在git中下载</span></span><br><span class=\"line\">        _, err = db.Query(sql)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        CleanCache(resourceID) <span class=\"comment\">//在添加点赞数是删除缓存</span></span><br><span class=\"line\">        retBytes, _ := json.Marshal(Response&#123;Errno: <span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读取缓存<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> getPrasieCount(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        ... <span class=\"comment\">//省略参数获取部分</span></span><br><span class=\"line\">        praiseCount, err := getFromCache(resourceID)  <span class=\"comment\">// 从缓存读取点赞数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != redis.ErrNil &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != redis.ErrNil &#123; <span class=\"comment\">//当缓存内有数据时直接返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">                res := &amp;Response&#123;Errno: <span class=\"number\">0</span>, Data: &amp;Item&#123;ResourceID: resourceID, Count: praiseCount&#125;&#125;</span><br><span class=\"line\">                retBytes, _ := json.Marshal(res)</span><br><span class=\"line\">                setToCache(resourceID, praiseCount)</span><br><span class=\"line\">                io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ......<span class=\"comment\">//省略从数据库读取数据部分</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        setToCache(resourceID, count) <span class=\"comment\">//缓存内没有数据，将从数据库里面读到的数据放入缓存中，以便下次使用</span></span><br><span class=\"line\">        retBytes, _ := json.Marshal(res)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上述代码中，可以看到，在读取点赞数时，先读缓存，如果缓存有数据我们直接当做结果进行返回。如果结果中没有数据，在进行数据库查询，并将查询结果放回redis-cache中。当有足够的高的缓存命中率时，能很好减少到下游db的流量，从而达到保护db的目的<br><br>在写点赞数时，会把redis cache的数据进行删除，从而保证下次直读db，保证数据的一致性。<strong><em>存在缓存设计的风险点，当缓存删除失败时，会造成缓存数据和db数据不一致，对于要求数据强一致的业务不能这么进行设计</em></strong><br>此时架构为：<br><img src=\"/images/2_webapp_struct_1.png\"><br>在原来的基础上多了一层缓存</p>\n<h2 id=\"主从结构的分流设计-基于docker带有主从结构的redis-搭建\"><a href=\"#主从结构的分流设计-基于docker带有主从结构的redis-搭建\" class=\"headerlink\" title=\"主从结构的分流设计 - 基于docker带有主从结构的redis 搭建\"></a>主从结构的分流设计 - 基于docker带有主从结构的redis 搭建</h2><p>至此，保护db的目的已经达到了。假设缓存流量持续上涨，缓存命中率也较高的情况下。redis-cache会成为新的瓶颈，除了在redis -cache 上在加一层在服务器上的local-cache外。我们还有第二个解决方案 ，进行主从结构的部署,（这里提供redis的解决方案，db也可以参考这种方案）。 redis 本身就支持主从结构的部署，只需要简单的命令 <code>redis-server --slaveof &lt;$redis_master_host&gt; &lt;$redis_master_port&gt;</code> 即可<br></p>\n<p>下面解决往docker-compose.yml添加新服务<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">redis_slave_1:</span></span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       ports:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> <span class=\"number\">7003</span>:<span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">       container_name:</span> redis_slave_1</span><br><span class=\"line\"><span class=\"attr\">       command:</span> redis-server --slaveof redis_master <span class=\"number\">6379</span> <span class=\"comment\">#启动一个redis服务，并设置成为redis_master的从库</span></span><br><span class=\"line\"><span class=\"attr\">       networks:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> front</span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">  redis_slave_2:</span></span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       ports:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> <span class=\"number\">7004</span>:<span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">       container_name:</span> redis_slave_2</span><br><span class=\"line\"><span class=\"attr\">       networks:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> front</span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">       command:</span> redis-server --slaveof redis_master <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure></p>\n<p>修改完成后，执行 <code>docker-compose up -d</code> 镜像重新部署<br><img src=\"/images/2_compose_ret2.png\"><br>结果显示，我们两个redis 的从库已经部署好了</p>\n<h3 id=\"代码改写-1\"><a href=\"#代码改写-1\" class=\"headerlink\" title=\"代码改写\"></a>代码改写</h3><p>下面进行读写入口的改写<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> getFromCache(resourceID <span class=\"keyword\">int64</span>) (<span class=\"keyword\">int64</span>, error) &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_slave_1:6379\"</span>) <span class=\"comment\">//更改读逻辑的redis入口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....<span class=\"comment\">//省略其他逻辑</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> praiseCount, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，写缓存流量在redis_master 主库上，读流量在从库上（从库如果有写操作会进行保存），大大减少redis master主库上的流量，从而达到分流的目的<br>此时的架构为：<br><img src=\"/images/2_webapp_struct_2.png\"><br>redis部署呈现主从结构</p>\n<h2 id=\"自动主从切换-基于docker的sentinel-环境搭建\"><a href=\"#自动主从切换-基于docker的sentinel-环境搭建\" class=\"headerlink\" title=\"自动主从切换 - 基于docker的sentinel 环境搭建\"></a>自动主从切换 - 基于docker的sentinel 环境搭建</h2><p>通过以上两个设计，系统稳定性已经上升了一个档次。但，我们观察到，主库现在又面临着单点的问题。如果主库出现可用性问题，结果往往是灾难的。我们需要套机制来进行监控主库和稳定性和当出现问题时，能进行主从切换,我们依旧以redis为例<br>sentinel作为最常用的redis 监控、主从切换工具而被广泛应用。首先，先进行sentinel配置的编写,保存为 sentinel.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 26379 # sentinel 的服务端口</span><br><span class=\"line\"></span><br><span class=\"line\">dir /tmp  # 工作文件目录</span><br><span class=\"line\"></span><br><span class=\"line\">sentinel monitor master redis_master 6379 1 # 对redis主库进行监听 后面三个参数的意思分别是 ： 主库的host，主库的端口，当 1 个sentinel 检查出现错误后，自动进行主从切换</span><br><span class=\"line\">sentinel down-after-milliseconds master 30000 # 心跳检查，当主库在30000 ms内没有应答，则认为其已经不可用，进行容灾操作</span><br></pre></td></tr></table></figure></p>\n<p>在启动两个sentinel 服务容器<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sentinel_1:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">7006</span>:<span class=\"number\">26379</span></span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> sentinel_1</span><br><span class=\"line\"><span class=\"attr\">        networks:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> front</span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./conf:/data/conf</span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        command:</span> redis-server /data/conf/sentinel.conf --sentinel   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">   sentinel_2:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">7005</span>:<span class=\"number\">26379</span></span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> sentinel_2</span><br><span class=\"line\"><span class=\"attr\">        networks:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> front</span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./conf:/data/conf</span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        command:</span> redis-server /data/conf/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure></p>\n<p><code>command: redis-server /data/conf/sentinel.conf --sentinel</code><br>用这条命令启动一个sentinel服务，监控redis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d </span><br><span class=\"line\">docker container ls -a</span><br></pre></td></tr></table></figure></p>\n<p>重新部署和查看，我们看到两个sentinel 服务已经启动<br><img src=\"/image/2_compose_ret3\"><br>在改写代码之前，我们手动测试下。</p>\n<ol>\n<li><code>docker logs -f sentinel_1</code> 查看sentienl_1 容器中标准输出流的日志,看到redis主库的状态和地址<br></li>\n<li><code>docker pause redis_master</code> 手动暂停一个容器，来模拟线上出现问题，sentinel进行的操作,可以看到，sentinel对我们的主库进行了切换。<img src=\"/images/2_sentinel_log_1.png\">\n步骤1 结果<img src=\"/images/2_sentinel_log_2.png\">\n步骤2 结果<h3 id=\"代码改写-2\"><a href=\"#代码改写-2\" class=\"headerlink\" title=\"代码改写\"></a>代码改写</h3>在点赞项目中应用<br><br>获取redis-master地址方法<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/garyburd/redigo/redis\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sentinel <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddrs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为了试验方便，这里写死两个sentinel 地址，比较的做法是通过配置和服务发现中心的方式实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> DefaultSentinel Sentinel = Sentinel&#123;</span><br><span class=\"line\">\tName:  <span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">\tAddrs: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"sentinel_1:26379\"</span>, <span class=\"string\">\"sentinel_2:26379\"</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (s *Sentinel) GetRedisConn() (redis.Conn, error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, addr := <span class=\"keyword\">range</span> s.Addrs &#123; <span class=\"comment\">//防止一个sentinel挂掉,保证两个可用</span></span><br><span class=\"line\">\t\tsentinelConn, err := redis.DialTimeout(<span class=\"string\">\"tcp\"</span>, addr, <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sentinelConn.Close()</span><br><span class=\"line\">\t\tres, err := redis.Strings(sentinelConn.Do(<span class=\"string\">\"SENTINEL\"</span>, <span class=\"string\">\"get-master-addr-by-name\"</span>, <span class=\"string\">\"master\"</span>)) <span class=\"comment\">//获取redis 主库的地址</span></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"redis_master_addr:%v\"</span>, res)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tredisConn, err := redis.DialTimeout(<span class=\"string\">\"tcp\"</span>, fmt.Sprintf(<span class=\"string\">\"%s:%s\"</span>, res[<span class=\"number\">0</span>], res[<span class=\"number\">1</span>]), <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> redisConn, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"sentinel err\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>此时的架构为：<br><img src=\"/image/2_webapp_struct_3.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>第二章相比起第二章来说，总体的业务功能并没有变化。但是其架构比起之前变得更加复杂，稳定性也得到了较好的保证。<br>至此，我们项目的变化过程为:<br><img src=\"/images/2_webapp_struct_4.png\"></p>\n<h2 id=\"生产环境中的注意点\"><a href=\"#生产环境中的注意点\" class=\"headerlink\" title=\"生产环境中的注意点\"></a>生产环境中的注意点</h2><ul>\n<li>本章主要用redis来阐述如果通过改变整体架构来面对大流量场景，其实 mysql的也有类似的操作，在实际应用中常常是先解决mysql的单点问题。</li>\n<li>要结合自身业务分析架构的薄弱环境，在进行业务的改造</li>\n<li>代码中部分逻辑可以抽象成配置，用热加载的形式载入，而不是单纯的写死。连接下游时，也可以设计成用池的形式维护一个长连接。但是，这样设计代码会很复杂。可以根据使用场景进行选择</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在前一节中，已经实现了最简单的单点模式webapp 搭建。这种架构很难抗住高qps（每秒访问次数）的冲击。随着业务发展，需要进行改造。一套抗高访问量的系统是很复杂的，每一个组件都有其优化的点。在众多的环境中，数据库往往是最薄弱的一环.<br>对于数据库优化，目前有几种</p>\n<ul>\n<li>数据库上流进行缓存。将热数据存入内存数据库中，如常见的nosql数据库 redis、memcache；或者添加到webapp 的localcache中。这种方式优点是: 部署简单；执行简单。缺点是 入侵代码;增加代码复杂度；缓存数据存在不一致的风险；缓存命中率如果无法保证的话，也达不到保证下游安全的目的。</li>\n<li>mysql 进行主从部署，一般来说主库只负责写操作，并将数据库内容同步更新到从库中。从库负责读操作。优点是：对代码入侵程度小；当某个库不可用时，可以进行切换。缺点是：在大规模的写操作时，可能会带来主从数据的延迟；主库压力大。</li>\n<li>进行拆库拆表。 mysql 主从部署解决不了当数据急剧增加上，查询、插入过慢的问题。这时候一般我们会进行拆库拆表，这是一个痛苦的过程。其对业务代码入侵非常大。<br>上述几个方法，可能会同时存在。在这里介绍下，最常见的添加缓存的方案。并进行扩展，描述 redis 怎么进行主从部署以及自动进行主从切换（mysql 主从部署的大体也是这么一个流程，就不重复介绍了）。</li>\n</ul>\n<h1 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h1><p>本节会用到新的三个伙伴</p>\n<ul>\n<li>redis ： 基于内存的 key-value 存储系统,能承受较高的qps，支持本地磁盘持久化备份。采用单线程的设计方案，逻辑相对简单。</li>\n<li>docker-compose : docker 相关的手脚架工具，可以定义 、部署多个docker 容器。<br>（相信大家到我前一节又长又臭的docker run 命令已经有些无奈了。docker - compose 能帮助我们解决这个问题）</li>\n<li>sentinel : 用于管理、监控 以及故障迁移 redis的工具</li>\n</ul>\n<h1 id=\"分布式环境构建\"><a href=\"#分布式环境构建\" class=\"headerlink\" title=\"分布式环境构建\"></a>分布式环境构建</h1><h2 id=\"缓存设计-基于docker单独redis搭建\"><a href=\"#缓存设计-基于docker单独redis搭建\" class=\"headerlink\" title=\"缓存设计 -  基于docker单独redis搭建\"></a>缓存设计 -  基于docker单独redis搭建</h2><p>这里引入 docker-compose 来帮助我们管理日益复杂的docker 容器.docker-compose 安装 <code>sudo pip install -U docker-compose</code><br>安装好后，创建一个名为 docker-compose.yml文件 <code>touch docker-compose.yml</code>,并往文件内添加以下内容<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2.0'</span> <span class=\"comment\"># docker-compose.yml 的版本信息,这里写成2.X</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>   <span class=\"comment\"># 要定义的服务信息，这里除了需要添加之前的webapp 和 mysql 的运行环境，还需要添加redis服务</span></span><br><span class=\"line\"><span class=\"attr\">   webapp:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> golang       <span class=\"comment\"># 镜像名称</span></span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> webapp <span class=\"comment\"># 生成的容器名称</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">8080</span>:<span class=\"number\">80</span>      <span class=\"comment\"># 宿主机器和容器的端口映射，这里是 宿主机器端口号:容器端口号</span></span><br><span class=\"line\"><span class=\"attr\">        networks:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> front        <span class=\"comment\"># 此容器添加入的网络</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./go/webapp:/go/src/webapp   <span class=\"comment\"># 宿主机器目录和容器目录的映射， 这里是 宿主机器目录:容器内目录</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./sh:/sh</span><br><span class=\"line\"><span class=\"attr\">        command:</span> sh /sh/start.sh       <span class=\"comment\"># 容器创建后要运行的命令</span></span><br></pre></td></tr></table></figure></p>\n<p>上面这段配置相当于 上节的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p  8080:80 -v $HOME/src/go/webapp:/go/src/webapp -v $HOME/src/sh:/sh --network front golang sh /sh/start.sh`</span><br></pre></td></tr></table></figure></p>\n<p>接下来配置docker-compose.yml部分<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\"> mysql:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> mysql</span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> mysql</span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"number\">3306</span>:<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">      networks:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> front</span><br><span class=\"line\"><span class=\"attr\">      environment:</span></span><br><span class=\"line\"><span class=\"attr\">          \"MYSQL_ROOT_PASSWORD\":</span> <span class=\"string\">\"123456\"</span> <span class=\"comment\"># 容器内要设置的系统变量，这里是设置容器的mysql root密码</span></span><br><span class=\"line\"><span class=\"attr\"> redis_master:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> redis_master</span><br><span class=\"line\"><span class=\"attr\">      networks:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> front</span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"number\">7002</span>:<span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">      restart:</span> always</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span>     <span class=\"comment\"># 定义网络信息</span></span><br><span class=\"line\"><span class=\"attr\">  front:</span> <span class=\"comment\"># 新网络名称</span></span><br><span class=\"line\"><span class=\"attr\">      driver:</span> bridge <span class=\"comment\"># 网络的模式,一般都选择bridge （docker中有多种网路模式，可以根据不同的使用场景进行使用，想深入了解，可以看docker官网介绍）</span></span><br></pre></td></tr></table></figure></p>\n<p>webapp 中需要操作redis，这里依赖redigo这个开源的库，在启动之前把依赖下载的指令加入之前的start.sh 中,start.sh现在为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-sql-driver/mysql &amp;&amp; go get -u github.com/garyburd/redigo/redis  &amp;&amp;  go run /go/src/webapp/main.go</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml 完成后，在当前目录下执行 <code>docker-compose up -d</code>,常见容器<br><br>输入 <code>docker container  ls -a</code><br><img src=\"/images/2_compose_ret.png\"><br>看到我们的redis，mysql，webapp已经跑起来了</p>\n<h2 id=\"代码改写\"><a href=\"#代码改写\" class=\"headerlink\" title=\"代码改写\"></a>代码改写</h2><p>基本的开发环境已经搭建完毕，现在改写我们之前的webapp 代码<br><br>这里先添加 三个关于缓存操作的代码</p>\n<ul>\n<li><p>添加缓存</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将点赞数放入redis_master缓存中</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> setToCache(resourceID <span class=\"keyword\">int64</span>, praiseCount <span class=\"keyword\">int64</span>) error &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_master:6379\"</span>) <span class=\"comment\">//连接redis, host:port形式，host是上面定义的容器名称，port 是redis容器的redis服务端口号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">        <span class=\"comment\">//const praise_count_cache_key_fmt string = \"resource_%d_prasie_cache\"</span></span><br><span class=\"line\">        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID) </span><br><span class=\"line\">        _, err = conn.Do(<span class=\"string\">\"SET\"</span>, key, praiseCount) <span class=\"comment\">//将结果放入redis中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除缓存</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除缓存数据</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> CleanCache(resourceID <span class=\"keyword\">int64</span>) error &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_master:6379\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)</span><br><span class=\"line\">        _, err = conn.Do(<span class=\"string\">\"DEL\"</span>, key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从缓存中获取数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从redis_master中获取点赞数</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> getFromCache(resourceID <span class=\"keyword\">int64</span>) (<span class=\"keyword\">int64</span>, error) &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_master:6379\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">        key := fmt.Sprintf(praise_count_cache_key_fmt, resourceID)</span><br><span class=\"line\">        praiseCount, err := redis.Int64(conn.Do(<span class=\"string\">\"GET\"</span>, key))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> praiseCount, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来修改主流程里面的代码<br>删除缓存操作放在写操作内，保证缓存一致<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> setPrasieCount(w http.ResponseWriter, req *http.Request) &#123; </span><br><span class=\"line\">       ..... <span class=\"comment\">//省略代码，如需要看上一节，在git中下载</span></span><br><span class=\"line\">        _, err = db.Query(sql)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        CleanCache(resourceID) <span class=\"comment\">//在添加点赞数是删除缓存</span></span><br><span class=\"line\">        retBytes, _ := json.Marshal(Response&#123;Errno: <span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读取缓存<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> getPrasieCount(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        ... <span class=\"comment\">//省略参数获取部分</span></span><br><span class=\"line\">        praiseCount, err := getFromCache(resourceID)  <span class=\"comment\">// 从缓存读取点赞数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != redis.ErrNil &#123;</span><br><span class=\"line\">                returnErrMsg(w, <span class=\"number\">-1</span>, fmt.Sprintf(<span class=\"string\">\"%v\"</span>, err))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != redis.ErrNil &#123; <span class=\"comment\">//当缓存内有数据时直接返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">                res := &amp;Response&#123;Errno: <span class=\"number\">0</span>, Data: &amp;Item&#123;ResourceID: resourceID, Count: praiseCount&#125;&#125;</span><br><span class=\"line\">                retBytes, _ := json.Marshal(res)</span><br><span class=\"line\">                setToCache(resourceID, praiseCount)</span><br><span class=\"line\">                io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ......<span class=\"comment\">//省略从数据库读取数据部分</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        setToCache(resourceID, count) <span class=\"comment\">//缓存内没有数据，将从数据库里面读到的数据放入缓存中，以便下次使用</span></span><br><span class=\"line\">        retBytes, _ := json.Marshal(res)</span><br><span class=\"line\">        io.WriteString(w, <span class=\"keyword\">string</span>(retBytes))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上述代码中，可以看到，在读取点赞数时，先读缓存，如果缓存有数据我们直接当做结果进行返回。如果结果中没有数据，在进行数据库查询，并将查询结果放回redis-cache中。当有足够的高的缓存命中率时，能很好减少到下游db的流量，从而达到保护db的目的<br><br>在写点赞数时，会把redis cache的数据进行删除，从而保证下次直读db，保证数据的一致性。<strong><em>存在缓存设计的风险点，当缓存删除失败时，会造成缓存数据和db数据不一致，对于要求数据强一致的业务不能这么进行设计</em></strong><br>此时架构为：<br><img src=\"/images/2_webapp_struct_1.png\"><br>在原来的基础上多了一层缓存</p>\n<h2 id=\"主从结构的分流设计-基于docker带有主从结构的redis-搭建\"><a href=\"#主从结构的分流设计-基于docker带有主从结构的redis-搭建\" class=\"headerlink\" title=\"主从结构的分流设计 - 基于docker带有主从结构的redis 搭建\"></a>主从结构的分流设计 - 基于docker带有主从结构的redis 搭建</h2><p>至此，保护db的目的已经达到了。假设缓存流量持续上涨，缓存命中率也较高的情况下。redis-cache会成为新的瓶颈，除了在redis -cache 上在加一层在服务器上的local-cache外。我们还有第二个解决方案 ，进行主从结构的部署,（这里提供redis的解决方案，db也可以参考这种方案）。 redis 本身就支持主从结构的部署，只需要简单的命令 <code>redis-server --slaveof &lt;$redis_master_host&gt; &lt;$redis_master_port&gt;</code> 即可<br></p>\n<p>下面解决往docker-compose.yml添加新服务<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">redis_slave_1:</span></span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       ports:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> <span class=\"number\">7003</span>:<span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">       container_name:</span> redis_slave_1</span><br><span class=\"line\"><span class=\"attr\">       command:</span> redis-server --slaveof redis_master <span class=\"number\">6379</span> <span class=\"comment\">#启动一个redis服务，并设置成为redis_master的从库</span></span><br><span class=\"line\"><span class=\"attr\">       networks:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> front</span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">  redis_slave_2:</span></span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       ports:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> <span class=\"number\">7004</span>:<span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">       container_name:</span> redis_slave_2</span><br><span class=\"line\"><span class=\"attr\">       networks:</span></span><br><span class=\"line\"><span class=\"bullet\">           -</span> front</span><br><span class=\"line\"><span class=\"attr\">       image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">       restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">       command:</span> redis-server --slaveof redis_master <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure></p>\n<p>修改完成后，执行 <code>docker-compose up -d</code> 镜像重新部署<br><img src=\"/images/2_compose_ret2.png\"><br>结果显示，我们两个redis 的从库已经部署好了</p>\n<h3 id=\"代码改写-1\"><a href=\"#代码改写-1\" class=\"headerlink\" title=\"代码改写\"></a>代码改写</h3><p>下面进行读写入口的改写<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> getFromCache(resourceID <span class=\"keyword\">int64</span>) (<span class=\"keyword\">int64</span>, error) &#123;</span><br><span class=\"line\">        conn, err := redis.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"redis_slave_1:6379\"</span>) <span class=\"comment\">//更改读逻辑的redis入口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....<span class=\"comment\">//省略其他逻辑</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> praiseCount, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，写缓存流量在redis_master 主库上，读流量在从库上（从库如果有写操作会进行保存），大大减少redis master主库上的流量，从而达到分流的目的<br>此时的架构为：<br><img src=\"/images/2_webapp_struct_2.png\"><br>redis部署呈现主从结构</p>\n<h2 id=\"自动主从切换-基于docker的sentinel-环境搭建\"><a href=\"#自动主从切换-基于docker的sentinel-环境搭建\" class=\"headerlink\" title=\"自动主从切换 - 基于docker的sentinel 环境搭建\"></a>自动主从切换 - 基于docker的sentinel 环境搭建</h2><p>通过以上两个设计，系统稳定性已经上升了一个档次。但，我们观察到，主库现在又面临着单点的问题。如果主库出现可用性问题，结果往往是灾难的。我们需要套机制来进行监控主库和稳定性和当出现问题时，能进行主从切换,我们依旧以redis为例<br>sentinel作为最常用的redis 监控、主从切换工具而被广泛应用。首先，先进行sentinel配置的编写,保存为 sentinel.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 26379 # sentinel 的服务端口</span><br><span class=\"line\"></span><br><span class=\"line\">dir /tmp  # 工作文件目录</span><br><span class=\"line\"></span><br><span class=\"line\">sentinel monitor master redis_master 6379 1 # 对redis主库进行监听 后面三个参数的意思分别是 ： 主库的host，主库的端口，当 1 个sentinel 检查出现错误后，自动进行主从切换</span><br><span class=\"line\">sentinel down-after-milliseconds master 30000 # 心跳检查，当主库在30000 ms内没有应答，则认为其已经不可用，进行容灾操作</span><br></pre></td></tr></table></figure></p>\n<p>在启动两个sentinel 服务容器<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sentinel_1:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">7006</span>:<span class=\"number\">26379</span></span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> sentinel_1</span><br><span class=\"line\"><span class=\"attr\">        networks:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> front</span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./conf:/data/conf</span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        command:</span> redis-server /data/conf/sentinel.conf --sentinel   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">   sentinel_2:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"number\">7005</span>:<span class=\"number\">26379</span></span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> sentinel_2</span><br><span class=\"line\"><span class=\"attr\">        networks:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> front</span><br><span class=\"line\"><span class=\"attr\">        image:</span> redis</span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> ./conf:/data/conf</span><br><span class=\"line\"><span class=\"attr\">        restart:</span> always</span><br><span class=\"line\"><span class=\"attr\">        command:</span> redis-server /data/conf/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure></p>\n<p><code>command: redis-server /data/conf/sentinel.conf --sentinel</code><br>用这条命令启动一个sentinel服务，监控redis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d </span><br><span class=\"line\">docker container ls -a</span><br></pre></td></tr></table></figure></p>\n<p>重新部署和查看，我们看到两个sentinel 服务已经启动<br><img src=\"/image/2_compose_ret3\"><br>在改写代码之前，我们手动测试下。</p>\n<ol>\n<li><code>docker logs -f sentinel_1</code> 查看sentienl_1 容器中标准输出流的日志,看到redis主库的状态和地址<br></li>\n<li><code>docker pause redis_master</code> 手动暂停一个容器，来模拟线上出现问题，sentinel进行的操作,可以看到，sentinel对我们的主库进行了切换。<img src=\"/images/2_sentinel_log_1.png\">\n步骤1 结果<img src=\"/images/2_sentinel_log_2.png\">\n步骤2 结果<h3 id=\"代码改写-2\"><a href=\"#代码改写-2\" class=\"headerlink\" title=\"代码改写\"></a>代码改写</h3>在点赞项目中应用<br><br>获取redis-master地址方法<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/garyburd/redigo/redis\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sentinel <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddrs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为了试验方便，这里写死两个sentinel 地址，比较的做法是通过配置和服务发现中心的方式实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> DefaultSentinel Sentinel = Sentinel&#123;</span><br><span class=\"line\">\tName:  <span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">\tAddrs: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"sentinel_1:26379\"</span>, <span class=\"string\">\"sentinel_2:26379\"</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (s *Sentinel) GetRedisConn() (redis.Conn, error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, addr := <span class=\"keyword\">range</span> s.Addrs &#123; <span class=\"comment\">//防止一个sentinel挂掉,保证两个可用</span></span><br><span class=\"line\">\t\tsentinelConn, err := redis.DialTimeout(<span class=\"string\">\"tcp\"</span>, addr, <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sentinelConn.Close()</span><br><span class=\"line\">\t\tres, err := redis.Strings(sentinelConn.Do(<span class=\"string\">\"SENTINEL\"</span>, <span class=\"string\">\"get-master-addr-by-name\"</span>, <span class=\"string\">\"master\"</span>)) <span class=\"comment\">//获取redis 主库的地址</span></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"redis_master_addr:%v\"</span>, res)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tredisConn, err := redis.DialTimeout(<span class=\"string\">\"tcp\"</span>, fmt.Sprintf(<span class=\"string\">\"%s:%s\"</span>, res[<span class=\"number\">0</span>], res[<span class=\"number\">1</span>]), <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second, <span class=\"number\">1</span>*time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> redisConn, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"sentinel err\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>此时的架构为：<br><img src=\"/image/2_webapp_struct_3.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>第二章相比起第二章来说，总体的业务功能并没有变化。但是其架构比起之前变得更加复杂，稳定性也得到了较好的保证。<br>至此，我们项目的变化过程为:<br><img src=\"/images/2_webapp_struct_4.png\"></p>\n<h2 id=\"生产环境中的注意点\"><a href=\"#生产环境中的注意点\" class=\"headerlink\" title=\"生产环境中的注意点\"></a>生产环境中的注意点</h2><ul>\n<li>本章主要用redis来阐述如果通过改变整体架构来面对大流量场景，其实 mysql的也有类似的操作，在实际应用中常常是先解决mysql的单点问题。</li>\n<li>要结合自身业务分析架构的薄弱环境，在进行业务的改造</li>\n<li>代码中部分逻辑可以抽象成配置，用热加载的形式载入，而不是单纯的写死。连接下游时，也可以设计成用池的形式维护一个长连接。但是，这样设计代码会很复杂。可以根据使用场景进行选择</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxluuib50000y900raopcvjd","category_id":"cjxnxiha200005n00v1nhorfb","_id":"cjxnxihaf00025n00ac67ec98"},{"post_id":"cjxn88qs900004e00ol0kdzxl","category_id":"cjxnxiha200005n00v1nhorfb","_id":"cjxnxihag00035n00au2h6u0t"}],"PostTag":[{"post_id":"cjxi82kc60002wk00imhia65a","tag_id":"cjxi82kcj0006wk00noiaevps","_id":"cjxi82kd7000cwk001v62j751"},{"post_id":"cjxi82kcf0004wk00mb22yp5l","tag_id":"cjxi82kd4000awk00x94hf8x2","_id":"cjxi82kd8000ewk00afda2g5g"},{"post_id":"cjxi82kcu0007wk008kxltwu0","tag_id":"cjxi82kd8000dwk006z50cbts","_id":"cjxi82kd9000gwk00maz6e4zc"},{"post_id":"cjxi82kd30009wk00l1ms69yw","tag_id":"cjxi82kd8000fwk00bioevzat","_id":"cjxi82kda000iwk00nsb243es"},{"post_id":"cjxi82kd5000bwk0057gpb3mp","tag_id":"cjxi82kd9000hwk00ooc09reo","_id":"cjxi82kdb000jwk00c0j1yq65"},{"post_id":"cjxn88qs900004e00ol0kdzxl","tag_id":"cjxnwc32o0000ed001hr2fw6g","_id":"cjxnwc32z0004ed00nvd9bomt"},{"post_id":"cjxn88qs900004e00ol0kdzxl","tag_id":"cjxnwc32w0001ed00z1whbuf7","_id":"cjxnwc32z0005ed007fteyop9"},{"post_id":"cjxn88qs900004e00ol0kdzxl","tag_id":"cjxnwc32w0002ed00v2bd3etq","_id":"cjxnwc32z0006ed006nzebqx8"},{"post_id":"cjxn88qs900004e00ol0kdzxl","tag_id":"cjxnwc32x0003ed004byp5ie8","_id":"cjxnwc32z0007ed001mlz1m24"},{"post_id":"cjxluuib50000y900raopcvjd","tag_id":"cjxnwc32o0000ed001hr2fw6g","_id":"cjxnwi9dh00055u00xb8h82k7"},{"post_id":"cjxluuib50000y900raopcvjd","tag_id":"cjxnwi9cw00005u00vzjfhtql","_id":"cjxnwi9dh00065u00dgt4fzd5"},{"post_id":"cjxluuib50000y900raopcvjd","tag_id":"cjxnwi9dd00025u006v1gnbqp","_id":"cjxnwi9dh00075u00hgzwff9q"},{"post_id":"cjxluuib50000y900raopcvjd","tag_id":"cjxnwi9df00045u003phrk0st","_id":"cjxnwi9dh00085u00d004yoga"}],"Tag":[{"name":"generics","_id":"cjxi82kcj0006wk00noiaevps"},{"name":"concurrency","_id":"cjxi82kd4000awk00x94hf8x2"},{"name":"java reflection","_id":"cjxi82kd8000dwk006z50cbts"},{"name":"data struct","_id":"cjxi82kd8000fwk00bioevzat"},{"name":"java","_id":"cjxi82kd9000hwk00ooc09reo"},{"name":"webapp docker mysql golang","_id":"cjxluuibm0001y900klrzuvuy"},{"name":"webapp docker-compose redis sentinel","_id":"cjxn88qsn00014e00ll44ovx7"},{"name":"webapp","_id":"cjxnwc32o0000ed001hr2fw6g"},{"name":"docker-compose","_id":"cjxnwc32w0001ed00z1whbuf7"},{"name":"redis","_id":"cjxnwc32w0002ed00v2bd3etq"},{"name":"sentinel","_id":"cjxnwc32x0003ed004byp5ie8"},{"name":"docker","_id":"cjxnwi9cw00005u00vzjfhtql"},{"name":"mysql","_id":"cjxnwi9dd00025u006v1gnbqp"},{"name":"golang","_id":"cjxnwi9df00045u003phrk0st"}]}}