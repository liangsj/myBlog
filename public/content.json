{"meta":{"title":"liangSJ","subtitle":null,"description":null,"author":"liangSJ","url":"http://liangsj.top"},"pages":[{"title":"关于我","date":"2019-06-30T00:26:52.000Z","updated":"2019-06-30T00:38:06.592Z","comments":true,"path":"about/index.html","permalink":"http://liangsj.top/about/index.html","excerpt":"","text":"姓名： liangsjmail ：llsj123@163.com经历： 2010-2014 天津大学 2014-1017 中国矿业大学 2019- 百度技术栈 android php golang简述 对计算机充满热爱，喜欢探索自己的未知的领域 认可自己的职业，希望成为一名出色的工程师 希望成为一位有趣的人 希望通过blog总结自己的所学，帮助别人同时也找到自己的缺点"},{"title":"about/about.md","date":"2019-06-30T00:26:39.000Z","updated":"2019-06-30T00:26:40.006Z","comments":true,"path":"about-about-md/index.html","permalink":"http://liangsj.top/about-about-md/index.html","excerpt":"","text":""},{"title":"tafs","date":"2016-04-14T02:42:52.000Z","updated":"2019-06-25T00:00:59.959Z","comments":true,"path":"tafs/index.html","permalink":"http://liangsj.top/tafs/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-04-14T02:42:57.000Z","updated":"2019-06-25T00:00:59.959Z","comments":true,"path":"tags/index.html","permalink":"http://liangsj.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"tree","slug":"tree","date":"2016-05-31T05:44:28.000Z","updated":"2019-06-25T00:00:59.936Z","comments":true,"path":"2016/05/31/tree/","link":"","permalink":"http://liangsj.top/2016/05/31/tree/","excerpt":"","text":"前言 好久没有更新我的博客了，最近快开始校招了。因为长期在外面做开发，加上离考研已经很久了。数据结构的知识都已经记得模模糊糊了。为了准备笔试，同时提高自己的计算机素养。自己试着回忆了一下，树结构的基本算法。 数据结构 二叉树存储解构是一个数据两个指针。换到java中，就是一个变量，两个引用 123456public static class Node&#123; public Node left; public Node right; public int val; &#125; 二叉树的建立 二叉树能顺序存储，也能链式存储。但是链式存储更能直观的表现出二叉树的特征。下面这个算法是由顺序存储结构生成链式存储结构。我把没有数据的结点在数组中用”-1”表示（貌似很多教材都用’＃’表示）。12345678910111213141516public Node buildTree(int[] nums,int i) &#123; // TODO Auto-generated method stub if(i &gt; nums.length -1)&#123; return null; &#125; if(nums[i]== -1 )&#123; return null; &#125; Node n = new Node(); n.val = nums[i]; n.left = buildTree(nums, 2*i); n.right = buildTree(nums, 2*i+1); return n; &#125; 二叉树的遍历 二叉树的遍历是考试中最经常考的内容，他的递归遍历代码优雅，简洁。有一种让人过目不忘的感觉。这里就不给出了，但是值得注意的是，一个结点被无论是哪种遍历，在递归的时候，它已经被被经过了三次。上面上一张考研材料上的图， 标注为１的，是前序遍历标注为2的，是中序遍历标注为3的，是后序遍历 还有一点头脑风暴的感觉，就是用栈来实现递归，其实思想也不难，就是有点绕。总体都是，按照上述路线入栈，前中序当他是最后叶子结点时候，出栈。后序遍历是经过第二次时候才出栈。(原谅我令人可怜的语文水平吧)下面是我写的非递归前序遍历。123456789101112131415void preorder2(Node root)&#123; Stack&lt;Node&gt; s = new Stack&lt;Node&gt;(); while(root !=null || !s.isEmpty())&#123; while(root!= null)&#123; s.push(root); System.out.print(root.val + &quot;---&gt;&quot;); &#125; if(!s.isEmpty() &amp;&amp; root == null)&#123; root=s.pop(); root=root.right; &#125; &#125; &#125; 层次遍历就更简单了，利用队列实现，当队列不为空，出列，读取他的数据，并将他的左右孩子入队列。有趣的是，层次遍历正好是数的线性存储。默认数组位置 ０ 不存放。1234567891011void queueOrder(Node root)&#123; List&lt;Node&gt; l = new ArrayList&lt;Node&gt;(); l.add(root); while(l.size() != 0)&#123; Node n=l.remove(0); System.out.print(&quot; &quot; + n.val); if(n.left != null) l.add(n.left); if(n.right != null) l.add(n.right); &#125;&#125; 其他树是非常有用的数据结构，包括平衡二叉树，二叉查询树，哈夫曼编码都是树有意思的应用。我还没有总结成代码。但是，这些东西挺有趣，包括java中很多容器都利用到树的知识。比如TreeMap ，就是红黑树。 练习代码 拿出来献丑了12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package com.may.eighteen;import java.util.ArrayList;import java.util.List;import java.util.Stack;public class Solution &#123; public static class Node&#123; public Node left; public Node right; public int val; &#125; static int[] nums = &#123;-1,1,2,3,4,5,6,7,8,9&#125;; public static void main(String args[])&#123; Solution s = new Solution(); Node root = s.buildTree(nums,1); System.out.print(&quot;-----hello----&quot;); s.preorder(root); System.out.println(&quot;&quot;); s.preorder(root); System.out.println(&quot;&quot;); s.queueOrder(root); System.out.println(&quot;&quot;); System.out.print(s.findNodeCount(root)); &#125; public Node buildTree(int[] nums,int i) &#123; // TODO Auto-generated method stub if(i &gt; nums.length -1)&#123; return null; &#125; if(nums[i]== -1 )&#123; return null; &#125; Node n = new Node(); n.val = nums[i]; n.left = buildTree(nums, 2*i); n.right = buildTree(nums, 2*i+1); return n; &#125; public void buileTree(int[] preOrder, int[] inOrder, Node root)&#123; if(root == null) return; &#125; void queueOrder(Node root)&#123; List&lt;Node&gt; l = new ArrayList&lt;Node&gt;(); l.add(root); while(l.size() != 0)&#123; Node n=l.remove(0); System.out.print(&quot; &quot; + n.val); if(n.left != null) l.add(n.left); if(n.right != null) l.add(n.right); &#125; &#125; void preorder(Node root)&#123; if(root == null) return; System.out.print(root.val + &quot;---&quot;); preorder(root.left); preorder(root.right); &#125; void preorder2(Node root)&#123; Stack&lt;Node&gt; s = new Stack&lt;Node&gt;(); while(root !=null || !s.isEmpty())&#123; while(root!= null)&#123; s.push(root); System.out.print(root.val + &quot;---&gt;&quot;); &#125; if(!s.isEmpty() &amp;&amp; root == null)&#123; root=s.pop(); root=root.right; &#125; &#125; &#125; int findNodeCount(Node root)&#123; if(root == null)&#123;return 0;&#125; return findNodeCount(root.left) + findNodeCount(root.right) +1; &#125; &#125;","categories":[],"tags":[{"name":"data struct","slug":"data-struct","permalink":"http://liangsj.top/tags/data-struct/"}],"keywords":[]},{"title":"concurrency","slug":"concurrency","date":"2016-04-26T03:27:31.000Z","updated":"2019-06-25T00:00:59.935Z","comments":true,"path":"2016/04/26/concurrency/","link":"","permalink":"http://liangsj.top/2016/04/26/concurrency/","excerpt":"","text":"并发编程 并发编程属于编程技术里面较难掌握的一部分。就我个人而言，日常编写代码中。出现莫名奇妙且很难调试复现出来的bug一样都出现在这一块。由于jvm线程调度有随意性。sun公司也没有将此部分代码公开。我们很难了解里面的具体实现。只能说，在遇上对线程或者多进程编程的需求时，要保持谨慎的态度。一般你觉得这部分会出错，那就会出错。 从操作系统的角度来说，进程是资源分配的最小单位，线程则是系统调度的最小单位。利用并发变成的技术，可以将任务分为不同的部分。充分利用CPU时间。在面对较长时间阻塞时，采用并发技术所带来的好处能覆盖掉上下文切换的损失。当然，进程或者线程增加了同步的成本，在操作同一资源时，同步往往是最难处理的。 在不同的设计中，对并发技术也做了诸多限制。就android而言，在ViewRoot下绘制的UI界面，是不支持多线程的，也就是，只能在主线程内绘制UI界面（当然，有特定的组件能支持多线程绘制）。确保线程的安全。 java 中的并发java是支持多线程的语言。特别是在一些GUI项目和web jsp项目上，多线程是不可或缺的。1、Runnable Thread在java中，Runnable 这个接口可以理解为一下可以放在任务队列上的一个任务。个人认为取名为Runnable有些令人困惑，叫task会不会更加清晰。Thread 这个类可以把他看成一个线程，其中他的start方法，会向系统申请一个线程，并执行写在run()中的代码。在写多线程任务时，一般有两种写法，实现接口 Runnable 将要执行的代码段写入run()中，或者直接继承Thread，复写run().两种方法都可以采用。但是我一般选用第一种，java不支持继承多类。但是可以实现多个接口。要把extends宝贵的位置留出来。另外值得注意的一点。 123MyThread t1 = new MyThread();t1.run();//没有用到多线程，相当于直接调用了一个方法t1.start();//正确的调用方式 在代码中，new MyThread()虽然没有指定引用指向他，但是系统会自动给他生成一个引用。所有在它没有死亡之前，是不会被gc回收的。 2、后台线程我个人的理解中，后台线程属于重要程度比较低的线程。一般的作用是支持前台线程。从而，在前台线程全部结束后，后台线程也会被强行结束。1t1.setDaemon(true);//设置此线程为后台线程的方法。后台线程值得注意的有两点，1、在一般情况下卸载finally关键字后面的代码肯定是会运行的。但是后台线程比较特殊，在系统前台线程全部死亡后，写在后台线程finally后的代码就不会运行。2、由后台线程生成的新的线程，也都是后台。 java thread 锁众所周知，多线程最麻烦问题之一就是同步问题。java语言也设计了一些方便帮我们解决这些问题。1、原子操作根据《java编程思想》一书的建议，自己最好不要依赖于原子操作，因为一般的程序员没有那么好的掌控力。但是了解一下一般的原子操作对我们理解程序还是很有帮助的。 1、对于处理除long，double类型之外的基本变量都是原子性的。（因为long、double在加载时是分别度两次32位）2、在java中，自增操作不是设计出原子性的3、java中封装了一些原子类，如AtomicInteger、AtomicLong等，用法也很简单。 2、synchronized 和volatile Lock.classvolatile:是一个轻量级锁，修饰变量时，相当于说明，被修改是，会刷新缓存。保障别的线程读到这个变量时是最新修改的synchronized最常用的锁，通常形式是synchronized function { //代码}在一个对象中，维持着一个锁变量。当线程进入这个，此线程相当于获得了这个锁的使用权。其他线程在没有获得锁之前，禁止进入此代码段。同时，他还维持着一个变量，函数调用栈进入不同的加synchronized的方法，变量会增加，退出会减少，直至0才会释放锁synchronized(this){ //代码}可以锁定代码块 Lock.class这个是一个显示锁，在代码上来看，不够优雅。达到的效果和synchronized差不多。但是可以在获得锁失败时做出处理。 wait() notify()从前面，我们知道。在synchronized关键字下，会获得一个锁。但是有时候，我们需要进程之间的同步，有时候需要释放这个锁给另外的线程使用。直至另外一个线程处理完我们所需要的任务。我们在接着跑下去。1234567synchronized&#123; wait();&#125;synchronized&#123; notify();&#125;当我们持有线程锁后，wait()方法让我们暂时放弃锁。当前线程被挂起。直至另外锁调用notify()/notifyAll()(notify()是解除单个wait()，notifyAll()能解除多个wait()).才能继续运行剩余的代码块。值得注意的是，当线程没有持有锁的时候，调用这几个方法。都会抛出异常。 线程中的异常java异常机制在小型项目中，十分有用。方便我们分离异常发生代码块和处理代码块。在多线程编程中，异常是不可以跨线程传递的。也就说，我们需要在线程的调用栈中，及时的处理我们的异常。有时候，这样容易造成代码混乱。逻辑不够优雅。sun提供了一个方法，让我们处理跨线程异常。每个Thread对象都允许附着一个异常处理器。Thread.UncaughtExceptionHandle.uncaughtException().会在线程未被捕获异常时候死亡时被调用。 新类库中的构件我想想很多用java的程序员最喜欢的就是其中各种各样的框架，能大大减少开发时间。说句题外话，我们这一批刚刚从学校走出来的学生。在学校常常学习着大量的计算机底层知识，用着c实现各种算法。很多人，包括曾经的我。都觉得用太多成型的框架，会大大减弱编程能力。但是我现在觉得，能用好用的工具，很好的解决问题，才是最重要的。包括现在流行的python，越来越多的细节被隐藏在各种组件中，大大减轻了程序员的压力。 java SE5 中的java.util.concurrent 引入了很多解决并发问题的工具。以下是我看中的总结。 CountDownLatch它被用来同步一个或者多个任务，强制他们等待有其他任务执行的一组操作。它相当与一个计数器，在调用await()后，他将进入等待状态。直至countDown()能将初始化量减少到0;。 CyclicBarrier和CountDownLatch相似，这个也是管理多个线程工作的拦截器。用法更更加灵活。设想一个场景。一个很庞大的矩阵，我们对所有元素进行求和计算。我们的想法是，每一列用一个线程进行计算，在把所有的结果加起来。那么，在我们进行完每一列计算后，调用await()等待,其他的线程执行完计算才能执行加操作。在new CycliBarrier的生成方法中，能传入一个参数Runnable,复写它的run方法，当所有调用和barrier有关的线程进入await（）。执行这个Runnable。（这个Runnable在最后进入的线程中执行） Semaphore正常的锁，我们可以理解它是一个许可证。当一个线程调用他的acquire()方法时，他将获得许可证。当调用realse()方法后，许可证才被释放。android的wakeLock就是这样实现的。 Exchanger从名字可以看出是用来进行线程之间的交换的。在两个线程在结束之前，都会获得由exchanger.exchange(Object)返回的对象。 乐观锁在原子操作的数据类型中，如AtomicInteger中，可以利用compareAndSet方法，修改其中的数据。以提高效率。乐观锁实现的原理是：判断是数据是不是最新的。如果是最新的就可以操作，而如果不是就循环判断，直到数据是最新的。这样可以省去加锁和解锁消耗的时间。 android中的线程解决方案在android开发中，我们一般通过Handler - Looper - MessageQueue来进行进程中的通信和同步，包括android FrameWork在进入ActivityThread时也会生成一个 Handler H 来负责管理剩下所有的操作。我觉得android设计的同步实行，更适合我们普通人的思维。具体是这样的。每个一个Thread都可以绑定一个MessageQueue，用于存放消息。当其里面不为空，loop将其取出，让后执行其回调。而hanler是发射器。用来将Message发射到其绑定的MessageQueue中。这样当，当线程1执行完操作，就可以将结果发射给线程2.线程2得到接着操作资源，接着执行操作。我个人觉得是一种比较优雅和符合普通人思维的方式。","categories":[],"tags":[{"name":"concurrency","slug":"concurrency","permalink":"http://liangsj.top/tags/concurrency/"}],"keywords":[]},{"title":"generics","slug":"generics","date":"2016-04-26T02:51:54.000Z","updated":"2019-06-25T00:00:59.935Z","comments":true,"path":"2016/04/26/generics/","link":"","permalink":"http://liangsj.top/2016/04/26/generics/","excerpt":"","text":"泛型的作用java 泛型是在JDK5 后出现的。其核心概念是：告诉编译器想使用什么类型，将其置于尖括号内。让编译器帮你处理细节。并做正确性的检测。","categories":[],"tags":[{"name":"generics","slug":"generics","permalink":"http://liangsj.top/tags/generics/"}],"keywords":[]},{"title":"我所理解的java反射","slug":"RIIT","date":"2016-04-20T11:24:29.000Z","updated":"2019-06-25T00:00:59.934Z","comments":true,"path":"2016/04/20/RIIT/","link":"","permalink":"http://liangsj.top/2016/04/20/RIIT/","excerpt":"","text":"为什么要使用反射 在面向对象的编程中，多态是最常用的概念。基本上，面向对象的思想之所以能这么流行，能出现多种灵活的设计模式，多态的特征是功不可没的。多态，使我们将抽象和具体隔离。使得父类给出接口，子类具体实现。降低了编程的复杂性。但在某些情况下，在我们将子类向上转型后，有希望知道这个类的具体类型，和操作某些子类特有的行为。这时候，反射能帮上我们的忙。 在某些情况了，你新的类在你的程序编译好很久后才会出现。比如：你从互联网上下载一段代码，你明确知道，这段代码代表的是一个类。可是，你怎么才能很使用它呢。反射就是我们用于解决这种问题的工具。 Class一切都是对象,是java的基本设计思想。在我们编写每一个.java文件后，编译器会将我们的.java文件编译成.class文件。当我们调用name.class的静态方法时，jvm的类加载器会将我们的class文件加载进内存。这个从侧面证实了，一个类的构造函数也是静态函数，虽然他们没有static关键字。class也是一个对象。我们可以利用这个对象。来创建“常规”的对象.从上面的描述，我们也可以了解到，java是动态加载的语言。当类首次被引用的时候，才会被加载进内存。这点c++中就很难做到。 121、Class.forname(className); //可以不是使用对象，拿到这个类的Class引用。2、Class name = name.class; //类字面常量生成Class引用。在编译时就会受到检查 值得注意的一点，使用方法1获得类是的引用时，其静态成员会被初始化。使用方法2时，其静态成员只有在其类的静态成员第一次被使用时，才会被初始化。 泛型和Class注意点 假设 存在 父类 Father 子类 Child extends father1Class&lt;Child&gt; c=Child.classm因为编译时就知道c.getSuperclass()得到的不只是Father这个类，更明确到他是Child的父类。 isInstance 和 isInstanceOfisInstanceOf和isInstance这两个方法都是用来确定对象的类型。但是用起来有一些差别。总体来说，isInstanceOf实在编译期间就能明确对象类型的。而isInstance实在运行期间才能确定。用法也稍微也不同123A a = new A();a.instanceOf A; //truea.getClass().instance(A);//true值得注意的是，isInstance比较影响效率，在能使用isInstanceOf 的情况下，尽可能的使用isInstanceOf 动态代理代理模式事实上就是在具体实现类中间加一个中间层。把具体实现隔离开来。在java中，出来能实现我们经常见到的代理模式，我们还能通过实现接口InvocationHanler来实现动态代理。 1234567891011public List getList(final List list)&#123; return (List) Proxy.newProxyInstance(DummyProxy.class.getClassLoader(), new Class[] &#123; List.class&#125; new InvocationHanler()&#123; public Object invoke(Object proxy, Method method Object[] args) throws Throwable&#123; if(&quot;add&quot;.equals(method.getName()))&#123; throw new UnsupportdOperationException(); &#125;else&#123; return method.invoke(list,args); &#125; &#125; &#125; );&#125; 上面例子是执行List.class的方法，如果遇到add方法，则抛出异常。剩下的方法正常执行。例子来自（http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy） 反射的危害事实上，反射是很强大的。但是伴随而来的是权限方面的难以管理。原则上来说，反射只要知道方法名，就能调用此方法。private关键字也起不到保护的作用。但是，有趣的是，final域相对是安全的，运行是，修改它，系统并不会抛出异常，但是事实上它的值并没有被修改。","categories":[],"tags":[{"name":"java reflection","slug":"java-reflection","permalink":"http://liangsj.top/tags/java-reflection/"}],"keywords":[]},{"title":"String","slug":"我对java-String的理解","date":"2016-04-19T09:50:05.000Z","updated":"2019-06-25T00:00:59.936Z","comments":true,"path":"2016/04/19/我对java-String的理解/","link":"","permalink":"http://liangsj.top/2016/04/19/我对java-String的理解/","excerpt":"","text":"我对java String的理解在java开发中，String几乎最常用的类型了。在系统中，字符串计算是十分耗费资源的。为此，sun在设计String是，采用了很多奇妙的设计。 String的不可变性在java设计中，String类型是不可变的。如12String s1 = &quot;abc&quot;;String s2 = s1.toUpperCase(); 实际上，s1依旧指向 abc ，而s2指 向新生成的ABC所在的新的地址。换句话说，String具有只读性。 String的 +大家都知道，在java中，是不允许对像C++一样操作符重载的。但是，对于String来说有点例外，它重载了，“+”、“+=”两个操作符号 在日常程序编写中，我是经常会编写字符串拼接的程序。如 String s = “I”+”love”+”CS”; 按照String不变性在推测，是不是在生成新的s时， 第一步：新生成”Ilove”对象 第二部：生成”IloveCS”对象 如果字符串拼接项很多，那么。那么中间就会生成很多对象。Gc也会不断的回收新生成的对象。在一个大型的程序中，如此低效率的行为，明显是不会被允许的。 事实上，在java编译中，实际上采用了new StringBuilder的方式，优化了这个问题。 上述过程，最终实现优化后，差不多如下 12345StringBuilder sb = new StringBuilder();sb.append(&quot;I&quot;);sb.append(&quot;love&quot;);sb.append(&quot;CS&quot;);String s = sb.toString(); 注意：在字符串拼接十分复杂的情况下，需要自己生成StringBuilder。单纯依靠编译器优化。可能依旧存在效率问题。 String 存储 String是一个非常有意思的类。在内存中存储的方式不同 当String s1= “abc” 时，String是存在静态区。且在静态区内，同一个字符串，在静态区，只能存有一份。 123String s2 = &quot;a&quot;;String s3 = &quot;a&quot;;s2 == s3 // true 注意： == 比较的是内存地址是否相等。如果是字符串内容是否相等，则用equal（） 123String s4 = new String(&quot;abc&quot;);是生成在堆内存中。String s5 = new String(&quot;abc&quot;);s4 == s5 //false String s6 = “abc” + new String(“cde”); 也是生成在堆内存中，因为new 后面只有在运行时才会被知道具体内容。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://liangsj.top/tags/java/"}],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2016-03-26T03:27:31.000Z","updated":"2019-06-29T11:50:54.970Z","comments":true,"path":"2016/03/26/hello-world/","link":"","permalink":"http://liangsj.top/2016/03/26/hello-world/","excerpt":"","text":"大家好，这是我第一篇博文。按照程序员的惯例。第一篇文章应该是叫hello world吧 Quick Start建立博客的目的主要还是用来自娱自乐。偶尔记录一下自己的生活。新学到的技术，或者对以往技术的感悟。如果有人看的话。希望能对向我一样在学习中的人有所帮助。 platformaliyun centos 因为工作一直是用的linux发行版是ubuntu，但是最便宜的aliyun是centos的。为了省点钱，只能在centos上多折腾一点。估计我们这一代程序员，从在学校开始，接触的都是ubuntu。centos应该不是很多人用。好在基本的都差不多。遇到不相同的部分，概念迁移+google一下。基本也能解决。 toolsnginxnginx是web容器。我对其研究不深，暂时还是停留在只知道配置阶段。看了nginx官网的文档，我觉得它的反向代理很有用。对于服务器分流，减压。多服务器搭建应该很方便. nginx install12$ sudo yum -y install nginx centos 仓库中安装$ sudo systemctl start nginx 启动nginx 接下来输入你的aliyun IP地址就可以看到nginx的成功启动界面了。 nginx settingnginx 的配置文件在 /etc/nginx/nginx.conf1234$ cd /etc/nginx/$ sudo chmod +rw nginx.conf 将配置文件设置成当前用户可读写模式$ sudo mv nginx.conf nginx.cong.bak 备份配置文件，防止修改错误还能找会来$ sudo vim nginx.conf 用vim 打开文件 nginx.conf1234server&#123; root //标出根目录文件，就是一下hexo生产的静态文件 index index.php index.html index.htm 设置文件的名字格式&#125; hexohexo 是基于nodejs的静态博客生成工具。个人觉得还挺好用，主要还是操作简单hexo install123$ sudo yum -y install node 安装nodejs$ sudo yum -y install npm 安装nodejs的npm仓库$ npm install -g hexo-cli 安装hexo hexo 操作十分简单123$ hexo init 初始化当初文件夹，生成博客工程$ hexo g 生成静态文件$ hexo server 打开hexo调试服务器。如果提示错误，先安装hexo server组件 更多可以查看 hexo(http://hexo.io)官网","categories":[],"tags":[],"keywords":[]}]}